// source: app/router/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.xray.app.router.Domain');
goog.provide('proto.xray.app.router.Domain.Attribute');
goog.provide('proto.xray.app.router.Domain.Attribute.TypedValueCase');
goog.provide('proto.xray.app.router.Domain.Type');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.Domain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.router.Domain.repeatedFields_, null);
};
goog.inherits(proto.xray.app.router.Domain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.Domain.displayName = 'proto.xray.app.router.Domain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.Domain.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.xray.app.router.Domain.Attribute.oneofGroups_);
};
goog.inherits(proto.xray.app.router.Domain.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.Domain.Attribute.displayName = 'proto.xray.app.router.Domain.Attribute';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.router.Domain.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.Domain.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.Domain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.Domain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.Domain.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
value: jspb.Message.getFieldWithDefault(msg, 2, ""),
attributeList: jspb.Message.toObjectList(msg.getAttributeList(),
    proto.xray.app.router.Domain.Attribute.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.Domain}
 */
proto.xray.app.router.Domain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.Domain;
  return proto.xray.app.router.Domain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.Domain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.Domain}
 */
proto.xray.app.router.Domain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xray.app.router.Domain.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.xray.app.router.Domain.Attribute;
      reader.readMessage(value,proto.xray.app.router.Domain.Attribute.deserializeBinaryFromReader);
      msg.addAttribute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.Domain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.Domain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.Domain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.Domain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttributeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xray.app.router.Domain.Attribute.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.xray.app.router.Domain.Type = {
  PLAIN: 0,
  REGEX: 1,
  DOMAIN: 2,
  FULL: 3
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.xray.app.router.Domain.Attribute.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.xray.app.router.Domain.Attribute.TypedValueCase = {
  TYPED_VALUE_NOT_SET: 0,
  BOOL_VALUE: 2,
  INT_VALUE: 3
};

/**
 * @return {proto.xray.app.router.Domain.Attribute.TypedValueCase}
 */
proto.xray.app.router.Domain.Attribute.prototype.getTypedValueCase = function() {
  return /** @type {proto.xray.app.router.Domain.Attribute.TypedValueCase} */(jspb.Message.computeOneofCase(this, proto.xray.app.router.Domain.Attribute.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.Domain.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.Domain.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.Domain.Attribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.Domain.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
boolValue: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
intValue: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.Domain.Attribute}
 */
proto.xray.app.router.Domain.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.Domain.Attribute;
  return proto.xray.app.router.Domain.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.Domain.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.Domain.Attribute}
 */
proto.xray.app.router.Domain.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.Domain.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.Domain.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.Domain.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.Domain.Attribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.xray.app.router.Domain.Attribute.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.Domain.Attribute} returns this
 */
proto.xray.app.router.Domain.Attribute.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool bool_value = 2;
 * @return {boolean}
 */
proto.xray.app.router.Domain.Attribute.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.router.Domain.Attribute} returns this
 */
proto.xray.app.router.Domain.Attribute.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.xray.app.router.Domain.Attribute.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.xray.app.router.Domain.Attribute} returns this
 */
proto.xray.app.router.Domain.Attribute.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.xray.app.router.Domain.Attribute.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.Domain.Attribute.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 int_value = 3;
 * @return {number}
 */
proto.xray.app.router.Domain.Attribute.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.app.router.Domain.Attribute} returns this
 */
proto.xray.app.router.Domain.Attribute.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.xray.app.router.Domain.Attribute.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.xray.app.router.Domain.Attribute} returns this
 */
proto.xray.app.router.Domain.Attribute.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.xray.app.router.Domain.Attribute.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.Domain.Attribute.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Type type = 1;
 * @return {!proto.xray.app.router.Domain.Type}
 */
proto.xray.app.router.Domain.prototype.getType = function() {
  return /** @type {!proto.xray.app.router.Domain.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.xray.app.router.Domain.Type} value
 * @return {!proto.xray.app.router.Domain} returns this
 */
proto.xray.app.router.Domain.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.xray.app.router.Domain.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.Domain} returns this
 */
proto.xray.app.router.Domain.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Attribute attribute = 3;
 * @return {!Array<!proto.xray.app.router.Domain.Attribute>}
 */
proto.xray.app.router.Domain.prototype.getAttributeList = function() {
  return /** @type{!Array<!proto.xray.app.router.Domain.Attribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.Domain.Attribute, 3));
};


/**
 * @param {!Array<!proto.xray.app.router.Domain.Attribute>} value
 * @return {!proto.xray.app.router.Domain} returns this
*/
proto.xray.app.router.Domain.prototype.setAttributeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xray.app.router.Domain.Attribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.Domain.Attribute}
 */
proto.xray.app.router.Domain.prototype.addAttribute = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xray.app.router.Domain.Attribute, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.Domain} returns this
 */
proto.xray.app.router.Domain.prototype.clearAttributeList = function() {
  return this.setAttributeList([]);
};


