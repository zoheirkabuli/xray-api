// source: app/dns/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.xray.app.dns.Config');
goog.provide('proto.xray.app.dns.Config.HostMapping');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.xray.app.dns.NameServer');

goog.forwardDeclare('proto.xray.app.dns.DomainMatchingType');
goog.forwardDeclare('proto.xray.app.dns.QueryStrategy');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.dns.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.dns.Config.repeatedFields_, null);
};
goog.inherits(proto.xray.app.dns.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.dns.Config.displayName = 'proto.xray.app.dns.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.dns.Config.HostMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.dns.Config.HostMapping.repeatedFields_, null);
};
goog.inherits(proto.xray.app.dns.Config.HostMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.dns.Config.HostMapping.displayName = 'proto.xray.app.dns.Config.HostMapping';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.dns.Config.repeatedFields_ = [5,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.dns.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.dns.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.dns.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.dns.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
nameServerList: jspb.Message.toObjectList(msg.getNameServerList(),
    proto.xray.app.dns.NameServer.toObject, includeInstance),
clientIp: msg.getClientIp_asB64(),
staticHostsList: jspb.Message.toObjectList(msg.getStaticHostsList(),
    proto.xray.app.dns.Config.HostMapping.toObject, includeInstance),
tag: jspb.Message.getFieldWithDefault(msg, 6, ""),
disablecache: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
queryStrategy: jspb.Message.getFieldWithDefault(msg, 9, 0),
disablefallback: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
disablefallbackifmatch: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.dns.Config}
 */
proto.xray.app.dns.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.dns.Config;
  return proto.xray.app.dns.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.dns.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.dns.Config}
 */
proto.xray.app.dns.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = new proto.xray.app.dns.NameServer;
      reader.readMessage(value,proto.xray.app.dns.NameServer.deserializeBinaryFromReader);
      msg.addNameServer(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientIp(value);
      break;
    case 4:
      var value = new proto.xray.app.dns.Config.HostMapping;
      reader.readMessage(value,proto.xray.app.dns.Config.HostMapping.deserializeBinaryFromReader);
      msg.addStaticHosts(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisablecache(value);
      break;
    case 9:
      var value = /** @type {!proto.xray.app.dns.QueryStrategy} */ (reader.readEnum());
      msg.setQueryStrategy(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisablefallback(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisablefallbackifmatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.dns.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.dns.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.dns.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.dns.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNameServerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.xray.app.dns.NameServer.serializeBinaryToWriter
    );
  }
  f = message.getClientIp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getStaticHostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.xray.app.dns.Config.HostMapping.serializeBinaryToWriter
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDisablecache();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getQueryStrategy();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getDisablefallback();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDisablefallbackifmatch();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.dns.Config.HostMapping.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.dns.Config.HostMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.dns.Config.HostMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.dns.Config.HostMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.dns.Config.HostMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
domain: jspb.Message.getFieldWithDefault(msg, 2, ""),
ipList: msg.getIpList_asB64(),
proxiedDomain: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.dns.Config.HostMapping}
 */
proto.xray.app.dns.Config.HostMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.dns.Config.HostMapping;
  return proto.xray.app.dns.Config.HostMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.dns.Config.HostMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.dns.Config.HostMapping}
 */
proto.xray.app.dns.Config.HostMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xray.app.dns.DomainMatchingType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addIp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProxiedDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.dns.Config.HostMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.dns.Config.HostMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.dns.Config.HostMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.dns.Config.HostMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIpList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getProxiedDomain();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional DomainMatchingType type = 1;
 * @return {!proto.xray.app.dns.DomainMatchingType}
 */
proto.xray.app.dns.Config.HostMapping.prototype.getType = function() {
  return /** @type {!proto.xray.app.dns.DomainMatchingType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.xray.app.dns.DomainMatchingType} value
 * @return {!proto.xray.app.dns.Config.HostMapping} returns this
 */
proto.xray.app.dns.Config.HostMapping.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string domain = 2;
 * @return {string}
 */
proto.xray.app.dns.Config.HostMapping.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.dns.Config.HostMapping} returns this
 */
proto.xray.app.dns.Config.HostMapping.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated bytes ip = 3;
 * @return {!Array<string>}
 */
proto.xray.app.dns.Config.HostMapping.prototype.getIpList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes ip = 3;
 * This is a type-conversion wrapper around `getIpList()`
 * @return {!Array<string>}
 */
proto.xray.app.dns.Config.HostMapping.prototype.getIpList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getIpList()));
};


/**
 * repeated bytes ip = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIpList()`
 * @return {!Array<!Uint8Array>}
 */
proto.xray.app.dns.Config.HostMapping.prototype.getIpList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getIpList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.xray.app.dns.Config.HostMapping} returns this
 */
proto.xray.app.dns.Config.HostMapping.prototype.setIpList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.xray.app.dns.Config.HostMapping} returns this
 */
proto.xray.app.dns.Config.HostMapping.prototype.addIp = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.dns.Config.HostMapping} returns this
 */
proto.xray.app.dns.Config.HostMapping.prototype.clearIpList = function() {
  return this.setIpList([]);
};


/**
 * optional string proxied_domain = 4;
 * @return {string}
 */
proto.xray.app.dns.Config.HostMapping.prototype.getProxiedDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.dns.Config.HostMapping} returns this
 */
proto.xray.app.dns.Config.HostMapping.prototype.setProxiedDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated NameServer name_server = 5;
 * @return {!Array<!proto.xray.app.dns.NameServer>}
 */
proto.xray.app.dns.Config.prototype.getNameServerList = function() {
  return /** @type{!Array<!proto.xray.app.dns.NameServer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.dns.NameServer, 5));
};


/**
 * @param {!Array<!proto.xray.app.dns.NameServer>} value
 * @return {!proto.xray.app.dns.Config} returns this
*/
proto.xray.app.dns.Config.prototype.setNameServerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.xray.app.dns.NameServer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.dns.NameServer}
 */
proto.xray.app.dns.Config.prototype.addNameServer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.xray.app.dns.NameServer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.dns.Config} returns this
 */
proto.xray.app.dns.Config.prototype.clearNameServerList = function() {
  return this.setNameServerList([]);
};


/**
 * optional bytes client_ip = 3;
 * @return {string}
 */
proto.xray.app.dns.Config.prototype.getClientIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes client_ip = 3;
 * This is a type-conversion wrapper around `getClientIp()`
 * @return {string}
 */
proto.xray.app.dns.Config.prototype.getClientIp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientIp()));
};


/**
 * optional bytes client_ip = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientIp()`
 * @return {!Uint8Array}
 */
proto.xray.app.dns.Config.prototype.getClientIp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientIp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.app.dns.Config} returns this
 */
proto.xray.app.dns.Config.prototype.setClientIp = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated HostMapping static_hosts = 4;
 * @return {!Array<!proto.xray.app.dns.Config.HostMapping>}
 */
proto.xray.app.dns.Config.prototype.getStaticHostsList = function() {
  return /** @type{!Array<!proto.xray.app.dns.Config.HostMapping>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.dns.Config.HostMapping, 4));
};


/**
 * @param {!Array<!proto.xray.app.dns.Config.HostMapping>} value
 * @return {!proto.xray.app.dns.Config} returns this
*/
proto.xray.app.dns.Config.prototype.setStaticHostsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xray.app.dns.Config.HostMapping=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.dns.Config.HostMapping}
 */
proto.xray.app.dns.Config.prototype.addStaticHosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xray.app.dns.Config.HostMapping, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.dns.Config} returns this
 */
proto.xray.app.dns.Config.prototype.clearStaticHostsList = function() {
  return this.setStaticHostsList([]);
};


/**
 * optional string tag = 6;
 * @return {string}
 */
proto.xray.app.dns.Config.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.dns.Config} returns this
 */
proto.xray.app.dns.Config.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool disableCache = 8;
 * @return {boolean}
 */
proto.xray.app.dns.Config.prototype.getDisablecache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.dns.Config} returns this
 */
proto.xray.app.dns.Config.prototype.setDisablecache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional QueryStrategy query_strategy = 9;
 * @return {!proto.xray.app.dns.QueryStrategy}
 */
proto.xray.app.dns.Config.prototype.getQueryStrategy = function() {
  return /** @type {!proto.xray.app.dns.QueryStrategy} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.xray.app.dns.QueryStrategy} value
 * @return {!proto.xray.app.dns.Config} returns this
 */
proto.xray.app.dns.Config.prototype.setQueryStrategy = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional bool disableFallback = 10;
 * @return {boolean}
 */
proto.xray.app.dns.Config.prototype.getDisablefallback = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.dns.Config} returns this
 */
proto.xray.app.dns.Config.prototype.setDisablefallback = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool disableFallbackIfMatch = 11;
 * @return {boolean}
 */
proto.xray.app.dns.Config.prototype.getDisablefallbackifmatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.dns.Config} returns this
 */
proto.xray.app.dns.Config.prototype.setDisablefallbackifmatch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


