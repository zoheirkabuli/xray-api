// source: transport/internet/reality/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.xray.transport.internet.reality.Config');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.transport.internet.reality.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.transport.internet.reality.Config.repeatedFields_, null);
};
goog.inherits(proto.xray.transport.internet.reality.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.transport.internet.reality.Config.displayName = 'proto.xray.transport.internet.reality.Config';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.transport.internet.reality.Config.repeatedFields_ = [5,10,26];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.transport.internet.reality.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.transport.internet.reality.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.transport.internet.reality.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.reality.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
show: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
type: jspb.Message.getFieldWithDefault(msg, 3, ""),
xver: jspb.Message.getFieldWithDefault(msg, 4, 0),
serverNamesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
privateKey: msg.getPrivateKey_asB64(),
minClientVer: msg.getMinClientVer_asB64(),
maxClientVer: msg.getMaxClientVer_asB64(),
maxTimeDiff: jspb.Message.getFieldWithDefault(msg, 9, 0),
shortIdsList: msg.getShortIdsList_asB64(),
fingerprint: jspb.Message.getFieldWithDefault(msg, 21, ""),
serverName: jspb.Message.getFieldWithDefault(msg, 22, ""),
publicKey: msg.getPublicKey_asB64(),
shortId: msg.getShortId_asB64(),
spiderX: jspb.Message.getFieldWithDefault(msg, 25, ""),
spiderYList: (f = jspb.Message.getRepeatedField(msg, 26)) == null ? undefined : f,
masterKeyLog: jspb.Message.getFieldWithDefault(msg, 27, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.transport.internet.reality.Config}
 */
proto.xray.transport.internet.reality.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.transport.internet.reality.Config;
  return proto.xray.transport.internet.reality.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.transport.internet.reality.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.transport.internet.reality.Config}
 */
proto.xray.transport.internet.reality.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShow(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setXver(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addServerNames(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrivateKey(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMinClientVer(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMaxClientVer(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxTimeDiff(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addShortIds(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerName(value);
      break;
    case 23:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 24:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setShortId(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpiderX(value);
      break;
    case 26:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSpiderY(values[i]);
      }
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setMasterKeyLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.reality.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.transport.internet.reality.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.transport.internet.reality.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.reality.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShow();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getXver();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getServerNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getPrivateKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getMinClientVer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getMaxClientVer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getMaxTimeDiff();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getShortIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      10,
      f
    );
  }
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getServerName();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      23,
      f
    );
  }
  f = message.getShortId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      24,
      f
    );
  }
  f = message.getSpiderX();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getSpiderYList();
  if (f.length > 0) {
    writer.writePackedInt64(
      26,
      f
    );
  }
  f = message.getMasterKeyLog();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
};


/**
 * optional bool show = 1;
 * @return {boolean}
 */
proto.xray.transport.internet.reality.Config.prototype.getShow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setShow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setDest = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 xver = 4;
 * @return {number}
 */
proto.xray.transport.internet.reality.Config.prototype.getXver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setXver = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated string server_names = 5;
 * @return {!Array<string>}
 */
proto.xray.transport.internet.reality.Config.prototype.getServerNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setServerNamesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.addServerNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.clearServerNamesList = function() {
  return this.setServerNamesList([]);
};


/**
 * optional bytes private_key = 6;
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes private_key = 6;
 * This is a type-conversion wrapper around `getPrivateKey()`
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getPrivateKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrivateKey()));
};


/**
 * optional bytes private_key = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrivateKey()`
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.reality.Config.prototype.getPrivateKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrivateKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setPrivateKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes min_client_ver = 7;
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getMinClientVer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes min_client_ver = 7;
 * This is a type-conversion wrapper around `getMinClientVer()`
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getMinClientVer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMinClientVer()));
};


/**
 * optional bytes min_client_ver = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMinClientVer()`
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.reality.Config.prototype.getMinClientVer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMinClientVer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setMinClientVer = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes max_client_ver = 8;
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getMaxClientVer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes max_client_ver = 8;
 * This is a type-conversion wrapper around `getMaxClientVer()`
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getMaxClientVer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMaxClientVer()));
};


/**
 * optional bytes max_client_ver = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMaxClientVer()`
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.reality.Config.prototype.getMaxClientVer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMaxClientVer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setMaxClientVer = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional uint64 max_time_diff = 9;
 * @return {number}
 */
proto.xray.transport.internet.reality.Config.prototype.getMaxTimeDiff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setMaxTimeDiff = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated bytes short_ids = 10;
 * @return {!Array<string>}
 */
proto.xray.transport.internet.reality.Config.prototype.getShortIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * repeated bytes short_ids = 10;
 * This is a type-conversion wrapper around `getShortIdsList()`
 * @return {!Array<string>}
 */
proto.xray.transport.internet.reality.Config.prototype.getShortIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getShortIdsList()));
};


/**
 * repeated bytes short_ids = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getShortIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.xray.transport.internet.reality.Config.prototype.getShortIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getShortIdsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setShortIdsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.addShortIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.clearShortIdsList = function() {
  return this.setShortIdsList([]);
};


/**
 * optional string Fingerprint = 21;
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setFingerprint = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string server_name = 22;
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getServerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setServerName = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional bytes public_key = 23;
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * optional bytes public_key = 23;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 23;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.reality.Config.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 23, value);
};


/**
 * optional bytes short_id = 24;
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getShortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * optional bytes short_id = 24;
 * This is a type-conversion wrapper around `getShortId()`
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getShortId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getShortId()));
};


/**
 * optional bytes short_id = 24;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getShortId()`
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.reality.Config.prototype.getShortId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getShortId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setShortId = function(value) {
  return jspb.Message.setProto3BytesField(this, 24, value);
};


/**
 * optional string spider_x = 25;
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getSpiderX = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setSpiderX = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * repeated int64 spider_y = 26;
 * @return {!Array<number>}
 */
proto.xray.transport.internet.reality.Config.prototype.getSpiderYList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 26));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setSpiderYList = function(value) {
  return jspb.Message.setField(this, 26, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.addSpiderY = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 26, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.clearSpiderYList = function() {
  return this.setSpiderYList([]);
};


/**
 * optional string master_key_log = 27;
 * @return {string}
 */
proto.xray.transport.internet.reality.Config.prototype.getMasterKeyLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.reality.Config} returns this
 */
proto.xray.transport.internet.reality.Config.prototype.setMasterKeyLog = function(value) {
  return jspb.Message.setProto3StringField(this, 27, value);
};


