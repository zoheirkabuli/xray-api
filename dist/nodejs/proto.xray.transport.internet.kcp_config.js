// source: transport/internet/kcp/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.xray.transport.internet.kcp.Config');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.xray.common.serial.TypedMessage');
goog.require('proto.xray.transport.internet.kcp.DownlinkCapacity');
goog.require('proto.xray.transport.internet.kcp.EncryptionSeed');
goog.require('proto.xray.transport.internet.kcp.MTU');
goog.require('proto.xray.transport.internet.kcp.ReadBuffer');
goog.require('proto.xray.transport.internet.kcp.TTI');
goog.require('proto.xray.transport.internet.kcp.UplinkCapacity');
goog.require('proto.xray.transport.internet.kcp.WriteBuffer');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.transport.internet.kcp.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.transport.internet.kcp.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.transport.internet.kcp.Config.displayName = 'proto.xray.transport.internet.kcp.Config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.transport.internet.kcp.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.transport.internet.kcp.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.transport.internet.kcp.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.kcp.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
mtu: (f = msg.getMtu()) && proto.xray.transport.internet.kcp.MTU.toObject(includeInstance, f),
tti: (f = msg.getTti()) && proto.xray.transport.internet.kcp.TTI.toObject(includeInstance, f),
uplinkCapacity: (f = msg.getUplinkCapacity()) && proto.xray.transport.internet.kcp.UplinkCapacity.toObject(includeInstance, f),
downlinkCapacity: (f = msg.getDownlinkCapacity()) && proto.xray.transport.internet.kcp.DownlinkCapacity.toObject(includeInstance, f),
congestion: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
writeBuffer: (f = msg.getWriteBuffer()) && proto.xray.transport.internet.kcp.WriteBuffer.toObject(includeInstance, f),
readBuffer: (f = msg.getReadBuffer()) && proto.xray.transport.internet.kcp.ReadBuffer.toObject(includeInstance, f),
headerConfig: (f = msg.getHeaderConfig()) && proto.xray.common.serial.TypedMessage.toObject(includeInstance, f),
seed: (f = msg.getSeed()) && proto.xray.transport.internet.kcp.EncryptionSeed.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.transport.internet.kcp.Config}
 */
proto.xray.transport.internet.kcp.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.transport.internet.kcp.Config;
  return proto.xray.transport.internet.kcp.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.transport.internet.kcp.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.transport.internet.kcp.Config}
 */
proto.xray.transport.internet.kcp.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xray.transport.internet.kcp.MTU;
      reader.readMessage(value,proto.xray.transport.internet.kcp.MTU.deserializeBinaryFromReader);
      msg.setMtu(value);
      break;
    case 2:
      var value = new proto.xray.transport.internet.kcp.TTI;
      reader.readMessage(value,proto.xray.transport.internet.kcp.TTI.deserializeBinaryFromReader);
      msg.setTti(value);
      break;
    case 3:
      var value = new proto.xray.transport.internet.kcp.UplinkCapacity;
      reader.readMessage(value,proto.xray.transport.internet.kcp.UplinkCapacity.deserializeBinaryFromReader);
      msg.setUplinkCapacity(value);
      break;
    case 4:
      var value = new proto.xray.transport.internet.kcp.DownlinkCapacity;
      reader.readMessage(value,proto.xray.transport.internet.kcp.DownlinkCapacity.deserializeBinaryFromReader);
      msg.setDownlinkCapacity(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCongestion(value);
      break;
    case 6:
      var value = new proto.xray.transport.internet.kcp.WriteBuffer;
      reader.readMessage(value,proto.xray.transport.internet.kcp.WriteBuffer.deserializeBinaryFromReader);
      msg.setWriteBuffer(value);
      break;
    case 7:
      var value = new proto.xray.transport.internet.kcp.ReadBuffer;
      reader.readMessage(value,proto.xray.transport.internet.kcp.ReadBuffer.deserializeBinaryFromReader);
      msg.setReadBuffer(value);
      break;
    case 8:
      var value = new proto.xray.common.serial.TypedMessage;
      reader.readMessage(value,proto.xray.common.serial.TypedMessage.deserializeBinaryFromReader);
      msg.setHeaderConfig(value);
      break;
    case 10:
      var value = new proto.xray.transport.internet.kcp.EncryptionSeed;
      reader.readMessage(value,proto.xray.transport.internet.kcp.EncryptionSeed.deserializeBinaryFromReader);
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.kcp.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.transport.internet.kcp.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.transport.internet.kcp.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.kcp.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMtu();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xray.transport.internet.kcp.MTU.serializeBinaryToWriter
    );
  }
  f = message.getTti();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xray.transport.internet.kcp.TTI.serializeBinaryToWriter
    );
  }
  f = message.getUplinkCapacity();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xray.transport.internet.kcp.UplinkCapacity.serializeBinaryToWriter
    );
  }
  f = message.getDownlinkCapacity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.xray.transport.internet.kcp.DownlinkCapacity.serializeBinaryToWriter
    );
  }
  f = message.getCongestion();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getWriteBuffer();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.xray.transport.internet.kcp.WriteBuffer.serializeBinaryToWriter
    );
  }
  f = message.getReadBuffer();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.xray.transport.internet.kcp.ReadBuffer.serializeBinaryToWriter
    );
  }
  f = message.getHeaderConfig();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.xray.common.serial.TypedMessage.serializeBinaryToWriter
    );
  }
  f = message.getSeed();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.xray.transport.internet.kcp.EncryptionSeed.serializeBinaryToWriter
    );
  }
};


/**
 * optional MTU mtu = 1;
 * @return {?proto.xray.transport.internet.kcp.MTU}
 */
proto.xray.transport.internet.kcp.Config.prototype.getMtu = function() {
  return /** @type{?proto.xray.transport.internet.kcp.MTU} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.kcp.MTU, 1));
};


/**
 * @param {?proto.xray.transport.internet.kcp.MTU|undefined} value
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
*/
proto.xray.transport.internet.kcp.Config.prototype.setMtu = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
 */
proto.xray.transport.internet.kcp.Config.prototype.clearMtu = function() {
  return this.setMtu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.kcp.Config.prototype.hasMtu = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TTI tti = 2;
 * @return {?proto.xray.transport.internet.kcp.TTI}
 */
proto.xray.transport.internet.kcp.Config.prototype.getTti = function() {
  return /** @type{?proto.xray.transport.internet.kcp.TTI} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.kcp.TTI, 2));
};


/**
 * @param {?proto.xray.transport.internet.kcp.TTI|undefined} value
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
*/
proto.xray.transport.internet.kcp.Config.prototype.setTti = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
 */
proto.xray.transport.internet.kcp.Config.prototype.clearTti = function() {
  return this.setTti(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.kcp.Config.prototype.hasTti = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UplinkCapacity uplink_capacity = 3;
 * @return {?proto.xray.transport.internet.kcp.UplinkCapacity}
 */
proto.xray.transport.internet.kcp.Config.prototype.getUplinkCapacity = function() {
  return /** @type{?proto.xray.transport.internet.kcp.UplinkCapacity} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.kcp.UplinkCapacity, 3));
};


/**
 * @param {?proto.xray.transport.internet.kcp.UplinkCapacity|undefined} value
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
*/
proto.xray.transport.internet.kcp.Config.prototype.setUplinkCapacity = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
 */
proto.xray.transport.internet.kcp.Config.prototype.clearUplinkCapacity = function() {
  return this.setUplinkCapacity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.kcp.Config.prototype.hasUplinkCapacity = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DownlinkCapacity downlink_capacity = 4;
 * @return {?proto.xray.transport.internet.kcp.DownlinkCapacity}
 */
proto.xray.transport.internet.kcp.Config.prototype.getDownlinkCapacity = function() {
  return /** @type{?proto.xray.transport.internet.kcp.DownlinkCapacity} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.kcp.DownlinkCapacity, 4));
};


/**
 * @param {?proto.xray.transport.internet.kcp.DownlinkCapacity|undefined} value
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
*/
proto.xray.transport.internet.kcp.Config.prototype.setDownlinkCapacity = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
 */
proto.xray.transport.internet.kcp.Config.prototype.clearDownlinkCapacity = function() {
  return this.setDownlinkCapacity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.kcp.Config.prototype.hasDownlinkCapacity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool congestion = 5;
 * @return {boolean}
 */
proto.xray.transport.internet.kcp.Config.prototype.getCongestion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
 */
proto.xray.transport.internet.kcp.Config.prototype.setCongestion = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional WriteBuffer write_buffer = 6;
 * @return {?proto.xray.transport.internet.kcp.WriteBuffer}
 */
proto.xray.transport.internet.kcp.Config.prototype.getWriteBuffer = function() {
  return /** @type{?proto.xray.transport.internet.kcp.WriteBuffer} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.kcp.WriteBuffer, 6));
};


/**
 * @param {?proto.xray.transport.internet.kcp.WriteBuffer|undefined} value
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
*/
proto.xray.transport.internet.kcp.Config.prototype.setWriteBuffer = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
 */
proto.xray.transport.internet.kcp.Config.prototype.clearWriteBuffer = function() {
  return this.setWriteBuffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.kcp.Config.prototype.hasWriteBuffer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ReadBuffer read_buffer = 7;
 * @return {?proto.xray.transport.internet.kcp.ReadBuffer}
 */
proto.xray.transport.internet.kcp.Config.prototype.getReadBuffer = function() {
  return /** @type{?proto.xray.transport.internet.kcp.ReadBuffer} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.kcp.ReadBuffer, 7));
};


/**
 * @param {?proto.xray.transport.internet.kcp.ReadBuffer|undefined} value
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
*/
proto.xray.transport.internet.kcp.Config.prototype.setReadBuffer = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
 */
proto.xray.transport.internet.kcp.Config.prototype.clearReadBuffer = function() {
  return this.setReadBuffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.kcp.Config.prototype.hasReadBuffer = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional xray.common.serial.TypedMessage header_config = 8;
 * @return {?proto.xray.common.serial.TypedMessage}
 */
proto.xray.transport.internet.kcp.Config.prototype.getHeaderConfig = function() {
  return /** @type{?proto.xray.common.serial.TypedMessage} */ (
    jspb.Message.getWrapperField(this, proto.xray.common.serial.TypedMessage, 8));
};


/**
 * @param {?proto.xray.common.serial.TypedMessage|undefined} value
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
*/
proto.xray.transport.internet.kcp.Config.prototype.setHeaderConfig = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
 */
proto.xray.transport.internet.kcp.Config.prototype.clearHeaderConfig = function() {
  return this.setHeaderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.kcp.Config.prototype.hasHeaderConfig = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional EncryptionSeed seed = 10;
 * @return {?proto.xray.transport.internet.kcp.EncryptionSeed}
 */
proto.xray.transport.internet.kcp.Config.prototype.getSeed = function() {
  return /** @type{?proto.xray.transport.internet.kcp.EncryptionSeed} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.kcp.EncryptionSeed, 10));
};


/**
 * @param {?proto.xray.transport.internet.kcp.EncryptionSeed|undefined} value
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
*/
proto.xray.transport.internet.kcp.Config.prototype.setSeed = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.kcp.Config} returns this
 */
proto.xray.transport.internet.kcp.Config.prototype.clearSeed = function() {
  return this.setSeed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.kcp.Config.prototype.hasSeed = function() {
  return jspb.Message.getField(this, 10) != null;
};


