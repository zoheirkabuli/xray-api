// source: proxy/freedom/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.xray.proxy.freedom.Config');
goog.provide('proto.xray.proxy.freedom.Config.DomainStrategy');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.xray.proxy.freedom.DestinationOverride');
goog.require('proto.xray.proxy.freedom.Fragment');
goog.require('proto.xray.proxy.freedom.Noise');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.proxy.freedom.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.proxy.freedom.Config.repeatedFields_, null);
};
goog.inherits(proto.xray.proxy.freedom.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.proxy.freedom.Config.displayName = 'proto.xray.proxy.freedom.Config';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.proxy.freedom.Config.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.proxy.freedom.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.proxy.freedom.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.proxy.freedom.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.proxy.freedom.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
domainStrategy: jspb.Message.getFieldWithDefault(msg, 1, 0),
destinationOverride: (f = msg.getDestinationOverride()) && proto.xray.proxy.freedom.DestinationOverride.toObject(includeInstance, f),
userLevel: jspb.Message.getFieldWithDefault(msg, 4, 0),
fragment: (f = msg.getFragment()) && proto.xray.proxy.freedom.Fragment.toObject(includeInstance, f),
proxyProtocol: jspb.Message.getFieldWithDefault(msg, 6, 0),
noisesList: jspb.Message.toObjectList(msg.getNoisesList(),
    proto.xray.proxy.freedom.Noise.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.proxy.freedom.Config}
 */
proto.xray.proxy.freedom.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.proxy.freedom.Config;
  return proto.xray.proxy.freedom.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.proxy.freedom.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.proxy.freedom.Config}
 */
proto.xray.proxy.freedom.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xray.proxy.freedom.Config.DomainStrategy} */ (reader.readEnum());
      msg.setDomainStrategy(value);
      break;
    case 3:
      var value = new proto.xray.proxy.freedom.DestinationOverride;
      reader.readMessage(value,proto.xray.proxy.freedom.DestinationOverride.deserializeBinaryFromReader);
      msg.setDestinationOverride(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserLevel(value);
      break;
    case 5:
      var value = new proto.xray.proxy.freedom.Fragment;
      reader.readMessage(value,proto.xray.proxy.freedom.Fragment.deserializeBinaryFromReader);
      msg.setFragment(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProxyProtocol(value);
      break;
    case 7:
      var value = new proto.xray.proxy.freedom.Noise;
      reader.readMessage(value,proto.xray.proxy.freedom.Noise.deserializeBinaryFromReader);
      msg.addNoises(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.proxy.freedom.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.proxy.freedom.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.proxy.freedom.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.proxy.freedom.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDomainStrategy();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDestinationOverride();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xray.proxy.freedom.DestinationOverride.serializeBinaryToWriter
    );
  }
  f = message.getUserLevel();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFragment();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.xray.proxy.freedom.Fragment.serializeBinaryToWriter
    );
  }
  f = message.getProxyProtocol();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getNoisesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.xray.proxy.freedom.Noise.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.xray.proxy.freedom.Config.DomainStrategy = {
  AS_IS: 0,
  USE_IP: 1,
  USE_IP4: 2,
  USE_IP6: 3,
  USE_IP46: 4,
  USE_IP64: 5,
  FORCE_IP: 6,
  FORCE_IP4: 7,
  FORCE_IP6: 8,
  FORCE_IP46: 9,
  FORCE_IP64: 10
};

/**
 * optional DomainStrategy domain_strategy = 1;
 * @return {!proto.xray.proxy.freedom.Config.DomainStrategy}
 */
proto.xray.proxy.freedom.Config.prototype.getDomainStrategy = function() {
  return /** @type {!proto.xray.proxy.freedom.Config.DomainStrategy} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.xray.proxy.freedom.Config.DomainStrategy} value
 * @return {!proto.xray.proxy.freedom.Config} returns this
 */
proto.xray.proxy.freedom.Config.prototype.setDomainStrategy = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DestinationOverride destination_override = 3;
 * @return {?proto.xray.proxy.freedom.DestinationOverride}
 */
proto.xray.proxy.freedom.Config.prototype.getDestinationOverride = function() {
  return /** @type{?proto.xray.proxy.freedom.DestinationOverride} */ (
    jspb.Message.getWrapperField(this, proto.xray.proxy.freedom.DestinationOverride, 3));
};


/**
 * @param {?proto.xray.proxy.freedom.DestinationOverride|undefined} value
 * @return {!proto.xray.proxy.freedom.Config} returns this
*/
proto.xray.proxy.freedom.Config.prototype.setDestinationOverride = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.proxy.freedom.Config} returns this
 */
proto.xray.proxy.freedom.Config.prototype.clearDestinationOverride = function() {
  return this.setDestinationOverride(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.proxy.freedom.Config.prototype.hasDestinationOverride = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 user_level = 4;
 * @return {number}
 */
proto.xray.proxy.freedom.Config.prototype.getUserLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.proxy.freedom.Config} returns this
 */
proto.xray.proxy.freedom.Config.prototype.setUserLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Fragment fragment = 5;
 * @return {?proto.xray.proxy.freedom.Fragment}
 */
proto.xray.proxy.freedom.Config.prototype.getFragment = function() {
  return /** @type{?proto.xray.proxy.freedom.Fragment} */ (
    jspb.Message.getWrapperField(this, proto.xray.proxy.freedom.Fragment, 5));
};


/**
 * @param {?proto.xray.proxy.freedom.Fragment|undefined} value
 * @return {!proto.xray.proxy.freedom.Config} returns this
*/
proto.xray.proxy.freedom.Config.prototype.setFragment = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.proxy.freedom.Config} returns this
 */
proto.xray.proxy.freedom.Config.prototype.clearFragment = function() {
  return this.setFragment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.proxy.freedom.Config.prototype.hasFragment = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 proxy_protocol = 6;
 * @return {number}
 */
proto.xray.proxy.freedom.Config.prototype.getProxyProtocol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.proxy.freedom.Config} returns this
 */
proto.xray.proxy.freedom.Config.prototype.setProxyProtocol = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated Noise noises = 7;
 * @return {!Array<!proto.xray.proxy.freedom.Noise>}
 */
proto.xray.proxy.freedom.Config.prototype.getNoisesList = function() {
  return /** @type{!Array<!proto.xray.proxy.freedom.Noise>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.proxy.freedom.Noise, 7));
};


/**
 * @param {!Array<!proto.xray.proxy.freedom.Noise>} value
 * @return {!proto.xray.proxy.freedom.Config} returns this
*/
proto.xray.proxy.freedom.Config.prototype.setNoisesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.xray.proxy.freedom.Noise=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.proxy.freedom.Noise}
 */
proto.xray.proxy.freedom.Config.prototype.addNoises = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.xray.proxy.freedom.Noise, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.proxy.freedom.Config} returns this
 */
proto.xray.proxy.freedom.Config.prototype.clearNoisesList = function() {
  return this.setNoisesList([]);
};


