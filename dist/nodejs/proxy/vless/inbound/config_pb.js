// source: proxy/vless/inbound/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var common_protocol_user_pb = require('../../../common/protocol/user_pb.js');
goog.object.extend(proto, common_protocol_user_pb);
goog.exportSymbol('proto.xray.proxy.vless.inbound.Config', null, global);
goog.exportSymbol('proto.xray.proxy.vless.inbound.Fallback', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.proxy.vless.inbound.Fallback = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.proxy.vless.inbound.Fallback, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.proxy.vless.inbound.Fallback.displayName = 'proto.xray.proxy.vless.inbound.Fallback';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.proxy.vless.inbound.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.proxy.vless.inbound.Config.repeatedFields_, null);
};
goog.inherits(proto.xray.proxy.vless.inbound.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.proxy.vless.inbound.Config.displayName = 'proto.xray.proxy.vless.inbound.Config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.proxy.vless.inbound.Fallback.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.proxy.vless.inbound.Fallback} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.proxy.vless.inbound.Fallback.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
alpn: jspb.Message.getFieldWithDefault(msg, 2, ""),
path: jspb.Message.getFieldWithDefault(msg, 3, ""),
type: jspb.Message.getFieldWithDefault(msg, 4, ""),
dest: jspb.Message.getFieldWithDefault(msg, 5, ""),
xver: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.proxy.vless.inbound.Fallback}
 */
proto.xray.proxy.vless.inbound.Fallback.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.proxy.vless.inbound.Fallback;
  return proto.xray.proxy.vless.inbound.Fallback.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.proxy.vless.inbound.Fallback} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.proxy.vless.inbound.Fallback}
 */
proto.xray.proxy.vless.inbound.Fallback.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlpn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setXver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.proxy.vless.inbound.Fallback.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.proxy.vless.inbound.Fallback} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.proxy.vless.inbound.Fallback.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAlpn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getXver();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.proxy.vless.inbound.Fallback} returns this
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string alpn = 2;
 * @return {string}
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.getAlpn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.proxy.vless.inbound.Fallback} returns this
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.setAlpn = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string path = 3;
 * @return {string}
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.proxy.vless.inbound.Fallback} returns this
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string type = 4;
 * @return {string}
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.proxy.vless.inbound.Fallback} returns this
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string dest = 5;
 * @return {string}
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.proxy.vless.inbound.Fallback} returns this
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.setDest = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 xver = 6;
 * @return {number}
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.getXver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.proxy.vless.inbound.Fallback} returns this
 */
proto.xray.proxy.vless.inbound.Fallback.prototype.setXver = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.proxy.vless.inbound.Config.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.proxy.vless.inbound.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.proxy.vless.inbound.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.proxy.vless.inbound.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.proxy.vless.inbound.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
clientsList: jspb.Message.toObjectList(msg.getClientsList(),
    common_protocol_user_pb.User.toObject, includeInstance),
decryption: jspb.Message.getFieldWithDefault(msg, 2, ""),
fallbacksList: jspb.Message.toObjectList(msg.getFallbacksList(),
    proto.xray.proxy.vless.inbound.Fallback.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.proxy.vless.inbound.Config}
 */
proto.xray.proxy.vless.inbound.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.proxy.vless.inbound.Config;
  return proto.xray.proxy.vless.inbound.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.proxy.vless.inbound.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.proxy.vless.inbound.Config}
 */
proto.xray.proxy.vless.inbound.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_protocol_user_pb.User;
      reader.readMessage(value,common_protocol_user_pb.User.deserializeBinaryFromReader);
      msg.addClients(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDecryption(value);
      break;
    case 3:
      var value = new proto.xray.proxy.vless.inbound.Fallback;
      reader.readMessage(value,proto.xray.proxy.vless.inbound.Fallback.deserializeBinaryFromReader);
      msg.addFallbacks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.proxy.vless.inbound.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.proxy.vless.inbound.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.proxy.vless.inbound.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.proxy.vless.inbound.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_protocol_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getDecryption();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFallbacksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xray.proxy.vless.inbound.Fallback.serializeBinaryToWriter
    );
  }
};


/**
 * repeated xray.common.protocol.User clients = 1;
 * @return {!Array<!proto.xray.common.protocol.User>}
 */
proto.xray.proxy.vless.inbound.Config.prototype.getClientsList = function() {
  return /** @type{!Array<!proto.xray.common.protocol.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_protocol_user_pb.User, 1));
};


/**
 * @param {!Array<!proto.xray.common.protocol.User>} value
 * @return {!proto.xray.proxy.vless.inbound.Config} returns this
*/
proto.xray.proxy.vless.inbound.Config.prototype.setClientsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xray.common.protocol.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.common.protocol.User}
 */
proto.xray.proxy.vless.inbound.Config.prototype.addClients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xray.common.protocol.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.proxy.vless.inbound.Config} returns this
 */
proto.xray.proxy.vless.inbound.Config.prototype.clearClientsList = function() {
  return this.setClientsList([]);
};


/**
 * optional string decryption = 2;
 * @return {string}
 */
proto.xray.proxy.vless.inbound.Config.prototype.getDecryption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.proxy.vless.inbound.Config} returns this
 */
proto.xray.proxy.vless.inbound.Config.prototype.setDecryption = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Fallback fallbacks = 3;
 * @return {!Array<!proto.xray.proxy.vless.inbound.Fallback>}
 */
proto.xray.proxy.vless.inbound.Config.prototype.getFallbacksList = function() {
  return /** @type{!Array<!proto.xray.proxy.vless.inbound.Fallback>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.proxy.vless.inbound.Fallback, 3));
};


/**
 * @param {!Array<!proto.xray.proxy.vless.inbound.Fallback>} value
 * @return {!proto.xray.proxy.vless.inbound.Config} returns this
*/
proto.xray.proxy.vless.inbound.Config.prototype.setFallbacksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xray.proxy.vless.inbound.Fallback=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.proxy.vless.inbound.Fallback}
 */
proto.xray.proxy.vless.inbound.Config.prototype.addFallbacks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xray.proxy.vless.inbound.Fallback, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.proxy.vless.inbound.Config} returns this
 */
proto.xray.proxy.vless.inbound.Config.prototype.clearFallbacksList = function() {
  return this.setFallbacksList([]);
};


goog.object.extend(exports, proto.xray.proxy.vless.inbound);
