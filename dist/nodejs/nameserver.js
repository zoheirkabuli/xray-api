// source: app/dns/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.xray.app.dns.NameServer');
goog.provide('proto.xray.app.dns.NameServer.OriginalRule');
goog.provide('proto.xray.app.dns.NameServer.PriorityDomain');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.xray.app.router.GeoIP');
goog.require('proto.xray.common.net.Endpoint');

goog.forwardDeclare('proto.xray.app.dns.DomainMatchingType');
goog.forwardDeclare('proto.xray.app.dns.QueryStrategy');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.dns.NameServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.dns.NameServer.repeatedFields_, null);
};
goog.inherits(proto.xray.app.dns.NameServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.dns.NameServer.displayName = 'proto.xray.app.dns.NameServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.dns.NameServer.PriorityDomain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.dns.NameServer.PriorityDomain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.dns.NameServer.PriorityDomain.displayName = 'proto.xray.app.dns.NameServer.PriorityDomain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.dns.NameServer.OriginalRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.dns.NameServer.OriginalRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.dns.NameServer.OriginalRule.displayName = 'proto.xray.app.dns.NameServer.OriginalRule';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.dns.NameServer.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.dns.NameServer.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.dns.NameServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.dns.NameServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.dns.NameServer.toObject = function(includeInstance, msg) {
  var f, obj = {
address: (f = msg.getAddress()) && proto.xray.common.net.Endpoint.toObject(includeInstance, f),
clientIp: msg.getClientIp_asB64(),
skipfallback: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
prioritizedDomainList: jspb.Message.toObjectList(msg.getPrioritizedDomainList(),
    proto.xray.app.dns.NameServer.PriorityDomain.toObject, includeInstance),
geoipList: jspb.Message.toObjectList(msg.getGeoipList(),
    proto.xray.app.router.GeoIP.toObject, includeInstance),
originalRulesList: jspb.Message.toObjectList(msg.getOriginalRulesList(),
    proto.xray.app.dns.NameServer.OriginalRule.toObject, includeInstance),
queryStrategy: jspb.Message.getFieldWithDefault(msg, 7, 0),
allowunexpectedips: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
tag: jspb.Message.getFieldWithDefault(msg, 9, ""),
timeoutms: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.dns.NameServer}
 */
proto.xray.app.dns.NameServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.dns.NameServer;
  return proto.xray.app.dns.NameServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.dns.NameServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.dns.NameServer}
 */
proto.xray.app.dns.NameServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xray.common.net.Endpoint;
      reader.readMessage(value,proto.xray.common.net.Endpoint.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientIp(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkipfallback(value);
      break;
    case 2:
      var value = new proto.xray.app.dns.NameServer.PriorityDomain;
      reader.readMessage(value,proto.xray.app.dns.NameServer.PriorityDomain.deserializeBinaryFromReader);
      msg.addPrioritizedDomain(value);
      break;
    case 3:
      var value = new proto.xray.app.router.GeoIP;
      reader.readMessage(value,proto.xray.app.router.GeoIP.deserializeBinaryFromReader);
      msg.addGeoip(value);
      break;
    case 4:
      var value = new proto.xray.app.dns.NameServer.OriginalRule;
      reader.readMessage(value,proto.xray.app.dns.NameServer.OriginalRule.deserializeBinaryFromReader);
      msg.addOriginalRules(value);
      break;
    case 7:
      var value = /** @type {!proto.xray.app.dns.QueryStrategy} */ (reader.readEnum());
      msg.setQueryStrategy(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowunexpectedips(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeoutms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.dns.NameServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.dns.NameServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.dns.NameServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.dns.NameServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xray.common.net.Endpoint.serializeBinaryToWriter
    );
  }
  f = message.getClientIp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSkipfallback();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getPrioritizedDomainList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xray.app.dns.NameServer.PriorityDomain.serializeBinaryToWriter
    );
  }
  f = message.getGeoipList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xray.app.router.GeoIP.serializeBinaryToWriter
    );
  }
  f = message.getOriginalRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.xray.app.dns.NameServer.OriginalRule.serializeBinaryToWriter
    );
  }
  f = message.getQueryStrategy();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getAllowunexpectedips();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTimeoutms();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.dns.NameServer.PriorityDomain.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.dns.NameServer.PriorityDomain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.dns.NameServer.PriorityDomain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.dns.NameServer.PriorityDomain.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
domain: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.dns.NameServer.PriorityDomain}
 */
proto.xray.app.dns.NameServer.PriorityDomain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.dns.NameServer.PriorityDomain;
  return proto.xray.app.dns.NameServer.PriorityDomain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.dns.NameServer.PriorityDomain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.dns.NameServer.PriorityDomain}
 */
proto.xray.app.dns.NameServer.PriorityDomain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xray.app.dns.DomainMatchingType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.dns.NameServer.PriorityDomain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.dns.NameServer.PriorityDomain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.dns.NameServer.PriorityDomain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.dns.NameServer.PriorityDomain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional DomainMatchingType type = 1;
 * @return {!proto.xray.app.dns.DomainMatchingType}
 */
proto.xray.app.dns.NameServer.PriorityDomain.prototype.getType = function() {
  return /** @type {!proto.xray.app.dns.DomainMatchingType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.xray.app.dns.DomainMatchingType} value
 * @return {!proto.xray.app.dns.NameServer.PriorityDomain} returns this
 */
proto.xray.app.dns.NameServer.PriorityDomain.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string domain = 2;
 * @return {string}
 */
proto.xray.app.dns.NameServer.PriorityDomain.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.dns.NameServer.PriorityDomain} returns this
 */
proto.xray.app.dns.NameServer.PriorityDomain.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.dns.NameServer.OriginalRule.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.dns.NameServer.OriginalRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.dns.NameServer.OriginalRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.dns.NameServer.OriginalRule.toObject = function(includeInstance, msg) {
  var f, obj = {
rule: jspb.Message.getFieldWithDefault(msg, 1, ""),
size: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.dns.NameServer.OriginalRule}
 */
proto.xray.app.dns.NameServer.OriginalRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.dns.NameServer.OriginalRule;
  return proto.xray.app.dns.NameServer.OriginalRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.dns.NameServer.OriginalRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.dns.NameServer.OriginalRule}
 */
proto.xray.app.dns.NameServer.OriginalRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRule(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.dns.NameServer.OriginalRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.dns.NameServer.OriginalRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.dns.NameServer.OriginalRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.dns.NameServer.OriginalRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRule();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string rule = 1;
 * @return {string}
 */
proto.xray.app.dns.NameServer.OriginalRule.prototype.getRule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.dns.NameServer.OriginalRule} returns this
 */
proto.xray.app.dns.NameServer.OriginalRule.prototype.setRule = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 size = 2;
 * @return {number}
 */
proto.xray.app.dns.NameServer.OriginalRule.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.app.dns.NameServer.OriginalRule} returns this
 */
proto.xray.app.dns.NameServer.OriginalRule.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional xray.common.net.Endpoint address = 1;
 * @return {?proto.xray.common.net.Endpoint}
 */
proto.xray.app.dns.NameServer.prototype.getAddress = function() {
  return /** @type{?proto.xray.common.net.Endpoint} */ (
    jspb.Message.getWrapperField(this, proto.xray.common.net.Endpoint, 1));
};


/**
 * @param {?proto.xray.common.net.Endpoint|undefined} value
 * @return {!proto.xray.app.dns.NameServer} returns this
*/
proto.xray.app.dns.NameServer.prototype.setAddress = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.dns.NameServer} returns this
 */
proto.xray.app.dns.NameServer.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.dns.NameServer.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes client_ip = 5;
 * @return {string}
 */
proto.xray.app.dns.NameServer.prototype.getClientIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes client_ip = 5;
 * This is a type-conversion wrapper around `getClientIp()`
 * @return {string}
 */
proto.xray.app.dns.NameServer.prototype.getClientIp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientIp()));
};


/**
 * optional bytes client_ip = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientIp()`
 * @return {!Uint8Array}
 */
proto.xray.app.dns.NameServer.prototype.getClientIp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientIp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.app.dns.NameServer} returns this
 */
proto.xray.app.dns.NameServer.prototype.setClientIp = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bool skipFallback = 6;
 * @return {boolean}
 */
proto.xray.app.dns.NameServer.prototype.getSkipfallback = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.dns.NameServer} returns this
 */
proto.xray.app.dns.NameServer.prototype.setSkipfallback = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated PriorityDomain prioritized_domain = 2;
 * @return {!Array<!proto.xray.app.dns.NameServer.PriorityDomain>}
 */
proto.xray.app.dns.NameServer.prototype.getPrioritizedDomainList = function() {
  return /** @type{!Array<!proto.xray.app.dns.NameServer.PriorityDomain>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.dns.NameServer.PriorityDomain, 2));
};


/**
 * @param {!Array<!proto.xray.app.dns.NameServer.PriorityDomain>} value
 * @return {!proto.xray.app.dns.NameServer} returns this
*/
proto.xray.app.dns.NameServer.prototype.setPrioritizedDomainList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xray.app.dns.NameServer.PriorityDomain=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.dns.NameServer.PriorityDomain}
 */
proto.xray.app.dns.NameServer.prototype.addPrioritizedDomain = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xray.app.dns.NameServer.PriorityDomain, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.dns.NameServer} returns this
 */
proto.xray.app.dns.NameServer.prototype.clearPrioritizedDomainList = function() {
  return this.setPrioritizedDomainList([]);
};


/**
 * repeated xray.app.router.GeoIP geoip = 3;
 * @return {!Array<!proto.xray.app.router.GeoIP>}
 */
proto.xray.app.dns.NameServer.prototype.getGeoipList = function() {
  return /** @type{!Array<!proto.xray.app.router.GeoIP>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.GeoIP, 3));
};


/**
 * @param {!Array<!proto.xray.app.router.GeoIP>} value
 * @return {!proto.xray.app.dns.NameServer} returns this
*/
proto.xray.app.dns.NameServer.prototype.setGeoipList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xray.app.router.GeoIP=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.GeoIP}
 */
proto.xray.app.dns.NameServer.prototype.addGeoip = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xray.app.router.GeoIP, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.dns.NameServer} returns this
 */
proto.xray.app.dns.NameServer.prototype.clearGeoipList = function() {
  return this.setGeoipList([]);
};


/**
 * repeated OriginalRule original_rules = 4;
 * @return {!Array<!proto.xray.app.dns.NameServer.OriginalRule>}
 */
proto.xray.app.dns.NameServer.prototype.getOriginalRulesList = function() {
  return /** @type{!Array<!proto.xray.app.dns.NameServer.OriginalRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.dns.NameServer.OriginalRule, 4));
};


/**
 * @param {!Array<!proto.xray.app.dns.NameServer.OriginalRule>} value
 * @return {!proto.xray.app.dns.NameServer} returns this
*/
proto.xray.app.dns.NameServer.prototype.setOriginalRulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xray.app.dns.NameServer.OriginalRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.dns.NameServer.OriginalRule}
 */
proto.xray.app.dns.NameServer.prototype.addOriginalRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xray.app.dns.NameServer.OriginalRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.dns.NameServer} returns this
 */
proto.xray.app.dns.NameServer.prototype.clearOriginalRulesList = function() {
  return this.setOriginalRulesList([]);
};


/**
 * optional QueryStrategy query_strategy = 7;
 * @return {!proto.xray.app.dns.QueryStrategy}
 */
proto.xray.app.dns.NameServer.prototype.getQueryStrategy = function() {
  return /** @type {!proto.xray.app.dns.QueryStrategy} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.xray.app.dns.QueryStrategy} value
 * @return {!proto.xray.app.dns.NameServer} returns this
 */
proto.xray.app.dns.NameServer.prototype.setQueryStrategy = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional bool allowUnexpectedIPs = 8;
 * @return {boolean}
 */
proto.xray.app.dns.NameServer.prototype.getAllowunexpectedips = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.dns.NameServer} returns this
 */
proto.xray.app.dns.NameServer.prototype.setAllowunexpectedips = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string tag = 9;
 * @return {string}
 */
proto.xray.app.dns.NameServer.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.dns.NameServer} returns this
 */
proto.xray.app.dns.NameServer.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint64 timeoutMs = 10;
 * @return {number}
 */
proto.xray.app.dns.NameServer.prototype.getTimeoutms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.app.dns.NameServer} returns this
 */
proto.xray.app.dns.NameServer.prototype.setTimeoutms = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


