// source: app/policy/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.xray.app.policy.Config', null, global);
goog.exportSymbol('proto.xray.app.policy.Policy', null, global);
goog.exportSymbol('proto.xray.app.policy.Policy.Buffer', null, global);
goog.exportSymbol('proto.xray.app.policy.Policy.Stats', null, global);
goog.exportSymbol('proto.xray.app.policy.Policy.Timeout', null, global);
goog.exportSymbol('proto.xray.app.policy.Second', null, global);
goog.exportSymbol('proto.xray.app.policy.SystemPolicy', null, global);
goog.exportSymbol('proto.xray.app.policy.SystemPolicy.Stats', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.policy.Second = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.policy.Second, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.policy.Second.displayName = 'proto.xray.app.policy.Second';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.policy.Policy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.policy.Policy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.policy.Policy.displayName = 'proto.xray.app.policy.Policy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.policy.Policy.Timeout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.policy.Policy.Timeout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.policy.Policy.Timeout.displayName = 'proto.xray.app.policy.Policy.Timeout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.policy.Policy.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.policy.Policy.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.policy.Policy.Stats.displayName = 'proto.xray.app.policy.Policy.Stats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.policy.Policy.Buffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.policy.Policy.Buffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.policy.Policy.Buffer.displayName = 'proto.xray.app.policy.Policy.Buffer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.policy.SystemPolicy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.policy.SystemPolicy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.policy.SystemPolicy.displayName = 'proto.xray.app.policy.SystemPolicy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.policy.SystemPolicy.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.policy.SystemPolicy.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.policy.SystemPolicy.Stats.displayName = 'proto.xray.app.policy.SystemPolicy.Stats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.policy.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.policy.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.policy.Config.displayName = 'proto.xray.app.policy.Config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.policy.Second.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.policy.Second.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.policy.Second} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Second.toObject = function(includeInstance, msg) {
  var f, obj = {
value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.policy.Second}
 */
proto.xray.app.policy.Second.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.policy.Second;
  return proto.xray.app.policy.Second.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.policy.Second} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.policy.Second}
 */
proto.xray.app.policy.Second.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.policy.Second.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.policy.Second.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.policy.Second} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Second.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 value = 1;
 * @return {number}
 */
proto.xray.app.policy.Second.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.app.policy.Second} returns this
 */
proto.xray.app.policy.Second.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.policy.Policy.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.policy.Policy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.policy.Policy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Policy.toObject = function(includeInstance, msg) {
  var f, obj = {
timeout: (f = msg.getTimeout()) && proto.xray.app.policy.Policy.Timeout.toObject(includeInstance, f),
stats: (f = msg.getStats()) && proto.xray.app.policy.Policy.Stats.toObject(includeInstance, f),
buffer: (f = msg.getBuffer()) && proto.xray.app.policy.Policy.Buffer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.policy.Policy}
 */
proto.xray.app.policy.Policy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.policy.Policy;
  return proto.xray.app.policy.Policy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.policy.Policy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.policy.Policy}
 */
proto.xray.app.policy.Policy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xray.app.policy.Policy.Timeout;
      reader.readMessage(value,proto.xray.app.policy.Policy.Timeout.deserializeBinaryFromReader);
      msg.setTimeout(value);
      break;
    case 2:
      var value = new proto.xray.app.policy.Policy.Stats;
      reader.readMessage(value,proto.xray.app.policy.Policy.Stats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    case 3:
      var value = new proto.xray.app.policy.Policy.Buffer;
      reader.readMessage(value,proto.xray.app.policy.Policy.Buffer.deserializeBinaryFromReader);
      msg.setBuffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.policy.Policy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.policy.Policy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.policy.Policy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Policy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeout();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xray.app.policy.Policy.Timeout.serializeBinaryToWriter
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xray.app.policy.Policy.Stats.serializeBinaryToWriter
    );
  }
  f = message.getBuffer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xray.app.policy.Policy.Buffer.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.policy.Policy.Timeout.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.policy.Policy.Timeout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.policy.Policy.Timeout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Policy.Timeout.toObject = function(includeInstance, msg) {
  var f, obj = {
handshake: (f = msg.getHandshake()) && proto.xray.app.policy.Second.toObject(includeInstance, f),
connectionIdle: (f = msg.getConnectionIdle()) && proto.xray.app.policy.Second.toObject(includeInstance, f),
uplinkOnly: (f = msg.getUplinkOnly()) && proto.xray.app.policy.Second.toObject(includeInstance, f),
downlinkOnly: (f = msg.getDownlinkOnly()) && proto.xray.app.policy.Second.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.policy.Policy.Timeout}
 */
proto.xray.app.policy.Policy.Timeout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.policy.Policy.Timeout;
  return proto.xray.app.policy.Policy.Timeout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.policy.Policy.Timeout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.policy.Policy.Timeout}
 */
proto.xray.app.policy.Policy.Timeout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xray.app.policy.Second;
      reader.readMessage(value,proto.xray.app.policy.Second.deserializeBinaryFromReader);
      msg.setHandshake(value);
      break;
    case 2:
      var value = new proto.xray.app.policy.Second;
      reader.readMessage(value,proto.xray.app.policy.Second.deserializeBinaryFromReader);
      msg.setConnectionIdle(value);
      break;
    case 3:
      var value = new proto.xray.app.policy.Second;
      reader.readMessage(value,proto.xray.app.policy.Second.deserializeBinaryFromReader);
      msg.setUplinkOnly(value);
      break;
    case 4:
      var value = new proto.xray.app.policy.Second;
      reader.readMessage(value,proto.xray.app.policy.Second.deserializeBinaryFromReader);
      msg.setDownlinkOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.policy.Policy.Timeout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.policy.Policy.Timeout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.policy.Policy.Timeout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Policy.Timeout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandshake();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xray.app.policy.Second.serializeBinaryToWriter
    );
  }
  f = message.getConnectionIdle();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xray.app.policy.Second.serializeBinaryToWriter
    );
  }
  f = message.getUplinkOnly();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xray.app.policy.Second.serializeBinaryToWriter
    );
  }
  f = message.getDownlinkOnly();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.xray.app.policy.Second.serializeBinaryToWriter
    );
  }
};


/**
 * optional Second handshake = 1;
 * @return {?proto.xray.app.policy.Second}
 */
proto.xray.app.policy.Policy.Timeout.prototype.getHandshake = function() {
  return /** @type{?proto.xray.app.policy.Second} */ (
    jspb.Message.getWrapperField(this, proto.xray.app.policy.Second, 1));
};


/**
 * @param {?proto.xray.app.policy.Second|undefined} value
 * @return {!proto.xray.app.policy.Policy.Timeout} returns this
*/
proto.xray.app.policy.Policy.Timeout.prototype.setHandshake = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.policy.Policy.Timeout} returns this
 */
proto.xray.app.policy.Policy.Timeout.prototype.clearHandshake = function() {
  return this.setHandshake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.policy.Policy.Timeout.prototype.hasHandshake = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Second connection_idle = 2;
 * @return {?proto.xray.app.policy.Second}
 */
proto.xray.app.policy.Policy.Timeout.prototype.getConnectionIdle = function() {
  return /** @type{?proto.xray.app.policy.Second} */ (
    jspb.Message.getWrapperField(this, proto.xray.app.policy.Second, 2));
};


/**
 * @param {?proto.xray.app.policy.Second|undefined} value
 * @return {!proto.xray.app.policy.Policy.Timeout} returns this
*/
proto.xray.app.policy.Policy.Timeout.prototype.setConnectionIdle = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.policy.Policy.Timeout} returns this
 */
proto.xray.app.policy.Policy.Timeout.prototype.clearConnectionIdle = function() {
  return this.setConnectionIdle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.policy.Policy.Timeout.prototype.hasConnectionIdle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Second uplink_only = 3;
 * @return {?proto.xray.app.policy.Second}
 */
proto.xray.app.policy.Policy.Timeout.prototype.getUplinkOnly = function() {
  return /** @type{?proto.xray.app.policy.Second} */ (
    jspb.Message.getWrapperField(this, proto.xray.app.policy.Second, 3));
};


/**
 * @param {?proto.xray.app.policy.Second|undefined} value
 * @return {!proto.xray.app.policy.Policy.Timeout} returns this
*/
proto.xray.app.policy.Policy.Timeout.prototype.setUplinkOnly = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.policy.Policy.Timeout} returns this
 */
proto.xray.app.policy.Policy.Timeout.prototype.clearUplinkOnly = function() {
  return this.setUplinkOnly(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.policy.Policy.Timeout.prototype.hasUplinkOnly = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Second downlink_only = 4;
 * @return {?proto.xray.app.policy.Second}
 */
proto.xray.app.policy.Policy.Timeout.prototype.getDownlinkOnly = function() {
  return /** @type{?proto.xray.app.policy.Second} */ (
    jspb.Message.getWrapperField(this, proto.xray.app.policy.Second, 4));
};


/**
 * @param {?proto.xray.app.policy.Second|undefined} value
 * @return {!proto.xray.app.policy.Policy.Timeout} returns this
*/
proto.xray.app.policy.Policy.Timeout.prototype.setDownlinkOnly = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.policy.Policy.Timeout} returns this
 */
proto.xray.app.policy.Policy.Timeout.prototype.clearDownlinkOnly = function() {
  return this.setDownlinkOnly(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.policy.Policy.Timeout.prototype.hasDownlinkOnly = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.policy.Policy.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.policy.Policy.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.policy.Policy.Stats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Policy.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
userUplink: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
userDownlink: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
userOnline: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.policy.Policy.Stats}
 */
proto.xray.app.policy.Policy.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.policy.Policy.Stats;
  return proto.xray.app.policy.Policy.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.policy.Policy.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.policy.Policy.Stats}
 */
proto.xray.app.policy.Policy.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserUplink(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserDownlink(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserOnline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.policy.Policy.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.policy.Policy.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.policy.Policy.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Policy.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserUplink();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUserDownlink();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getUserOnline();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool user_uplink = 1;
 * @return {boolean}
 */
proto.xray.app.policy.Policy.Stats.prototype.getUserUplink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.policy.Policy.Stats} returns this
 */
proto.xray.app.policy.Policy.Stats.prototype.setUserUplink = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool user_downlink = 2;
 * @return {boolean}
 */
proto.xray.app.policy.Policy.Stats.prototype.getUserDownlink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.policy.Policy.Stats} returns this
 */
proto.xray.app.policy.Policy.Stats.prototype.setUserDownlink = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool user_online = 3;
 * @return {boolean}
 */
proto.xray.app.policy.Policy.Stats.prototype.getUserOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.policy.Policy.Stats} returns this
 */
proto.xray.app.policy.Policy.Stats.prototype.setUserOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.policy.Policy.Buffer.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.policy.Policy.Buffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.policy.Policy.Buffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Policy.Buffer.toObject = function(includeInstance, msg) {
  var f, obj = {
connection: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.policy.Policy.Buffer}
 */
proto.xray.app.policy.Policy.Buffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.policy.Policy.Buffer;
  return proto.xray.app.policy.Policy.Buffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.policy.Policy.Buffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.policy.Policy.Buffer}
 */
proto.xray.app.policy.Policy.Buffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.policy.Policy.Buffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.policy.Policy.Buffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.policy.Policy.Buffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Policy.Buffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnection();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 connection = 1;
 * @return {number}
 */
proto.xray.app.policy.Policy.Buffer.prototype.getConnection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.app.policy.Policy.Buffer} returns this
 */
proto.xray.app.policy.Policy.Buffer.prototype.setConnection = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Timeout timeout = 1;
 * @return {?proto.xray.app.policy.Policy.Timeout}
 */
proto.xray.app.policy.Policy.prototype.getTimeout = function() {
  return /** @type{?proto.xray.app.policy.Policy.Timeout} */ (
    jspb.Message.getWrapperField(this, proto.xray.app.policy.Policy.Timeout, 1));
};


/**
 * @param {?proto.xray.app.policy.Policy.Timeout|undefined} value
 * @return {!proto.xray.app.policy.Policy} returns this
*/
proto.xray.app.policy.Policy.prototype.setTimeout = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.policy.Policy} returns this
 */
proto.xray.app.policy.Policy.prototype.clearTimeout = function() {
  return this.setTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.policy.Policy.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Stats stats = 2;
 * @return {?proto.xray.app.policy.Policy.Stats}
 */
proto.xray.app.policy.Policy.prototype.getStats = function() {
  return /** @type{?proto.xray.app.policy.Policy.Stats} */ (
    jspb.Message.getWrapperField(this, proto.xray.app.policy.Policy.Stats, 2));
};


/**
 * @param {?proto.xray.app.policy.Policy.Stats|undefined} value
 * @return {!proto.xray.app.policy.Policy} returns this
*/
proto.xray.app.policy.Policy.prototype.setStats = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.policy.Policy} returns this
 */
proto.xray.app.policy.Policy.prototype.clearStats = function() {
  return this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.policy.Policy.prototype.hasStats = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Buffer buffer = 3;
 * @return {?proto.xray.app.policy.Policy.Buffer}
 */
proto.xray.app.policy.Policy.prototype.getBuffer = function() {
  return /** @type{?proto.xray.app.policy.Policy.Buffer} */ (
    jspb.Message.getWrapperField(this, proto.xray.app.policy.Policy.Buffer, 3));
};


/**
 * @param {?proto.xray.app.policy.Policy.Buffer|undefined} value
 * @return {!proto.xray.app.policy.Policy} returns this
*/
proto.xray.app.policy.Policy.prototype.setBuffer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.policy.Policy} returns this
 */
proto.xray.app.policy.Policy.prototype.clearBuffer = function() {
  return this.setBuffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.policy.Policy.prototype.hasBuffer = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.policy.SystemPolicy.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.policy.SystemPolicy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.policy.SystemPolicy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.SystemPolicy.toObject = function(includeInstance, msg) {
  var f, obj = {
stats: (f = msg.getStats()) && proto.xray.app.policy.SystemPolicy.Stats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.policy.SystemPolicy}
 */
proto.xray.app.policy.SystemPolicy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.policy.SystemPolicy;
  return proto.xray.app.policy.SystemPolicy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.policy.SystemPolicy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.policy.SystemPolicy}
 */
proto.xray.app.policy.SystemPolicy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xray.app.policy.SystemPolicy.Stats;
      reader.readMessage(value,proto.xray.app.policy.SystemPolicy.Stats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.policy.SystemPolicy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.policy.SystemPolicy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.policy.SystemPolicy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.SystemPolicy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xray.app.policy.SystemPolicy.Stats.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.policy.SystemPolicy.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.policy.SystemPolicy.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.policy.SystemPolicy.Stats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.SystemPolicy.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
inboundUplink: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
inboundDownlink: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
outboundUplink: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
outboundDownlink: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.policy.SystemPolicy.Stats}
 */
proto.xray.app.policy.SystemPolicy.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.policy.SystemPolicy.Stats;
  return proto.xray.app.policy.SystemPolicy.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.policy.SystemPolicy.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.policy.SystemPolicy.Stats}
 */
proto.xray.app.policy.SystemPolicy.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInboundUplink(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInboundDownlink(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutboundUplink(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutboundDownlink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.policy.SystemPolicy.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.policy.SystemPolicy.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.policy.SystemPolicy.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.SystemPolicy.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInboundUplink();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInboundDownlink();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getOutboundUplink();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOutboundDownlink();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool inbound_uplink = 1;
 * @return {boolean}
 */
proto.xray.app.policy.SystemPolicy.Stats.prototype.getInboundUplink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.policy.SystemPolicy.Stats} returns this
 */
proto.xray.app.policy.SystemPolicy.Stats.prototype.setInboundUplink = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool inbound_downlink = 2;
 * @return {boolean}
 */
proto.xray.app.policy.SystemPolicy.Stats.prototype.getInboundDownlink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.policy.SystemPolicy.Stats} returns this
 */
proto.xray.app.policy.SystemPolicy.Stats.prototype.setInboundDownlink = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool outbound_uplink = 3;
 * @return {boolean}
 */
proto.xray.app.policy.SystemPolicy.Stats.prototype.getOutboundUplink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.policy.SystemPolicy.Stats} returns this
 */
proto.xray.app.policy.SystemPolicy.Stats.prototype.setOutboundUplink = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool outbound_downlink = 4;
 * @return {boolean}
 */
proto.xray.app.policy.SystemPolicy.Stats.prototype.getOutboundDownlink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.policy.SystemPolicy.Stats} returns this
 */
proto.xray.app.policy.SystemPolicy.Stats.prototype.setOutboundDownlink = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Stats stats = 1;
 * @return {?proto.xray.app.policy.SystemPolicy.Stats}
 */
proto.xray.app.policy.SystemPolicy.prototype.getStats = function() {
  return /** @type{?proto.xray.app.policy.SystemPolicy.Stats} */ (
    jspb.Message.getWrapperField(this, proto.xray.app.policy.SystemPolicy.Stats, 1));
};


/**
 * @param {?proto.xray.app.policy.SystemPolicy.Stats|undefined} value
 * @return {!proto.xray.app.policy.SystemPolicy} returns this
*/
proto.xray.app.policy.SystemPolicy.prototype.setStats = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.policy.SystemPolicy} returns this
 */
proto.xray.app.policy.SystemPolicy.prototype.clearStats = function() {
  return this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.policy.SystemPolicy.prototype.hasStats = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.policy.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.policy.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.policy.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
levelMap: (f = msg.getLevelMap()) ? f.toObject(includeInstance, proto.xray.app.policy.Policy.toObject) : [],
system: (f = msg.getSystem()) && proto.xray.app.policy.SystemPolicy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.policy.Config}
 */
proto.xray.app.policy.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.policy.Config;
  return proto.xray.app.policy.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.policy.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.policy.Config}
 */
proto.xray.app.policy.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getLevelMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.xray.app.policy.Policy.deserializeBinaryFromReader, 0, new proto.xray.app.policy.Policy());
         });
      break;
    case 2:
      var value = new proto.xray.app.policy.SystemPolicy;
      reader.readMessage(value,proto.xray.app.policy.SystemPolicy.deserializeBinaryFromReader);
      msg.setSystem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.policy.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.policy.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.policy.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.policy.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevelMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.xray.app.policy.Policy.serializeBinaryToWriter);
  }
  f = message.getSystem();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xray.app.policy.SystemPolicy.serializeBinaryToWriter
    );
  }
};


/**
 * map<uint32, Policy> level = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.xray.app.policy.Policy>}
 */
proto.xray.app.policy.Config.prototype.getLevelMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.xray.app.policy.Policy>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.xray.app.policy.Policy));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.xray.app.policy.Config} returns this
 */
proto.xray.app.policy.Config.prototype.clearLevelMap = function() {
  this.getLevelMap().clear();
  return this;
};


/**
 * optional SystemPolicy system = 2;
 * @return {?proto.xray.app.policy.SystemPolicy}
 */
proto.xray.app.policy.Config.prototype.getSystem = function() {
  return /** @type{?proto.xray.app.policy.SystemPolicy} */ (
    jspb.Message.getWrapperField(this, proto.xray.app.policy.SystemPolicy, 2));
};


/**
 * @param {?proto.xray.app.policy.SystemPolicy|undefined} value
 * @return {!proto.xray.app.policy.Config} returns this
*/
proto.xray.app.policy.Config.prototype.setSystem = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.policy.Config} returns this
 */
proto.xray.app.policy.Config.prototype.clearSystem = function() {
  return this.setSystem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.policy.Config.prototype.hasSystem = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.xray.app.policy);
