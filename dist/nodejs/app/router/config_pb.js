// source: app/router/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var common_serial_typed_message_pb = require('../../common/serial/typed_message_pb.js');
goog.object.extend(proto, common_serial_typed_message_pb);
var common_net_port_pb = require('../../common/net/port_pb.js');
goog.object.extend(proto, common_net_port_pb);
var common_net_network_pb = require('../../common/net/network_pb.js');
goog.object.extend(proto, common_net_network_pb);
goog.exportSymbol('proto.xray.app.router.BalancingRule', null, global);
goog.exportSymbol('proto.xray.app.router.CIDR', null, global);
goog.exportSymbol('proto.xray.app.router.Config', null, global);
goog.exportSymbol('proto.xray.app.router.Config.DomainStrategy', null, global);
goog.exportSymbol('proto.xray.app.router.Domain', null, global);
goog.exportSymbol('proto.xray.app.router.Domain.Attribute', null, global);
goog.exportSymbol('proto.xray.app.router.Domain.Attribute.TypedValueCase', null, global);
goog.exportSymbol('proto.xray.app.router.Domain.Type', null, global);
goog.exportSymbol('proto.xray.app.router.GeoIP', null, global);
goog.exportSymbol('proto.xray.app.router.GeoIPList', null, global);
goog.exportSymbol('proto.xray.app.router.GeoSite', null, global);
goog.exportSymbol('proto.xray.app.router.GeoSiteList', null, global);
goog.exportSymbol('proto.xray.app.router.RoutingRule', null, global);
goog.exportSymbol('proto.xray.app.router.RoutingRule.TargetTagCase', null, global);
goog.exportSymbol('proto.xray.app.router.StrategyLeastLoadConfig', null, global);
goog.exportSymbol('proto.xray.app.router.StrategyWeight', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.Domain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.router.Domain.repeatedFields_, null);
};
goog.inherits(proto.xray.app.router.Domain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.Domain.displayName = 'proto.xray.app.router.Domain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.Domain.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.xray.app.router.Domain.Attribute.oneofGroups_);
};
goog.inherits(proto.xray.app.router.Domain.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.Domain.Attribute.displayName = 'proto.xray.app.router.Domain.Attribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.CIDR = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.router.CIDR, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.CIDR.displayName = 'proto.xray.app.router.CIDR';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.GeoIP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.router.GeoIP.repeatedFields_, null);
};
goog.inherits(proto.xray.app.router.GeoIP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.GeoIP.displayName = 'proto.xray.app.router.GeoIP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.GeoIPList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.router.GeoIPList.repeatedFields_, null);
};
goog.inherits(proto.xray.app.router.GeoIPList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.GeoIPList.displayName = 'proto.xray.app.router.GeoIPList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.GeoSite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.router.GeoSite.repeatedFields_, null);
};
goog.inherits(proto.xray.app.router.GeoSite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.GeoSite.displayName = 'proto.xray.app.router.GeoSite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.GeoSiteList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.router.GeoSiteList.repeatedFields_, null);
};
goog.inherits(proto.xray.app.router.GeoSiteList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.GeoSiteList.displayName = 'proto.xray.app.router.GeoSiteList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.RoutingRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.router.RoutingRule.repeatedFields_, proto.xray.app.router.RoutingRule.oneofGroups_);
};
goog.inherits(proto.xray.app.router.RoutingRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.RoutingRule.displayName = 'proto.xray.app.router.RoutingRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.BalancingRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.router.BalancingRule.repeatedFields_, null);
};
goog.inherits(proto.xray.app.router.BalancingRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.BalancingRule.displayName = 'proto.xray.app.router.BalancingRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.StrategyWeight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.router.StrategyWeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.StrategyWeight.displayName = 'proto.xray.app.router.StrategyWeight';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.StrategyLeastLoadConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.router.StrategyLeastLoadConfig.repeatedFields_, null);
};
goog.inherits(proto.xray.app.router.StrategyLeastLoadConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.StrategyLeastLoadConfig.displayName = 'proto.xray.app.router.StrategyLeastLoadConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.router.Config.repeatedFields_, null);
};
goog.inherits(proto.xray.app.router.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.Config.displayName = 'proto.xray.app.router.Config';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.router.Domain.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.Domain.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.Domain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.Domain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.Domain.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
value: jspb.Message.getFieldWithDefault(msg, 2, ""),
attributeList: jspb.Message.toObjectList(msg.getAttributeList(),
    proto.xray.app.router.Domain.Attribute.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.Domain}
 */
proto.xray.app.router.Domain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.Domain;
  return proto.xray.app.router.Domain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.Domain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.Domain}
 */
proto.xray.app.router.Domain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xray.app.router.Domain.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.xray.app.router.Domain.Attribute;
      reader.readMessage(value,proto.xray.app.router.Domain.Attribute.deserializeBinaryFromReader);
      msg.addAttribute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.Domain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.Domain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.Domain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.Domain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttributeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xray.app.router.Domain.Attribute.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.xray.app.router.Domain.Type = {
  PLAIN: 0,
  REGEX: 1,
  DOMAIN: 2,
  FULL: 3
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.xray.app.router.Domain.Attribute.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.xray.app.router.Domain.Attribute.TypedValueCase = {
  TYPED_VALUE_NOT_SET: 0,
  BOOL_VALUE: 2,
  INT_VALUE: 3
};

/**
 * @return {proto.xray.app.router.Domain.Attribute.TypedValueCase}
 */
proto.xray.app.router.Domain.Attribute.prototype.getTypedValueCase = function() {
  return /** @type {proto.xray.app.router.Domain.Attribute.TypedValueCase} */(jspb.Message.computeOneofCase(this, proto.xray.app.router.Domain.Attribute.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.Domain.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.Domain.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.Domain.Attribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.Domain.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
boolValue: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
intValue: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.Domain.Attribute}
 */
proto.xray.app.router.Domain.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.Domain.Attribute;
  return proto.xray.app.router.Domain.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.Domain.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.Domain.Attribute}
 */
proto.xray.app.router.Domain.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.Domain.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.Domain.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.Domain.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.Domain.Attribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.xray.app.router.Domain.Attribute.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.Domain.Attribute} returns this
 */
proto.xray.app.router.Domain.Attribute.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool bool_value = 2;
 * @return {boolean}
 */
proto.xray.app.router.Domain.Attribute.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.router.Domain.Attribute} returns this
 */
proto.xray.app.router.Domain.Attribute.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.xray.app.router.Domain.Attribute.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.xray.app.router.Domain.Attribute} returns this
 */
proto.xray.app.router.Domain.Attribute.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.xray.app.router.Domain.Attribute.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.Domain.Attribute.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 int_value = 3;
 * @return {number}
 */
proto.xray.app.router.Domain.Attribute.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.app.router.Domain.Attribute} returns this
 */
proto.xray.app.router.Domain.Attribute.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.xray.app.router.Domain.Attribute.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.xray.app.router.Domain.Attribute} returns this
 */
proto.xray.app.router.Domain.Attribute.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.xray.app.router.Domain.Attribute.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.Domain.Attribute.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Type type = 1;
 * @return {!proto.xray.app.router.Domain.Type}
 */
proto.xray.app.router.Domain.prototype.getType = function() {
  return /** @type {!proto.xray.app.router.Domain.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.xray.app.router.Domain.Type} value
 * @return {!proto.xray.app.router.Domain} returns this
 */
proto.xray.app.router.Domain.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.xray.app.router.Domain.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.Domain} returns this
 */
proto.xray.app.router.Domain.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Attribute attribute = 3;
 * @return {!Array<!proto.xray.app.router.Domain.Attribute>}
 */
proto.xray.app.router.Domain.prototype.getAttributeList = function() {
  return /** @type{!Array<!proto.xray.app.router.Domain.Attribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.Domain.Attribute, 3));
};


/**
 * @param {!Array<!proto.xray.app.router.Domain.Attribute>} value
 * @return {!proto.xray.app.router.Domain} returns this
*/
proto.xray.app.router.Domain.prototype.setAttributeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xray.app.router.Domain.Attribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.Domain.Attribute}
 */
proto.xray.app.router.Domain.prototype.addAttribute = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xray.app.router.Domain.Attribute, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.Domain} returns this
 */
proto.xray.app.router.Domain.prototype.clearAttributeList = function() {
  return this.setAttributeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.CIDR.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.CIDR.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.CIDR} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.CIDR.toObject = function(includeInstance, msg) {
  var f, obj = {
ip: msg.getIp_asB64(),
prefix: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.CIDR}
 */
proto.xray.app.router.CIDR.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.CIDR;
  return proto.xray.app.router.CIDR.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.CIDR} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.CIDR}
 */
proto.xray.app.router.CIDR.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.CIDR.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.CIDR.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.CIDR} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.CIDR.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPrefix();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes ip = 1;
 * @return {!(string|Uint8Array)}
 */
proto.xray.app.router.CIDR.prototype.getIp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ip = 1;
 * This is a type-conversion wrapper around `getIp()`
 * @return {string}
 */
proto.xray.app.router.CIDR.prototype.getIp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIp()));
};


/**
 * optional bytes ip = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIp()`
 * @return {!Uint8Array}
 */
proto.xray.app.router.CIDR.prototype.getIp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.app.router.CIDR} returns this
 */
proto.xray.app.router.CIDR.prototype.setIp = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 prefix = 2;
 * @return {number}
 */
proto.xray.app.router.CIDR.prototype.getPrefix = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.app.router.CIDR} returns this
 */
proto.xray.app.router.CIDR.prototype.setPrefix = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.router.GeoIP.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.GeoIP.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.GeoIP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.GeoIP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.GeoIP.toObject = function(includeInstance, msg) {
  var f, obj = {
countryCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
cidrList: jspb.Message.toObjectList(msg.getCidrList(),
    proto.xray.app.router.CIDR.toObject, includeInstance),
reverseMatch: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.GeoIP}
 */
proto.xray.app.router.GeoIP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.GeoIP;
  return proto.xray.app.router.GeoIP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.GeoIP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.GeoIP}
 */
proto.xray.app.router.GeoIP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    case 2:
      var value = new proto.xray.app.router.CIDR;
      reader.readMessage(value,proto.xray.app.router.CIDR.deserializeBinaryFromReader);
      msg.addCidr(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverseMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.GeoIP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.GeoIP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.GeoIP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.GeoIP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountryCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCidrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xray.app.router.CIDR.serializeBinaryToWriter
    );
  }
  f = message.getReverseMatch();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string country_code = 1;
 * @return {string}
 */
proto.xray.app.router.GeoIP.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.GeoIP} returns this
 */
proto.xray.app.router.GeoIP.prototype.setCountryCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated CIDR cidr = 2;
 * @return {!Array<!proto.xray.app.router.CIDR>}
 */
proto.xray.app.router.GeoIP.prototype.getCidrList = function() {
  return /** @type{!Array<!proto.xray.app.router.CIDR>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.CIDR, 2));
};


/**
 * @param {!Array<!proto.xray.app.router.CIDR>} value
 * @return {!proto.xray.app.router.GeoIP} returns this
*/
proto.xray.app.router.GeoIP.prototype.setCidrList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xray.app.router.CIDR=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.CIDR}
 */
proto.xray.app.router.GeoIP.prototype.addCidr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xray.app.router.CIDR, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.GeoIP} returns this
 */
proto.xray.app.router.GeoIP.prototype.clearCidrList = function() {
  return this.setCidrList([]);
};


/**
 * optional bool reverse_match = 3;
 * @return {boolean}
 */
proto.xray.app.router.GeoIP.prototype.getReverseMatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.router.GeoIP} returns this
 */
proto.xray.app.router.GeoIP.prototype.setReverseMatch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.router.GeoIPList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.GeoIPList.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.GeoIPList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.GeoIPList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.GeoIPList.toObject = function(includeInstance, msg) {
  var f, obj = {
entryList: jspb.Message.toObjectList(msg.getEntryList(),
    proto.xray.app.router.GeoIP.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.GeoIPList}
 */
proto.xray.app.router.GeoIPList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.GeoIPList;
  return proto.xray.app.router.GeoIPList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.GeoIPList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.GeoIPList}
 */
proto.xray.app.router.GeoIPList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xray.app.router.GeoIP;
      reader.readMessage(value,proto.xray.app.router.GeoIP.deserializeBinaryFromReader);
      msg.addEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.GeoIPList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.GeoIPList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.GeoIPList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.GeoIPList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xray.app.router.GeoIP.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GeoIP entry = 1;
 * @return {!Array<!proto.xray.app.router.GeoIP>}
 */
proto.xray.app.router.GeoIPList.prototype.getEntryList = function() {
  return /** @type{!Array<!proto.xray.app.router.GeoIP>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.GeoIP, 1));
};


/**
 * @param {!Array<!proto.xray.app.router.GeoIP>} value
 * @return {!proto.xray.app.router.GeoIPList} returns this
*/
proto.xray.app.router.GeoIPList.prototype.setEntryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xray.app.router.GeoIP=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.GeoIP}
 */
proto.xray.app.router.GeoIPList.prototype.addEntry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xray.app.router.GeoIP, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.GeoIPList} returns this
 */
proto.xray.app.router.GeoIPList.prototype.clearEntryList = function() {
  return this.setEntryList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.router.GeoSite.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.GeoSite.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.GeoSite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.GeoSite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.GeoSite.toObject = function(includeInstance, msg) {
  var f, obj = {
countryCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
domainList: jspb.Message.toObjectList(msg.getDomainList(),
    proto.xray.app.router.Domain.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.GeoSite}
 */
proto.xray.app.router.GeoSite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.GeoSite;
  return proto.xray.app.router.GeoSite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.GeoSite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.GeoSite}
 */
proto.xray.app.router.GeoSite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    case 2:
      var value = new proto.xray.app.router.Domain;
      reader.readMessage(value,proto.xray.app.router.Domain.deserializeBinaryFromReader);
      msg.addDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.GeoSite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.GeoSite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.GeoSite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.GeoSite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountryCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDomainList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xray.app.router.Domain.serializeBinaryToWriter
    );
  }
};


/**
 * optional string country_code = 1;
 * @return {string}
 */
proto.xray.app.router.GeoSite.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.GeoSite} returns this
 */
proto.xray.app.router.GeoSite.prototype.setCountryCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Domain domain = 2;
 * @return {!Array<!proto.xray.app.router.Domain>}
 */
proto.xray.app.router.GeoSite.prototype.getDomainList = function() {
  return /** @type{!Array<!proto.xray.app.router.Domain>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.Domain, 2));
};


/**
 * @param {!Array<!proto.xray.app.router.Domain>} value
 * @return {!proto.xray.app.router.GeoSite} returns this
*/
proto.xray.app.router.GeoSite.prototype.setDomainList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xray.app.router.Domain=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.Domain}
 */
proto.xray.app.router.GeoSite.prototype.addDomain = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xray.app.router.Domain, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.GeoSite} returns this
 */
proto.xray.app.router.GeoSite.prototype.clearDomainList = function() {
  return this.setDomainList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.router.GeoSiteList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.GeoSiteList.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.GeoSiteList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.GeoSiteList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.GeoSiteList.toObject = function(includeInstance, msg) {
  var f, obj = {
entryList: jspb.Message.toObjectList(msg.getEntryList(),
    proto.xray.app.router.GeoSite.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.GeoSiteList}
 */
proto.xray.app.router.GeoSiteList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.GeoSiteList;
  return proto.xray.app.router.GeoSiteList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.GeoSiteList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.GeoSiteList}
 */
proto.xray.app.router.GeoSiteList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xray.app.router.GeoSite;
      reader.readMessage(value,proto.xray.app.router.GeoSite.deserializeBinaryFromReader);
      msg.addEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.GeoSiteList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.GeoSiteList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.GeoSiteList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.GeoSiteList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xray.app.router.GeoSite.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GeoSite entry = 1;
 * @return {!Array<!proto.xray.app.router.GeoSite>}
 */
proto.xray.app.router.GeoSiteList.prototype.getEntryList = function() {
  return /** @type{!Array<!proto.xray.app.router.GeoSite>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.GeoSite, 1));
};


/**
 * @param {!Array<!proto.xray.app.router.GeoSite>} value
 * @return {!proto.xray.app.router.GeoSiteList} returns this
*/
proto.xray.app.router.GeoSiteList.prototype.setEntryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xray.app.router.GeoSite=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.GeoSite}
 */
proto.xray.app.router.GeoSiteList.prototype.addEntry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xray.app.router.GeoSite, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.GeoSiteList} returns this
 */
proto.xray.app.router.GeoSiteList.prototype.clearEntryList = function() {
  return this.setEntryList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.router.RoutingRule.repeatedFields_ = [2,10,13,11,7,8,9];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.xray.app.router.RoutingRule.oneofGroups_ = [[1,12]];

/**
 * @enum {number}
 */
proto.xray.app.router.RoutingRule.TargetTagCase = {
  TARGET_TAG_NOT_SET: 0,
  TAG: 1,
  BALANCING_TAG: 12
};

/**
 * @return {proto.xray.app.router.RoutingRule.TargetTagCase}
 */
proto.xray.app.router.RoutingRule.prototype.getTargetTagCase = function() {
  return /** @type {proto.xray.app.router.RoutingRule.TargetTagCase} */(jspb.Message.computeOneofCase(this, proto.xray.app.router.RoutingRule.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.RoutingRule.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.RoutingRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.RoutingRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.RoutingRule.toObject = function(includeInstance, msg) {
  var f, obj = {
tag: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
balancingTag: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
ruleTag: jspb.Message.getFieldWithDefault(msg, 18, ""),
domainList: jspb.Message.toObjectList(msg.getDomainList(),
    proto.xray.app.router.Domain.toObject, includeInstance),
geoipList: jspb.Message.toObjectList(msg.getGeoipList(),
    proto.xray.app.router.GeoIP.toObject, includeInstance),
portList: (f = msg.getPortList()) && common_net_port_pb.PortList.toObject(includeInstance, f),
networksList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
sourceGeoipList: jspb.Message.toObjectList(msg.getSourceGeoipList(),
    proto.xray.app.router.GeoIP.toObject, includeInstance),
sourcePortList: (f = msg.getSourcePortList()) && common_net_port_pb.PortList.toObject(includeInstance, f),
userEmailList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
inboundTagList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
protocolList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, undefined) : [],
domainMatcher: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.RoutingRule}
 */
proto.xray.app.router.RoutingRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.RoutingRule;
  return proto.xray.app.router.RoutingRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.RoutingRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.RoutingRule}
 */
proto.xray.app.router.RoutingRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalancingTag(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuleTag(value);
      break;
    case 2:
      var value = new proto.xray.app.router.Domain;
      reader.readMessage(value,proto.xray.app.router.Domain.deserializeBinaryFromReader);
      msg.addDomain(value);
      break;
    case 10:
      var value = new proto.xray.app.router.GeoIP;
      reader.readMessage(value,proto.xray.app.router.GeoIP.deserializeBinaryFromReader);
      msg.addGeoip(value);
      break;
    case 14:
      var value = new common_net_port_pb.PortList;
      reader.readMessage(value,common_net_port_pb.PortList.deserializeBinaryFromReader);
      msg.setPortList(value);
      break;
    case 13:
      var values = /** @type {!Array<!proto.xray.common.net.Network>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNetworks(values[i]);
      }
      break;
    case 11:
      var value = new proto.xray.app.router.GeoIP;
      reader.readMessage(value,proto.xray.app.router.GeoIP.deserializeBinaryFromReader);
      msg.addSourceGeoip(value);
      break;
    case 16:
      var value = new common_net_port_pb.PortList;
      reader.readMessage(value,common_net_port_pb.PortList.deserializeBinaryFromReader);
      msg.setSourcePortList(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserEmail(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addInboundTag(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addProtocol(value);
      break;
    case 15:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomainMatcher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.RoutingRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.RoutingRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.RoutingRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.RoutingRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getRuleTag();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getDomainList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xray.app.router.Domain.serializeBinaryToWriter
    );
  }
  f = message.getGeoipList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.xray.app.router.GeoIP.serializeBinaryToWriter
    );
  }
  f = message.getPortList();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      common_net_port_pb.PortList.serializeBinaryToWriter
    );
  }
  f = message.getNetworksList();
  if (f.length > 0) {
    writer.writePackedEnum(
      13,
      f
    );
  }
  f = message.getSourceGeoipList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.xray.app.router.GeoIP.serializeBinaryToWriter
    );
  }
  f = message.getSourcePortList();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      common_net_port_pb.PortList.serializeBinaryToWriter
    );
  }
  f = message.getUserEmailList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getInboundTagList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getProtocolList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDomainMatcher();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.xray.app.router.RoutingRule.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setTag = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.xray.app.router.RoutingRule.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearTag = function() {
  return jspb.Message.setOneofField(this, 1, proto.xray.app.router.RoutingRule.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.RoutingRule.prototype.hasTag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string balancing_tag = 12;
 * @return {string}
 */
proto.xray.app.router.RoutingRule.prototype.getBalancingTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setBalancingTag = function(value) {
  return jspb.Message.setOneofField(this, 12, proto.xray.app.router.RoutingRule.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearBalancingTag = function() {
  return jspb.Message.setOneofField(this, 12, proto.xray.app.router.RoutingRule.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.RoutingRule.prototype.hasBalancingTag = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string rule_tag = 18;
 * @return {string}
 */
proto.xray.app.router.RoutingRule.prototype.getRuleTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setRuleTag = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * repeated Domain domain = 2;
 * @return {!Array<!proto.xray.app.router.Domain>}
 */
proto.xray.app.router.RoutingRule.prototype.getDomainList = function() {
  return /** @type{!Array<!proto.xray.app.router.Domain>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.Domain, 2));
};


/**
 * @param {!Array<!proto.xray.app.router.Domain>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
*/
proto.xray.app.router.RoutingRule.prototype.setDomainList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xray.app.router.Domain=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.Domain}
 */
proto.xray.app.router.RoutingRule.prototype.addDomain = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xray.app.router.Domain, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearDomainList = function() {
  return this.setDomainList([]);
};


/**
 * repeated GeoIP geoip = 10;
 * @return {!Array<!proto.xray.app.router.GeoIP>}
 */
proto.xray.app.router.RoutingRule.prototype.getGeoipList = function() {
  return /** @type{!Array<!proto.xray.app.router.GeoIP>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.GeoIP, 10));
};


/**
 * @param {!Array<!proto.xray.app.router.GeoIP>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
*/
proto.xray.app.router.RoutingRule.prototype.setGeoipList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.xray.app.router.GeoIP=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.GeoIP}
 */
proto.xray.app.router.RoutingRule.prototype.addGeoip = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.xray.app.router.GeoIP, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearGeoipList = function() {
  return this.setGeoipList([]);
};


/**
 * optional xray.common.net.PortList port_list = 14;
 * @return {?proto.xray.common.net.PortList}
 */
proto.xray.app.router.RoutingRule.prototype.getPortList = function() {
  return /** @type{?proto.xray.common.net.PortList} */ (
    jspb.Message.getWrapperField(this, common_net_port_pb.PortList, 14));
};


/**
 * @param {?proto.xray.common.net.PortList|undefined} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
*/
proto.xray.app.router.RoutingRule.prototype.setPortList = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearPortList = function() {
  return this.setPortList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.RoutingRule.prototype.hasPortList = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * repeated xray.common.net.Network networks = 13;
 * @return {!Array<!proto.xray.common.net.Network>}
 */
proto.xray.app.router.RoutingRule.prototype.getNetworksList = function() {
  return /** @type {!Array<!proto.xray.common.net.Network>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<!proto.xray.common.net.Network>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setNetworksList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!proto.xray.common.net.Network} value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.addNetworks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearNetworksList = function() {
  return this.setNetworksList([]);
};


/**
 * repeated GeoIP source_geoip = 11;
 * @return {!Array<!proto.xray.app.router.GeoIP>}
 */
proto.xray.app.router.RoutingRule.prototype.getSourceGeoipList = function() {
  return /** @type{!Array<!proto.xray.app.router.GeoIP>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.GeoIP, 11));
};


/**
 * @param {!Array<!proto.xray.app.router.GeoIP>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
*/
proto.xray.app.router.RoutingRule.prototype.setSourceGeoipList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.xray.app.router.GeoIP=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.GeoIP}
 */
proto.xray.app.router.RoutingRule.prototype.addSourceGeoip = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.xray.app.router.GeoIP, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearSourceGeoipList = function() {
  return this.setSourceGeoipList([]);
};


/**
 * optional xray.common.net.PortList source_port_list = 16;
 * @return {?proto.xray.common.net.PortList}
 */
proto.xray.app.router.RoutingRule.prototype.getSourcePortList = function() {
  return /** @type{?proto.xray.common.net.PortList} */ (
    jspb.Message.getWrapperField(this, common_net_port_pb.PortList, 16));
};


/**
 * @param {?proto.xray.common.net.PortList|undefined} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
*/
proto.xray.app.router.RoutingRule.prototype.setSourcePortList = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearSourcePortList = function() {
  return this.setSourcePortList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.RoutingRule.prototype.hasSourcePortList = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * repeated string user_email = 7;
 * @return {!Array<string>}
 */
proto.xray.app.router.RoutingRule.prototype.getUserEmailList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setUserEmailList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.addUserEmail = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearUserEmailList = function() {
  return this.setUserEmailList([]);
};


/**
 * repeated string inbound_tag = 8;
 * @return {!Array<string>}
 */
proto.xray.app.router.RoutingRule.prototype.getInboundTagList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setInboundTagList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.addInboundTag = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearInboundTagList = function() {
  return this.setInboundTagList([]);
};


/**
 * repeated string protocol = 9;
 * @return {!Array<string>}
 */
proto.xray.app.router.RoutingRule.prototype.getProtocolList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setProtocolList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.addProtocol = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearProtocolList = function() {
  return this.setProtocolList([]);
};


/**
 * map<string, string> attributes = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.xray.app.router.RoutingRule.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;
};


/**
 * optional string domain_matcher = 17;
 * @return {string}
 */
proto.xray.app.router.RoutingRule.prototype.getDomainMatcher = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setDomainMatcher = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.router.BalancingRule.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.BalancingRule.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.BalancingRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.BalancingRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.BalancingRule.toObject = function(includeInstance, msg) {
  var f, obj = {
tag: jspb.Message.getFieldWithDefault(msg, 1, ""),
outboundSelectorList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
strategy: jspb.Message.getFieldWithDefault(msg, 3, ""),
strategySettings: (f = msg.getStrategySettings()) && common_serial_typed_message_pb.TypedMessage.toObject(includeInstance, f),
fallbackTag: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.BalancingRule}
 */
proto.xray.app.router.BalancingRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.BalancingRule;
  return proto.xray.app.router.BalancingRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.BalancingRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.BalancingRule}
 */
proto.xray.app.router.BalancingRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addOutboundSelector(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrategy(value);
      break;
    case 4:
      var value = new common_serial_typed_message_pb.TypedMessage;
      reader.readMessage(value,common_serial_typed_message_pb.TypedMessage.deserializeBinaryFromReader);
      msg.setStrategySettings(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFallbackTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.BalancingRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.BalancingRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.BalancingRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.BalancingRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutboundSelectorList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getStrategy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStrategySettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_serial_typed_message_pb.TypedMessage.serializeBinaryToWriter
    );
  }
  f = message.getFallbackTag();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.xray.app.router.BalancingRule.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.BalancingRule} returns this
 */
proto.xray.app.router.BalancingRule.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string outbound_selector = 2;
 * @return {!Array<string>}
 */
proto.xray.app.router.BalancingRule.prototype.getOutboundSelectorList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xray.app.router.BalancingRule} returns this
 */
proto.xray.app.router.BalancingRule.prototype.setOutboundSelectorList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.BalancingRule} returns this
 */
proto.xray.app.router.BalancingRule.prototype.addOutboundSelector = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.BalancingRule} returns this
 */
proto.xray.app.router.BalancingRule.prototype.clearOutboundSelectorList = function() {
  return this.setOutboundSelectorList([]);
};


/**
 * optional string strategy = 3;
 * @return {string}
 */
proto.xray.app.router.BalancingRule.prototype.getStrategy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.BalancingRule} returns this
 */
proto.xray.app.router.BalancingRule.prototype.setStrategy = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional xray.common.serial.TypedMessage strategy_settings = 4;
 * @return {?proto.xray.common.serial.TypedMessage}
 */
proto.xray.app.router.BalancingRule.prototype.getStrategySettings = function() {
  return /** @type{?proto.xray.common.serial.TypedMessage} */ (
    jspb.Message.getWrapperField(this, common_serial_typed_message_pb.TypedMessage, 4));
};


/**
 * @param {?proto.xray.common.serial.TypedMessage|undefined} value
 * @return {!proto.xray.app.router.BalancingRule} returns this
*/
proto.xray.app.router.BalancingRule.prototype.setStrategySettings = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.router.BalancingRule} returns this
 */
proto.xray.app.router.BalancingRule.prototype.clearStrategySettings = function() {
  return this.setStrategySettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.BalancingRule.prototype.hasStrategySettings = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string fallback_tag = 5;
 * @return {string}
 */
proto.xray.app.router.BalancingRule.prototype.getFallbackTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.BalancingRule} returns this
 */
proto.xray.app.router.BalancingRule.prototype.setFallbackTag = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.StrategyWeight.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.StrategyWeight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.StrategyWeight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.StrategyWeight.toObject = function(includeInstance, msg) {
  var f, obj = {
regexp: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
match: jspb.Message.getFieldWithDefault(msg, 2, ""),
value: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.StrategyWeight}
 */
proto.xray.app.router.StrategyWeight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.StrategyWeight;
  return proto.xray.app.router.StrategyWeight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.StrategyWeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.StrategyWeight}
 */
proto.xray.app.router.StrategyWeight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRegexp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.StrategyWeight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.StrategyWeight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.StrategyWeight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.StrategyWeight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegexp();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMatch();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional bool regexp = 1;
 * @return {boolean}
 */
proto.xray.app.router.StrategyWeight.prototype.getRegexp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.router.StrategyWeight} returns this
 */
proto.xray.app.router.StrategyWeight.prototype.setRegexp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string match = 2;
 * @return {string}
 */
proto.xray.app.router.StrategyWeight.prototype.getMatch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.StrategyWeight} returns this
 */
proto.xray.app.router.StrategyWeight.prototype.setMatch = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float value = 3;
 * @return {number}
 */
proto.xray.app.router.StrategyWeight.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.xray.app.router.StrategyWeight} returns this
 */
proto.xray.app.router.StrategyWeight.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.router.StrategyLeastLoadConfig.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.StrategyLeastLoadConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.StrategyLeastLoadConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.StrategyLeastLoadConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
costsList: jspb.Message.toObjectList(msg.getCostsList(),
    proto.xray.app.router.StrategyWeight.toObject, includeInstance),
baselinesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
expected: jspb.Message.getFieldWithDefault(msg, 4, 0),
maxrtt: jspb.Message.getFieldWithDefault(msg, 5, 0),
tolerance: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.StrategyLeastLoadConfig}
 */
proto.xray.app.router.StrategyLeastLoadConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.StrategyLeastLoadConfig;
  return proto.xray.app.router.StrategyLeastLoadConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.StrategyLeastLoadConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.StrategyLeastLoadConfig}
 */
proto.xray.app.router.StrategyLeastLoadConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.xray.app.router.StrategyWeight;
      reader.readMessage(value,proto.xray.app.router.StrategyWeight.deserializeBinaryFromReader);
      msg.addCosts(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBaselines(values[i]);
      }
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpected(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxrtt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTolerance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.StrategyLeastLoadConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.StrategyLeastLoadConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.StrategyLeastLoadConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xray.app.router.StrategyWeight.serializeBinaryToWriter
    );
  }
  f = message.getBaselinesList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getExpected();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMaxrtt();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTolerance();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * repeated StrategyWeight costs = 2;
 * @return {!Array<!proto.xray.app.router.StrategyWeight>}
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.getCostsList = function() {
  return /** @type{!Array<!proto.xray.app.router.StrategyWeight>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.StrategyWeight, 2));
};


/**
 * @param {!Array<!proto.xray.app.router.StrategyWeight>} value
 * @return {!proto.xray.app.router.StrategyLeastLoadConfig} returns this
*/
proto.xray.app.router.StrategyLeastLoadConfig.prototype.setCostsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xray.app.router.StrategyWeight=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.StrategyWeight}
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.addCosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xray.app.router.StrategyWeight, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.StrategyLeastLoadConfig} returns this
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.clearCostsList = function() {
  return this.setCostsList([]);
};


/**
 * repeated int64 baselines = 3;
 * @return {!Array<number>}
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.getBaselinesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.xray.app.router.StrategyLeastLoadConfig} returns this
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.setBaselinesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.StrategyLeastLoadConfig} returns this
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.addBaselines = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.StrategyLeastLoadConfig} returns this
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.clearBaselinesList = function() {
  return this.setBaselinesList([]);
};


/**
 * optional int32 expected = 4;
 * @return {number}
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.getExpected = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.app.router.StrategyLeastLoadConfig} returns this
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.setExpected = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 maxRTT = 5;
 * @return {number}
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.getMaxrtt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.app.router.StrategyLeastLoadConfig} returns this
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.setMaxrtt = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional float tolerance = 6;
 * @return {number}
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.getTolerance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.xray.app.router.StrategyLeastLoadConfig} returns this
 */
proto.xray.app.router.StrategyLeastLoadConfig.prototype.setTolerance = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.router.Config.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
domainStrategy: jspb.Message.getFieldWithDefault(msg, 1, 0),
ruleList: jspb.Message.toObjectList(msg.getRuleList(),
    proto.xray.app.router.RoutingRule.toObject, includeInstance),
balancingRuleList: jspb.Message.toObjectList(msg.getBalancingRuleList(),
    proto.xray.app.router.BalancingRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.Config}
 */
proto.xray.app.router.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.Config;
  return proto.xray.app.router.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.Config}
 */
proto.xray.app.router.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xray.app.router.Config.DomainStrategy} */ (reader.readEnum());
      msg.setDomainStrategy(value);
      break;
    case 2:
      var value = new proto.xray.app.router.RoutingRule;
      reader.readMessage(value,proto.xray.app.router.RoutingRule.deserializeBinaryFromReader);
      msg.addRule(value);
      break;
    case 3:
      var value = new proto.xray.app.router.BalancingRule;
      reader.readMessage(value,proto.xray.app.router.BalancingRule.deserializeBinaryFromReader);
      msg.addBalancingRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDomainStrategy();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRuleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xray.app.router.RoutingRule.serializeBinaryToWriter
    );
  }
  f = message.getBalancingRuleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.xray.app.router.BalancingRule.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.xray.app.router.Config.DomainStrategy = {
  ASIS: 0,
  USEIP: 1,
  IPIFNONMATCH: 2,
  IPONDEMAND: 3
};

/**
 * optional DomainStrategy domain_strategy = 1;
 * @return {!proto.xray.app.router.Config.DomainStrategy}
 */
proto.xray.app.router.Config.prototype.getDomainStrategy = function() {
  return /** @type {!proto.xray.app.router.Config.DomainStrategy} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.xray.app.router.Config.DomainStrategy} value
 * @return {!proto.xray.app.router.Config} returns this
 */
proto.xray.app.router.Config.prototype.setDomainStrategy = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated RoutingRule rule = 2;
 * @return {!Array<!proto.xray.app.router.RoutingRule>}
 */
proto.xray.app.router.Config.prototype.getRuleList = function() {
  return /** @type{!Array<!proto.xray.app.router.RoutingRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.RoutingRule, 2));
};


/**
 * @param {!Array<!proto.xray.app.router.RoutingRule>} value
 * @return {!proto.xray.app.router.Config} returns this
*/
proto.xray.app.router.Config.prototype.setRuleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xray.app.router.RoutingRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.RoutingRule}
 */
proto.xray.app.router.Config.prototype.addRule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xray.app.router.RoutingRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.Config} returns this
 */
proto.xray.app.router.Config.prototype.clearRuleList = function() {
  return this.setRuleList([]);
};


/**
 * repeated BalancingRule balancing_rule = 3;
 * @return {!Array<!proto.xray.app.router.BalancingRule>}
 */
proto.xray.app.router.Config.prototype.getBalancingRuleList = function() {
  return /** @type{!Array<!proto.xray.app.router.BalancingRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.BalancingRule, 3));
};


/**
 * @param {!Array<!proto.xray.app.router.BalancingRule>} value
 * @return {!proto.xray.app.router.Config} returns this
*/
proto.xray.app.router.Config.prototype.setBalancingRuleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.xray.app.router.BalancingRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.BalancingRule}
 */
proto.xray.app.router.Config.prototype.addBalancingRule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.xray.app.router.BalancingRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.Config} returns this
 */
proto.xray.app.router.Config.prototype.clearBalancingRuleList = function() {
  return this.setBalancingRuleList([]);
};


goog.object.extend(exports, proto.xray.app.router);
