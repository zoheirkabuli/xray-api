// source: app/log/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var common_log_log_pb = require('../../common/log/log_pb.js');
goog.object.extend(proto, common_log_log_pb);
goog.exportSymbol('proto.xray.app.log.Config', null, global);
goog.exportSymbol('proto.xray.app.log.LogType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.log.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.app.log.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.log.Config.displayName = 'proto.xray.app.log.Config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.log.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.log.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.log.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.log.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
errorLogType: jspb.Message.getFieldWithDefault(msg, 1, 0),
errorLogLevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
errorLogPath: jspb.Message.getFieldWithDefault(msg, 3, ""),
accessLogType: jspb.Message.getFieldWithDefault(msg, 4, 0),
accessLogPath: jspb.Message.getFieldWithDefault(msg, 5, ""),
enableDnsLog: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
maskAddress: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.log.Config}
 */
proto.xray.app.log.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.log.Config;
  return proto.xray.app.log.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.log.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.log.Config}
 */
proto.xray.app.log.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xray.app.log.LogType} */ (reader.readEnum());
      msg.setErrorLogType(value);
      break;
    case 2:
      var value = /** @type {!proto.xray.common.log.Severity} */ (reader.readEnum());
      msg.setErrorLogLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorLogPath(value);
      break;
    case 4:
      var value = /** @type {!proto.xray.app.log.LogType} */ (reader.readEnum());
      msg.setAccessLogType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessLogPath(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableDnsLog(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaskAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.log.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.log.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.log.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.log.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorLogType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getErrorLogLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getErrorLogPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAccessLogType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getAccessLogPath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEnableDnsLog();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getMaskAddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional LogType error_log_type = 1;
 * @return {!proto.xray.app.log.LogType}
 */
proto.xray.app.log.Config.prototype.getErrorLogType = function() {
  return /** @type {!proto.xray.app.log.LogType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.xray.app.log.LogType} value
 * @return {!proto.xray.app.log.Config} returns this
 */
proto.xray.app.log.Config.prototype.setErrorLogType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional xray.common.log.Severity error_log_level = 2;
 * @return {!proto.xray.common.log.Severity}
 */
proto.xray.app.log.Config.prototype.getErrorLogLevel = function() {
  return /** @type {!proto.xray.common.log.Severity} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.xray.common.log.Severity} value
 * @return {!proto.xray.app.log.Config} returns this
 */
proto.xray.app.log.Config.prototype.setErrorLogLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string error_log_path = 3;
 * @return {string}
 */
proto.xray.app.log.Config.prototype.getErrorLogPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.log.Config} returns this
 */
proto.xray.app.log.Config.prototype.setErrorLogPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional LogType access_log_type = 4;
 * @return {!proto.xray.app.log.LogType}
 */
proto.xray.app.log.Config.prototype.getAccessLogType = function() {
  return /** @type {!proto.xray.app.log.LogType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.xray.app.log.LogType} value
 * @return {!proto.xray.app.log.Config} returns this
 */
proto.xray.app.log.Config.prototype.setAccessLogType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string access_log_path = 5;
 * @return {string}
 */
proto.xray.app.log.Config.prototype.getAccessLogPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.log.Config} returns this
 */
proto.xray.app.log.Config.prototype.setAccessLogPath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool enable_dns_log = 6;
 * @return {boolean}
 */
proto.xray.app.log.Config.prototype.getEnableDnsLog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.app.log.Config} returns this
 */
proto.xray.app.log.Config.prototype.setEnableDnsLog = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string mask_address = 7;
 * @return {string}
 */
proto.xray.app.log.Config.prototype.getMaskAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.log.Config} returns this
 */
proto.xray.app.log.Config.prototype.setMaskAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.xray.app.log.LogType = {
  NONE: 0,
  CONSOLE: 1,
  FILE: 2,
  EVENT: 3
};

goog.object.extend(exports, proto.xray.app.log);
