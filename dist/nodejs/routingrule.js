// source: app/router/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.xray.app.router.RoutingRule');
goog.provide('proto.xray.app.router.RoutingRule.TargetTagCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.xray.app.router.Domain');
goog.require('proto.xray.app.router.GeoIP');
goog.require('proto.xray.common.net.PortList');

goog.forwardDeclare('proto.xray.common.net.Network');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.app.router.RoutingRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.app.router.RoutingRule.repeatedFields_, proto.xray.app.router.RoutingRule.oneofGroups_);
};
goog.inherits(proto.xray.app.router.RoutingRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.app.router.RoutingRule.displayName = 'proto.xray.app.router.RoutingRule';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.app.router.RoutingRule.repeatedFields_ = [2,10,13,11,7,8,9];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.xray.app.router.RoutingRule.oneofGroups_ = [[1,12]];

/**
 * @enum {number}
 */
proto.xray.app.router.RoutingRule.TargetTagCase = {
  TARGET_TAG_NOT_SET: 0,
  TAG: 1,
  BALANCING_TAG: 12
};

/**
 * @return {proto.xray.app.router.RoutingRule.TargetTagCase}
 */
proto.xray.app.router.RoutingRule.prototype.getTargetTagCase = function() {
  return /** @type {proto.xray.app.router.RoutingRule.TargetTagCase} */(jspb.Message.computeOneofCase(this, proto.xray.app.router.RoutingRule.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.app.router.RoutingRule.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.app.router.RoutingRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.app.router.RoutingRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.RoutingRule.toObject = function(includeInstance, msg) {
  var f, obj = {
tag: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
balancingTag: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
ruleTag: jspb.Message.getFieldWithDefault(msg, 18, ""),
domainList: jspb.Message.toObjectList(msg.getDomainList(),
    proto.xray.app.router.Domain.toObject, includeInstance),
geoipList: jspb.Message.toObjectList(msg.getGeoipList(),
    proto.xray.app.router.GeoIP.toObject, includeInstance),
portList: (f = msg.getPortList()) && proto.xray.common.net.PortList.toObject(includeInstance, f),
networksList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
sourceGeoipList: jspb.Message.toObjectList(msg.getSourceGeoipList(),
    proto.xray.app.router.GeoIP.toObject, includeInstance),
sourcePortList: (f = msg.getSourcePortList()) && proto.xray.common.net.PortList.toObject(includeInstance, f),
userEmailList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
inboundTagList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
protocolList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, undefined) : [],
domainMatcher: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.app.router.RoutingRule}
 */
proto.xray.app.router.RoutingRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.app.router.RoutingRule;
  return proto.xray.app.router.RoutingRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.app.router.RoutingRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.app.router.RoutingRule}
 */
proto.xray.app.router.RoutingRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalancingTag(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuleTag(value);
      break;
    case 2:
      var value = new proto.xray.app.router.Domain;
      reader.readMessage(value,proto.xray.app.router.Domain.deserializeBinaryFromReader);
      msg.addDomain(value);
      break;
    case 10:
      var value = new proto.xray.app.router.GeoIP;
      reader.readMessage(value,proto.xray.app.router.GeoIP.deserializeBinaryFromReader);
      msg.addGeoip(value);
      break;
    case 14:
      var value = new proto.xray.common.net.PortList;
      reader.readMessage(value,proto.xray.common.net.PortList.deserializeBinaryFromReader);
      msg.setPortList(value);
      break;
    case 13:
      var values = /** @type {!Array<!proto.xray.common.net.Network>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNetworks(values[i]);
      }
      break;
    case 11:
      var value = new proto.xray.app.router.GeoIP;
      reader.readMessage(value,proto.xray.app.router.GeoIP.deserializeBinaryFromReader);
      msg.addSourceGeoip(value);
      break;
    case 16:
      var value = new proto.xray.common.net.PortList;
      reader.readMessage(value,proto.xray.common.net.PortList.deserializeBinaryFromReader);
      msg.setSourcePortList(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserEmail(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addInboundTag(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addProtocol(value);
      break;
    case 15:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomainMatcher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.app.router.RoutingRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.app.router.RoutingRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.app.router.RoutingRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.app.router.RoutingRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getRuleTag();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getDomainList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xray.app.router.Domain.serializeBinaryToWriter
    );
  }
  f = message.getGeoipList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.xray.app.router.GeoIP.serializeBinaryToWriter
    );
  }
  f = message.getPortList();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.xray.common.net.PortList.serializeBinaryToWriter
    );
  }
  f = message.getNetworksList();
  if (f.length > 0) {
    writer.writePackedEnum(
      13,
      f
    );
  }
  f = message.getSourceGeoipList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.xray.app.router.GeoIP.serializeBinaryToWriter
    );
  }
  f = message.getSourcePortList();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.xray.common.net.PortList.serializeBinaryToWriter
    );
  }
  f = message.getUserEmailList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getInboundTagList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getProtocolList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDomainMatcher();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.xray.app.router.RoutingRule.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setTag = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.xray.app.router.RoutingRule.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearTag = function() {
  return jspb.Message.setOneofField(this, 1, proto.xray.app.router.RoutingRule.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.RoutingRule.prototype.hasTag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string balancing_tag = 12;
 * @return {string}
 */
proto.xray.app.router.RoutingRule.prototype.getBalancingTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setBalancingTag = function(value) {
  return jspb.Message.setOneofField(this, 12, proto.xray.app.router.RoutingRule.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearBalancingTag = function() {
  return jspb.Message.setOneofField(this, 12, proto.xray.app.router.RoutingRule.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.RoutingRule.prototype.hasBalancingTag = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string rule_tag = 18;
 * @return {string}
 */
proto.xray.app.router.RoutingRule.prototype.getRuleTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setRuleTag = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * repeated Domain domain = 2;
 * @return {!Array<!proto.xray.app.router.Domain>}
 */
proto.xray.app.router.RoutingRule.prototype.getDomainList = function() {
  return /** @type{!Array<!proto.xray.app.router.Domain>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.Domain, 2));
};


/**
 * @param {!Array<!proto.xray.app.router.Domain>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
*/
proto.xray.app.router.RoutingRule.prototype.setDomainList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xray.app.router.Domain=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.Domain}
 */
proto.xray.app.router.RoutingRule.prototype.addDomain = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xray.app.router.Domain, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearDomainList = function() {
  return this.setDomainList([]);
};


/**
 * repeated GeoIP geoip = 10;
 * @return {!Array<!proto.xray.app.router.GeoIP>}
 */
proto.xray.app.router.RoutingRule.prototype.getGeoipList = function() {
  return /** @type{!Array<!proto.xray.app.router.GeoIP>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.GeoIP, 10));
};


/**
 * @param {!Array<!proto.xray.app.router.GeoIP>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
*/
proto.xray.app.router.RoutingRule.prototype.setGeoipList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.xray.app.router.GeoIP=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.GeoIP}
 */
proto.xray.app.router.RoutingRule.prototype.addGeoip = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.xray.app.router.GeoIP, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearGeoipList = function() {
  return this.setGeoipList([]);
};


/**
 * optional xray.common.net.PortList port_list = 14;
 * @return {?proto.xray.common.net.PortList}
 */
proto.xray.app.router.RoutingRule.prototype.getPortList = function() {
  return /** @type{?proto.xray.common.net.PortList} */ (
    jspb.Message.getWrapperField(this, proto.xray.common.net.PortList, 14));
};


/**
 * @param {?proto.xray.common.net.PortList|undefined} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
*/
proto.xray.app.router.RoutingRule.prototype.setPortList = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearPortList = function() {
  return this.setPortList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.RoutingRule.prototype.hasPortList = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * repeated xray.common.net.Network networks = 13;
 * @return {!Array<!proto.xray.common.net.Network>}
 */
proto.xray.app.router.RoutingRule.prototype.getNetworksList = function() {
  return /** @type {!Array<!proto.xray.common.net.Network>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<!proto.xray.common.net.Network>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setNetworksList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!proto.xray.common.net.Network} value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.addNetworks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearNetworksList = function() {
  return this.setNetworksList([]);
};


/**
 * repeated GeoIP source_geoip = 11;
 * @return {!Array<!proto.xray.app.router.GeoIP>}
 */
proto.xray.app.router.RoutingRule.prototype.getSourceGeoipList = function() {
  return /** @type{!Array<!proto.xray.app.router.GeoIP>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.app.router.GeoIP, 11));
};


/**
 * @param {!Array<!proto.xray.app.router.GeoIP>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
*/
proto.xray.app.router.RoutingRule.prototype.setSourceGeoipList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.xray.app.router.GeoIP=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.GeoIP}
 */
proto.xray.app.router.RoutingRule.prototype.addSourceGeoip = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.xray.app.router.GeoIP, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearSourceGeoipList = function() {
  return this.setSourceGeoipList([]);
};


/**
 * optional xray.common.net.PortList source_port_list = 16;
 * @return {?proto.xray.common.net.PortList}
 */
proto.xray.app.router.RoutingRule.prototype.getSourcePortList = function() {
  return /** @type{?proto.xray.common.net.PortList} */ (
    jspb.Message.getWrapperField(this, proto.xray.common.net.PortList, 16));
};


/**
 * @param {?proto.xray.common.net.PortList|undefined} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
*/
proto.xray.app.router.RoutingRule.prototype.setSourcePortList = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearSourcePortList = function() {
  return this.setSourcePortList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.app.router.RoutingRule.prototype.hasSourcePortList = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * repeated string user_email = 7;
 * @return {!Array<string>}
 */
proto.xray.app.router.RoutingRule.prototype.getUserEmailList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setUserEmailList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.addUserEmail = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearUserEmailList = function() {
  return this.setUserEmailList([]);
};


/**
 * repeated string inbound_tag = 8;
 * @return {!Array<string>}
 */
proto.xray.app.router.RoutingRule.prototype.getInboundTagList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setInboundTagList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.addInboundTag = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearInboundTagList = function() {
  return this.setInboundTagList([]);
};


/**
 * repeated string protocol = 9;
 * @return {!Array<string>}
 */
proto.xray.app.router.RoutingRule.prototype.getProtocolList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setProtocolList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.addProtocol = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearProtocolList = function() {
  return this.setProtocolList([]);
};


/**
 * map<string, string> attributes = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.xray.app.router.RoutingRule.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;
};


/**
 * optional string domain_matcher = 17;
 * @return {string}
 */
proto.xray.app.router.RoutingRule.prototype.getDomainMatcher = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.app.router.RoutingRule} returns this
 */
proto.xray.app.router.RoutingRule.prototype.setDomainMatcher = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


