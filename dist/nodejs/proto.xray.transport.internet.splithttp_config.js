// source: transport/internet/splithttp/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.xray.transport.internet.splithttp.Config');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.xray.transport.internet.StreamConfig');
goog.require('proto.xray.transport.internet.splithttp.RangeConfig');
goog.require('proto.xray.transport.internet.splithttp.XmuxConfig');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.transport.internet.splithttp.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.transport.internet.splithttp.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.transport.internet.splithttp.Config.displayName = 'proto.xray.transport.internet.splithttp.Config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.transport.internet.splithttp.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.transport.internet.splithttp.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.transport.internet.splithttp.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.splithttp.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
host: jspb.Message.getFieldWithDefault(msg, 1, ""),
path: jspb.Message.getFieldWithDefault(msg, 2, ""),
mode: jspb.Message.getFieldWithDefault(msg, 3, ""),
headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, undefined) : [],
xpaddingbytes: (f = msg.getXpaddingbytes()) && proto.xray.transport.internet.splithttp.RangeConfig.toObject(includeInstance, f),
nogrpcheader: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
nosseheader: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
scmaxeachpostbytes: (f = msg.getScmaxeachpostbytes()) && proto.xray.transport.internet.splithttp.RangeConfig.toObject(includeInstance, f),
scminpostsintervalms: (f = msg.getScminpostsintervalms()) && proto.xray.transport.internet.splithttp.RangeConfig.toObject(includeInstance, f),
scmaxbufferedposts: jspb.Message.getFieldWithDefault(msg, 10, 0),
scstreamupserversecs: (f = msg.getScstreamupserversecs()) && proto.xray.transport.internet.splithttp.RangeConfig.toObject(includeInstance, f),
xmux: (f = msg.getXmux()) && proto.xray.transport.internet.splithttp.XmuxConfig.toObject(includeInstance, f),
downloadsettings: (f = msg.getDownloadsettings()) && proto.xray.transport.internet.StreamConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.transport.internet.splithttp.Config}
 */
proto.xray.transport.internet.splithttp.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.transport.internet.splithttp.Config;
  return proto.xray.transport.internet.splithttp.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.transport.internet.splithttp.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.transport.internet.splithttp.Config}
 */
proto.xray.transport.internet.splithttp.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    case 4:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = new proto.xray.transport.internet.splithttp.RangeConfig;
      reader.readMessage(value,proto.xray.transport.internet.splithttp.RangeConfig.deserializeBinaryFromReader);
      msg.setXpaddingbytes(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNogrpcheader(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNosseheader(value);
      break;
    case 8:
      var value = new proto.xray.transport.internet.splithttp.RangeConfig;
      reader.readMessage(value,proto.xray.transport.internet.splithttp.RangeConfig.deserializeBinaryFromReader);
      msg.setScmaxeachpostbytes(value);
      break;
    case 9:
      var value = new proto.xray.transport.internet.splithttp.RangeConfig;
      reader.readMessage(value,proto.xray.transport.internet.splithttp.RangeConfig.deserializeBinaryFromReader);
      msg.setScminpostsintervalms(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScmaxbufferedposts(value);
      break;
    case 11:
      var value = new proto.xray.transport.internet.splithttp.RangeConfig;
      reader.readMessage(value,proto.xray.transport.internet.splithttp.RangeConfig.deserializeBinaryFromReader);
      msg.setScstreamupserversecs(value);
      break;
    case 12:
      var value = new proto.xray.transport.internet.splithttp.XmuxConfig;
      reader.readMessage(value,proto.xray.transport.internet.splithttp.XmuxConfig.deserializeBinaryFromReader);
      msg.setXmux(value);
      break;
    case 13:
      var value = new proto.xray.transport.internet.StreamConfig;
      reader.readMessage(value,proto.xray.transport.internet.StreamConfig.deserializeBinaryFromReader);
      msg.setDownloadsettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.splithttp.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.transport.internet.splithttp.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.transport.internet.splithttp.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.splithttp.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getXpaddingbytes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.xray.transport.internet.splithttp.RangeConfig.serializeBinaryToWriter
    );
  }
  f = message.getNogrpcheader();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getNosseheader();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getScmaxeachpostbytes();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.xray.transport.internet.splithttp.RangeConfig.serializeBinaryToWriter
    );
  }
  f = message.getScminpostsintervalms();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.xray.transport.internet.splithttp.RangeConfig.serializeBinaryToWriter
    );
  }
  f = message.getScmaxbufferedposts();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getScstreamupserversecs();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.xray.transport.internet.splithttp.RangeConfig.serializeBinaryToWriter
    );
  }
  f = message.getXmux();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.xray.transport.internet.splithttp.XmuxConfig.serializeBinaryToWriter
    );
  }
  f = message.getDownloadsettings();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.xray.transport.internet.StreamConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mode = 3;
 * @return {string}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.setMode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, string> headers = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
  return this;
};


/**
 * optional RangeConfig xPaddingBytes = 5;
 * @return {?proto.xray.transport.internet.splithttp.RangeConfig}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getXpaddingbytes = function() {
  return /** @type{?proto.xray.transport.internet.splithttp.RangeConfig} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.splithttp.RangeConfig, 5));
};


/**
 * @param {?proto.xray.transport.internet.splithttp.RangeConfig|undefined} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
*/
proto.xray.transport.internet.splithttp.Config.prototype.setXpaddingbytes = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.clearXpaddingbytes = function() {
  return this.setXpaddingbytes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.splithttp.Config.prototype.hasXpaddingbytes = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool noGRPCHeader = 6;
 * @return {boolean}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getNogrpcheader = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.setNogrpcheader = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool noSSEHeader = 7;
 * @return {boolean}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getNosseheader = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.setNosseheader = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional RangeConfig scMaxEachPostBytes = 8;
 * @return {?proto.xray.transport.internet.splithttp.RangeConfig}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getScmaxeachpostbytes = function() {
  return /** @type{?proto.xray.transport.internet.splithttp.RangeConfig} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.splithttp.RangeConfig, 8));
};


/**
 * @param {?proto.xray.transport.internet.splithttp.RangeConfig|undefined} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
*/
proto.xray.transport.internet.splithttp.Config.prototype.setScmaxeachpostbytes = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.clearScmaxeachpostbytes = function() {
  return this.setScmaxeachpostbytes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.splithttp.Config.prototype.hasScmaxeachpostbytes = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RangeConfig scMinPostsIntervalMs = 9;
 * @return {?proto.xray.transport.internet.splithttp.RangeConfig}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getScminpostsintervalms = function() {
  return /** @type{?proto.xray.transport.internet.splithttp.RangeConfig} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.splithttp.RangeConfig, 9));
};


/**
 * @param {?proto.xray.transport.internet.splithttp.RangeConfig|undefined} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
*/
proto.xray.transport.internet.splithttp.Config.prototype.setScminpostsintervalms = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.clearScminpostsintervalms = function() {
  return this.setScminpostsintervalms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.splithttp.Config.prototype.hasScminpostsintervalms = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int64 scMaxBufferedPosts = 10;
 * @return {number}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getScmaxbufferedposts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.setScmaxbufferedposts = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional RangeConfig scStreamUpServerSecs = 11;
 * @return {?proto.xray.transport.internet.splithttp.RangeConfig}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getScstreamupserversecs = function() {
  return /** @type{?proto.xray.transport.internet.splithttp.RangeConfig} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.splithttp.RangeConfig, 11));
};


/**
 * @param {?proto.xray.transport.internet.splithttp.RangeConfig|undefined} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
*/
proto.xray.transport.internet.splithttp.Config.prototype.setScstreamupserversecs = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.clearScstreamupserversecs = function() {
  return this.setScstreamupserversecs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.splithttp.Config.prototype.hasScstreamupserversecs = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional XmuxConfig xmux = 12;
 * @return {?proto.xray.transport.internet.splithttp.XmuxConfig}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getXmux = function() {
  return /** @type{?proto.xray.transport.internet.splithttp.XmuxConfig} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.splithttp.XmuxConfig, 12));
};


/**
 * @param {?proto.xray.transport.internet.splithttp.XmuxConfig|undefined} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
*/
proto.xray.transport.internet.splithttp.Config.prototype.setXmux = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.clearXmux = function() {
  return this.setXmux(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.splithttp.Config.prototype.hasXmux = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional xray.transport.internet.StreamConfig downloadSettings = 13;
 * @return {?proto.xray.transport.internet.StreamConfig}
 */
proto.xray.transport.internet.splithttp.Config.prototype.getDownloadsettings = function() {
  return /** @type{?proto.xray.transport.internet.StreamConfig} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.StreamConfig, 13));
};


/**
 * @param {?proto.xray.transport.internet.StreamConfig|undefined} value
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
*/
proto.xray.transport.internet.splithttp.Config.prototype.setDownloadsettings = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.splithttp.Config} returns this
 */
proto.xray.transport.internet.splithttp.Config.prototype.clearDownloadsettings = function() {
  return this.setDownloadsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.splithttp.Config.prototype.hasDownloadsettings = function() {
  return jspb.Message.getField(this, 13) != null;
};


