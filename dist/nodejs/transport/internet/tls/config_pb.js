// source: transport/internet/tls/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.xray.transport.internet.tls.Certificate', null, global);
goog.exportSymbol('proto.xray.transport.internet.tls.Certificate.Usage', null, global);
goog.exportSymbol('proto.xray.transport.internet.tls.Config', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.transport.internet.tls.Certificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.transport.internet.tls.Certificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.transport.internet.tls.Certificate.displayName = 'proto.xray.transport.internet.tls.Certificate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.transport.internet.tls.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.transport.internet.tls.Config.repeatedFields_, null);
};
goog.inherits(proto.xray.transport.internet.tls.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.transport.internet.tls.Config.displayName = 'proto.xray.transport.internet.tls.Config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.transport.internet.tls.Certificate.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.transport.internet.tls.Certificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.transport.internet.tls.Certificate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.tls.Certificate.toObject = function(includeInstance, msg) {
  var f, obj = {
certificate: msg.getCertificate_asB64(),
key: msg.getKey_asB64(),
usage: jspb.Message.getFieldWithDefault(msg, 3, 0),
ocspStapling: jspb.Message.getFieldWithDefault(msg, 4, 0),
certificatePath: jspb.Message.getFieldWithDefault(msg, 5, ""),
keyPath: jspb.Message.getFieldWithDefault(msg, 6, ""),
oneTimeLoading: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
buildChain: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.transport.internet.tls.Certificate}
 */
proto.xray.transport.internet.tls.Certificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.transport.internet.tls.Certificate;
  return proto.xray.transport.internet.tls.Certificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.transport.internet.tls.Certificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.transport.internet.tls.Certificate}
 */
proto.xray.transport.internet.tls.Certificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCertificate(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!proto.xray.transport.internet.tls.Certificate.Usage} */ (reader.readEnum());
      msg.setUsage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOcspStapling(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertificatePath(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyPath(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOneTimeLoading(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBuildChain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.tls.Certificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.transport.internet.tls.Certificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.transport.internet.tls.Certificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.tls.Certificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getUsage();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getOcspStapling();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getCertificatePath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKeyPath();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOneTimeLoading();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getBuildChain();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.xray.transport.internet.tls.Certificate.Usage = {
  ENCIPHERMENT: 0,
  AUTHORITY_VERIFY: 1,
  AUTHORITY_ISSUE: 2
};

/**
 * optional bytes certificate = 1;
 * @return {!(string|Uint8Array)}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getCertificate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes certificate = 1;
 * This is a type-conversion wrapper around `getCertificate()`
 * @return {string}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getCertificate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCertificate()));
};


/**
 * optional bytes certificate = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCertificate()`
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getCertificate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCertificate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.transport.internet.tls.Certificate} returns this
 */
proto.xray.transport.internet.tls.Certificate.prototype.setCertificate = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.transport.internet.tls.Certificate} returns this
 */
proto.xray.transport.internet.tls.Certificate.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Usage usage = 3;
 * @return {!proto.xray.transport.internet.tls.Certificate.Usage}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getUsage = function() {
  return /** @type {!proto.xray.transport.internet.tls.Certificate.Usage} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.xray.transport.internet.tls.Certificate.Usage} value
 * @return {!proto.xray.transport.internet.tls.Certificate} returns this
 */
proto.xray.transport.internet.tls.Certificate.prototype.setUsage = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint64 ocsp_stapling = 4;
 * @return {number}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getOcspStapling = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.tls.Certificate} returns this
 */
proto.xray.transport.internet.tls.Certificate.prototype.setOcspStapling = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string certificate_path = 5;
 * @return {string}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getCertificatePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.tls.Certificate} returns this
 */
proto.xray.transport.internet.tls.Certificate.prototype.setCertificatePath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string key_path = 6;
 * @return {string}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getKeyPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.tls.Certificate} returns this
 */
proto.xray.transport.internet.tls.Certificate.prototype.setKeyPath = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool One_time_loading = 7;
 * @return {boolean}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getOneTimeLoading = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.tls.Certificate} returns this
 */
proto.xray.transport.internet.tls.Certificate.prototype.setOneTimeLoading = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool build_chain = 8;
 * @return {boolean}
 */
proto.xray.transport.internet.tls.Certificate.prototype.getBuildChain = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.tls.Certificate} returns this
 */
proto.xray.transport.internet.tls.Certificate.prototype.setBuildChain = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.transport.internet.tls.Config.repeatedFields_ = [2,4,13,14,16,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.transport.internet.tls.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.transport.internet.tls.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.transport.internet.tls.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.tls.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
allowInsecure: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
certificateList: jspb.Message.toObjectList(msg.getCertificateList(),
    proto.xray.transport.internet.tls.Certificate.toObject, includeInstance),
serverName: jspb.Message.getFieldWithDefault(msg, 3, ""),
nextProtocolList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
enableSessionResumption: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
disableSystemRoot: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
minVersion: jspb.Message.getFieldWithDefault(msg, 7, ""),
maxVersion: jspb.Message.getFieldWithDefault(msg, 8, ""),
cipherSuites: jspb.Message.getFieldWithDefault(msg, 9, ""),
fingerprint: jspb.Message.getFieldWithDefault(msg, 11, ""),
rejectUnknownSni: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
pinnedPeerCertificateChainSha256List: msg.getPinnedPeerCertificateChainSha256List_asB64(),
pinnedPeerCertificatePublicKeySha256List: msg.getPinnedPeerCertificatePublicKeySha256List_asB64(),
masterKeyLog: jspb.Message.getFieldWithDefault(msg, 15, ""),
curvePreferencesList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
verifyPeerCertInNamesList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.transport.internet.tls.Config}
 */
proto.xray.transport.internet.tls.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.transport.internet.tls.Config;
  return proto.xray.transport.internet.tls.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.transport.internet.tls.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.transport.internet.tls.Config}
 */
proto.xray.transport.internet.tls.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowInsecure(value);
      break;
    case 2:
      var value = new proto.xray.transport.internet.tls.Certificate;
      reader.readMessage(value,proto.xray.transport.internet.tls.Certificate.deserializeBinaryFromReader);
      msg.addCertificate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addNextProtocol(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSessionResumption(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableSystemRoot(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinVersion(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxVersion(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCipherSuites(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRejectUnknownSni(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPinnedPeerCertificateChainSha256(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPinnedPeerCertificatePublicKeySha256(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setMasterKeyLog(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addCurvePreferences(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.addVerifyPeerCertInNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.tls.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.transport.internet.tls.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.transport.internet.tls.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.tls.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllowInsecure();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCertificateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xray.transport.internet.tls.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getServerName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNextProtocolList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getEnableSessionResumption();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getDisableSystemRoot();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getMinVersion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMaxVersion();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCipherSuites();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRejectUnknownSni();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getPinnedPeerCertificateChainSha256List_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      13,
      f
    );
  }
  f = message.getPinnedPeerCertificatePublicKeySha256List_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      14,
      f
    );
  }
  f = message.getMasterKeyLog();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getCurvePreferencesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = message.getVerifyPeerCertInNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      17,
      f
    );
  }
};


/**
 * optional bool allow_insecure = 1;
 * @return {boolean}
 */
proto.xray.transport.internet.tls.Config.prototype.getAllowInsecure = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setAllowInsecure = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated Certificate certificate = 2;
 * @return {!Array<!proto.xray.transport.internet.tls.Certificate>}
 */
proto.xray.transport.internet.tls.Config.prototype.getCertificateList = function() {
  return /** @type{!Array<!proto.xray.transport.internet.tls.Certificate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.transport.internet.tls.Certificate, 2));
};


/**
 * @param {!Array<!proto.xray.transport.internet.tls.Certificate>} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
*/
proto.xray.transport.internet.tls.Config.prototype.setCertificateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xray.transport.internet.tls.Certificate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.tls.Certificate}
 */
proto.xray.transport.internet.tls.Config.prototype.addCertificate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xray.transport.internet.tls.Certificate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.clearCertificateList = function() {
  return this.setCertificateList([]);
};


/**
 * optional string server_name = 3;
 * @return {string}
 */
proto.xray.transport.internet.tls.Config.prototype.getServerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setServerName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string next_protocol = 4;
 * @return {!Array<string>}
 */
proto.xray.transport.internet.tls.Config.prototype.getNextProtocolList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setNextProtocolList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.addNextProtocol = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.clearNextProtocolList = function() {
  return this.setNextProtocolList([]);
};


/**
 * optional bool enable_session_resumption = 5;
 * @return {boolean}
 */
proto.xray.transport.internet.tls.Config.prototype.getEnableSessionResumption = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setEnableSessionResumption = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool disable_system_root = 6;
 * @return {boolean}
 */
proto.xray.transport.internet.tls.Config.prototype.getDisableSystemRoot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setDisableSystemRoot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string min_version = 7;
 * @return {string}
 */
proto.xray.transport.internet.tls.Config.prototype.getMinVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setMinVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string max_version = 8;
 * @return {string}
 */
proto.xray.transport.internet.tls.Config.prototype.getMaxVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setMaxVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string cipher_suites = 9;
 * @return {string}
 */
proto.xray.transport.internet.tls.Config.prototype.getCipherSuites = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setCipherSuites = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string fingerprint = 11;
 * @return {string}
 */
proto.xray.transport.internet.tls.Config.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setFingerprint = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool reject_unknown_sni = 12;
 * @return {boolean}
 */
proto.xray.transport.internet.tls.Config.prototype.getRejectUnknownSni = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setRejectUnknownSni = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * repeated bytes pinned_peer_certificate_chain_sha256 = 13;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.xray.transport.internet.tls.Config.prototype.getPinnedPeerCertificateChainSha256List = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * repeated bytes pinned_peer_certificate_chain_sha256 = 13;
 * This is a type-conversion wrapper around `getPinnedPeerCertificateChainSha256List()`
 * @return {!Array<string>}
 */
proto.xray.transport.internet.tls.Config.prototype.getPinnedPeerCertificateChainSha256List_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPinnedPeerCertificateChainSha256List()));
};


/**
 * repeated bytes pinned_peer_certificate_chain_sha256 = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPinnedPeerCertificateChainSha256List()`
 * @return {!Array<!Uint8Array>}
 */
proto.xray.transport.internet.tls.Config.prototype.getPinnedPeerCertificateChainSha256List_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPinnedPeerCertificateChainSha256List()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setPinnedPeerCertificateChainSha256List = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.addPinnedPeerCertificateChainSha256 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.clearPinnedPeerCertificateChainSha256List = function() {
  return this.setPinnedPeerCertificateChainSha256List([]);
};


/**
 * repeated bytes pinned_peer_certificate_public_key_sha256 = 14;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.xray.transport.internet.tls.Config.prototype.getPinnedPeerCertificatePublicKeySha256List = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * repeated bytes pinned_peer_certificate_public_key_sha256 = 14;
 * This is a type-conversion wrapper around `getPinnedPeerCertificatePublicKeySha256List()`
 * @return {!Array<string>}
 */
proto.xray.transport.internet.tls.Config.prototype.getPinnedPeerCertificatePublicKeySha256List_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPinnedPeerCertificatePublicKeySha256List()));
};


/**
 * repeated bytes pinned_peer_certificate_public_key_sha256 = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPinnedPeerCertificatePublicKeySha256List()`
 * @return {!Array<!Uint8Array>}
 */
proto.xray.transport.internet.tls.Config.prototype.getPinnedPeerCertificatePublicKeySha256List_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPinnedPeerCertificatePublicKeySha256List()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setPinnedPeerCertificatePublicKeySha256List = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.addPinnedPeerCertificatePublicKeySha256 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.clearPinnedPeerCertificatePublicKeySha256List = function() {
  return this.setPinnedPeerCertificatePublicKeySha256List([]);
};


/**
 * optional string master_key_log = 15;
 * @return {string}
 */
proto.xray.transport.internet.tls.Config.prototype.getMasterKeyLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setMasterKeyLog = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * repeated string curve_preferences = 16;
 * @return {!Array<string>}
 */
proto.xray.transport.internet.tls.Config.prototype.getCurvePreferencesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setCurvePreferencesList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.addCurvePreferences = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.clearCurvePreferencesList = function() {
  return this.setCurvePreferencesList([]);
};


/**
 * repeated string verify_peer_cert_in_names = 17;
 * @return {!Array<string>}
 */
proto.xray.transport.internet.tls.Config.prototype.getVerifyPeerCertInNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.setVerifyPeerCertInNamesList = function(value) {
  return jspb.Message.setField(this, 17, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.addVerifyPeerCertInNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.tls.Config} returns this
 */
proto.xray.transport.internet.tls.Config.prototype.clearVerifyPeerCertInNamesList = function() {
  return this.setVerifyPeerCertInNamesList([]);
};


goog.object.extend(exports, proto.xray.transport.internet.tls);
