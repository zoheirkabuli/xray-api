// source: transport/internet/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var common_serial_typed_message_pb = require('../../common/serial/typed_message_pb.js');
goog.object.extend(proto, common_serial_typed_message_pb);
var common_net_address_pb = require('../../common/net/address_pb.js');
goog.object.extend(proto, common_net_address_pb);
goog.exportSymbol('proto.xray.transport.internet.AddressPortStrategy', null, global);
goog.exportSymbol('proto.xray.transport.internet.CustomSockopt', null, global);
goog.exportSymbol('proto.xray.transport.internet.DomainStrategy', null, global);
goog.exportSymbol('proto.xray.transport.internet.ProxyConfig', null, global);
goog.exportSymbol('proto.xray.transport.internet.SocketConfig', null, global);
goog.exportSymbol('proto.xray.transport.internet.SocketConfig.TProxyMode', null, global);
goog.exportSymbol('proto.xray.transport.internet.StreamConfig', null, global);
goog.exportSymbol('proto.xray.transport.internet.TransportConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.transport.internet.TransportConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.transport.internet.TransportConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.transport.internet.TransportConfig.displayName = 'proto.xray.transport.internet.TransportConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.transport.internet.StreamConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.transport.internet.StreamConfig.repeatedFields_, null);
};
goog.inherits(proto.xray.transport.internet.StreamConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.transport.internet.StreamConfig.displayName = 'proto.xray.transport.internet.StreamConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.transport.internet.ProxyConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.transport.internet.ProxyConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.transport.internet.ProxyConfig.displayName = 'proto.xray.transport.internet.ProxyConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.transport.internet.CustomSockopt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xray.transport.internet.CustomSockopt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.transport.internet.CustomSockopt.displayName = 'proto.xray.transport.internet.CustomSockopt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.transport.internet.SocketConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.transport.internet.SocketConfig.repeatedFields_, null);
};
goog.inherits(proto.xray.transport.internet.SocketConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.transport.internet.SocketConfig.displayName = 'proto.xray.transport.internet.SocketConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.transport.internet.TransportConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.transport.internet.TransportConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.transport.internet.TransportConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.TransportConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
protocolName: jspb.Message.getFieldWithDefault(msg, 3, ""),
settings: (f = msg.getSettings()) && common_serial_typed_message_pb.TypedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.transport.internet.TransportConfig}
 */
proto.xray.transport.internet.TransportConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.transport.internet.TransportConfig;
  return proto.xray.transport.internet.TransportConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.transport.internet.TransportConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.transport.internet.TransportConfig}
 */
proto.xray.transport.internet.TransportConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocolName(value);
      break;
    case 2:
      var value = new common_serial_typed_message_pb.TypedMessage;
      reader.readMessage(value,common_serial_typed_message_pb.TypedMessage.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.TransportConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.transport.internet.TransportConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.transport.internet.TransportConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.TransportConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocolName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_serial_typed_message_pb.TypedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string protocol_name = 3;
 * @return {string}
 */
proto.xray.transport.internet.TransportConfig.prototype.getProtocolName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.TransportConfig} returns this
 */
proto.xray.transport.internet.TransportConfig.prototype.setProtocolName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional xray.common.serial.TypedMessage settings = 2;
 * @return {?proto.xray.common.serial.TypedMessage}
 */
proto.xray.transport.internet.TransportConfig.prototype.getSettings = function() {
  return /** @type{?proto.xray.common.serial.TypedMessage} */ (
    jspb.Message.getWrapperField(this, common_serial_typed_message_pb.TypedMessage, 2));
};


/**
 * @param {?proto.xray.common.serial.TypedMessage|undefined} value
 * @return {!proto.xray.transport.internet.TransportConfig} returns this
*/
proto.xray.transport.internet.TransportConfig.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.TransportConfig} returns this
 */
proto.xray.transport.internet.TransportConfig.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.TransportConfig.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.transport.internet.StreamConfig.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.transport.internet.StreamConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.transport.internet.StreamConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.transport.internet.StreamConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.StreamConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
address: (f = msg.getAddress()) && common_net_address_pb.IPOrDomain.toObject(includeInstance, f),
port: jspb.Message.getFieldWithDefault(msg, 9, 0),
protocolName: jspb.Message.getFieldWithDefault(msg, 5, ""),
transportSettingsList: jspb.Message.toObjectList(msg.getTransportSettingsList(),
    proto.xray.transport.internet.TransportConfig.toObject, includeInstance),
securityType: jspb.Message.getFieldWithDefault(msg, 3, ""),
securitySettingsList: jspb.Message.toObjectList(msg.getSecuritySettingsList(),
    common_serial_typed_message_pb.TypedMessage.toObject, includeInstance),
socketSettings: (f = msg.getSocketSettings()) && proto.xray.transport.internet.SocketConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.transport.internet.StreamConfig}
 */
proto.xray.transport.internet.StreamConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.transport.internet.StreamConfig;
  return proto.xray.transport.internet.StreamConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.transport.internet.StreamConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.transport.internet.StreamConfig}
 */
proto.xray.transport.internet.StreamConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = new common_net_address_pb.IPOrDomain;
      reader.readMessage(value,common_net_address_pb.IPOrDomain.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocolName(value);
      break;
    case 2:
      var value = new proto.xray.transport.internet.TransportConfig;
      reader.readMessage(value,proto.xray.transport.internet.TransportConfig.deserializeBinaryFromReader);
      msg.addTransportSettings(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecurityType(value);
      break;
    case 4:
      var value = new common_serial_typed_message_pb.TypedMessage;
      reader.readMessage(value,common_serial_typed_message_pb.TypedMessage.deserializeBinaryFromReader);
      msg.addSecuritySettings(value);
      break;
    case 6:
      var value = new proto.xray.transport.internet.SocketConfig;
      reader.readMessage(value,proto.xray.transport.internet.SocketConfig.deserializeBinaryFromReader);
      msg.setSocketSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.StreamConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.transport.internet.StreamConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.transport.internet.StreamConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.StreamConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      common_net_address_pb.IPOrDomain.serializeBinaryToWriter
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getProtocolName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTransportSettingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.xray.transport.internet.TransportConfig.serializeBinaryToWriter
    );
  }
  f = message.getSecurityType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSecuritySettingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_serial_typed_message_pb.TypedMessage.serializeBinaryToWriter
    );
  }
  f = message.getSocketSettings();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.xray.transport.internet.SocketConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional xray.common.net.IPOrDomain address = 8;
 * @return {?proto.xray.common.net.IPOrDomain}
 */
proto.xray.transport.internet.StreamConfig.prototype.getAddress = function() {
  return /** @type{?proto.xray.common.net.IPOrDomain} */ (
    jspb.Message.getWrapperField(this, common_net_address_pb.IPOrDomain, 8));
};


/**
 * @param {?proto.xray.common.net.IPOrDomain|undefined} value
 * @return {!proto.xray.transport.internet.StreamConfig} returns this
*/
proto.xray.transport.internet.StreamConfig.prototype.setAddress = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.StreamConfig} returns this
 */
proto.xray.transport.internet.StreamConfig.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.StreamConfig.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 port = 9;
 * @return {number}
 */
proto.xray.transport.internet.StreamConfig.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.StreamConfig} returns this
 */
proto.xray.transport.internet.StreamConfig.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string protocol_name = 5;
 * @return {string}
 */
proto.xray.transport.internet.StreamConfig.prototype.getProtocolName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.StreamConfig} returns this
 */
proto.xray.transport.internet.StreamConfig.prototype.setProtocolName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated TransportConfig transport_settings = 2;
 * @return {!Array<!proto.xray.transport.internet.TransportConfig>}
 */
proto.xray.transport.internet.StreamConfig.prototype.getTransportSettingsList = function() {
  return /** @type{!Array<!proto.xray.transport.internet.TransportConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.transport.internet.TransportConfig, 2));
};


/**
 * @param {!Array<!proto.xray.transport.internet.TransportConfig>} value
 * @return {!proto.xray.transport.internet.StreamConfig} returns this
*/
proto.xray.transport.internet.StreamConfig.prototype.setTransportSettingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xray.transport.internet.TransportConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.TransportConfig}
 */
proto.xray.transport.internet.StreamConfig.prototype.addTransportSettings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xray.transport.internet.TransportConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.StreamConfig} returns this
 */
proto.xray.transport.internet.StreamConfig.prototype.clearTransportSettingsList = function() {
  return this.setTransportSettingsList([]);
};


/**
 * optional string security_type = 3;
 * @return {string}
 */
proto.xray.transport.internet.StreamConfig.prototype.getSecurityType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.StreamConfig} returns this
 */
proto.xray.transport.internet.StreamConfig.prototype.setSecurityType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated xray.common.serial.TypedMessage security_settings = 4;
 * @return {!Array<!proto.xray.common.serial.TypedMessage>}
 */
proto.xray.transport.internet.StreamConfig.prototype.getSecuritySettingsList = function() {
  return /** @type{!Array<!proto.xray.common.serial.TypedMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_serial_typed_message_pb.TypedMessage, 4));
};


/**
 * @param {!Array<!proto.xray.common.serial.TypedMessage>} value
 * @return {!proto.xray.transport.internet.StreamConfig} returns this
*/
proto.xray.transport.internet.StreamConfig.prototype.setSecuritySettingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xray.common.serial.TypedMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.common.serial.TypedMessage}
 */
proto.xray.transport.internet.StreamConfig.prototype.addSecuritySettings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xray.common.serial.TypedMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.StreamConfig} returns this
 */
proto.xray.transport.internet.StreamConfig.prototype.clearSecuritySettingsList = function() {
  return this.setSecuritySettingsList([]);
};


/**
 * optional SocketConfig socket_settings = 6;
 * @return {?proto.xray.transport.internet.SocketConfig}
 */
proto.xray.transport.internet.StreamConfig.prototype.getSocketSettings = function() {
  return /** @type{?proto.xray.transport.internet.SocketConfig} */ (
    jspb.Message.getWrapperField(this, proto.xray.transport.internet.SocketConfig, 6));
};


/**
 * @param {?proto.xray.transport.internet.SocketConfig|undefined} value
 * @return {!proto.xray.transport.internet.StreamConfig} returns this
*/
proto.xray.transport.internet.StreamConfig.prototype.setSocketSettings = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xray.transport.internet.StreamConfig} returns this
 */
proto.xray.transport.internet.StreamConfig.prototype.clearSocketSettings = function() {
  return this.setSocketSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xray.transport.internet.StreamConfig.prototype.hasSocketSettings = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.transport.internet.ProxyConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.transport.internet.ProxyConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.transport.internet.ProxyConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.ProxyConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
tag: jspb.Message.getFieldWithDefault(msg, 1, ""),
transportlayerproxy: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.transport.internet.ProxyConfig}
 */
proto.xray.transport.internet.ProxyConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.transport.internet.ProxyConfig;
  return proto.xray.transport.internet.ProxyConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.transport.internet.ProxyConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.transport.internet.ProxyConfig}
 */
proto.xray.transport.internet.ProxyConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTransportlayerproxy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.ProxyConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.transport.internet.ProxyConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.transport.internet.ProxyConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.ProxyConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransportlayerproxy();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.xray.transport.internet.ProxyConfig.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.ProxyConfig} returns this
 */
proto.xray.transport.internet.ProxyConfig.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool transportLayerProxy = 2;
 * @return {boolean}
 */
proto.xray.transport.internet.ProxyConfig.prototype.getTransportlayerproxy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.ProxyConfig} returns this
 */
proto.xray.transport.internet.ProxyConfig.prototype.setTransportlayerproxy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.transport.internet.CustomSockopt.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.transport.internet.CustomSockopt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.transport.internet.CustomSockopt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.CustomSockopt.toObject = function(includeInstance, msg) {
  var f, obj = {
system: jspb.Message.getFieldWithDefault(msg, 1, ""),
network: jspb.Message.getFieldWithDefault(msg, 2, ""),
level: jspb.Message.getFieldWithDefault(msg, 3, ""),
opt: jspb.Message.getFieldWithDefault(msg, 4, ""),
value: jspb.Message.getFieldWithDefault(msg, 5, ""),
type: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.transport.internet.CustomSockopt}
 */
proto.xray.transport.internet.CustomSockopt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.transport.internet.CustomSockopt;
  return proto.xray.transport.internet.CustomSockopt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.transport.internet.CustomSockopt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.transport.internet.CustomSockopt}
 */
proto.xray.transport.internet.CustomSockopt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystem(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.CustomSockopt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.transport.internet.CustomSockopt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.transport.internet.CustomSockopt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.CustomSockopt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystem();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLevel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOpt();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string system = 1;
 * @return {string}
 */
proto.xray.transport.internet.CustomSockopt.prototype.getSystem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.CustomSockopt} returns this
 */
proto.xray.transport.internet.CustomSockopt.prototype.setSystem = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string network = 2;
 * @return {string}
 */
proto.xray.transport.internet.CustomSockopt.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.CustomSockopt} returns this
 */
proto.xray.transport.internet.CustomSockopt.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string level = 3;
 * @return {string}
 */
proto.xray.transport.internet.CustomSockopt.prototype.getLevel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.CustomSockopt} returns this
 */
proto.xray.transport.internet.CustomSockopt.prototype.setLevel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string opt = 4;
 * @return {string}
 */
proto.xray.transport.internet.CustomSockopt.prototype.getOpt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.CustomSockopt} returns this
 */
proto.xray.transport.internet.CustomSockopt.prototype.setOpt = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string value = 5;
 * @return {string}
 */
proto.xray.transport.internet.CustomSockopt.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.CustomSockopt} returns this
 */
proto.xray.transport.internet.CustomSockopt.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string type = 6;
 * @return {string}
 */
proto.xray.transport.internet.CustomSockopt.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.CustomSockopt} returns this
 */
proto.xray.transport.internet.CustomSockopt.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.transport.internet.SocketConfig.repeatedFields_ = [20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.transport.internet.SocketConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.transport.internet.SocketConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.transport.internet.SocketConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.SocketConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
mark: jspb.Message.getFieldWithDefault(msg, 1, 0),
tfo: jspb.Message.getFieldWithDefault(msg, 2, 0),
tproxy: jspb.Message.getFieldWithDefault(msg, 3, 0),
receiveOriginalDestAddress: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
bindAddress: msg.getBindAddress_asB64(),
bindPort: jspb.Message.getFieldWithDefault(msg, 6, 0),
acceptProxyProtocol: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
domainStrategy: jspb.Message.getFieldWithDefault(msg, 8, 0),
dialerProxy: jspb.Message.getFieldWithDefault(msg, 9, ""),
tcpKeepAliveInterval: jspb.Message.getFieldWithDefault(msg, 10, 0),
tcpKeepAliveIdle: jspb.Message.getFieldWithDefault(msg, 11, 0),
tcpCongestion: jspb.Message.getFieldWithDefault(msg, 12, ""),
pb_interface: jspb.Message.getFieldWithDefault(msg, 13, ""),
v6only: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
tcpWindowClamp: jspb.Message.getFieldWithDefault(msg, 15, 0),
tcpUserTimeout: jspb.Message.getFieldWithDefault(msg, 16, 0),
tcpMaxSeg: jspb.Message.getFieldWithDefault(msg, 17, 0),
penetrate: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
tcpMptcp: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
customsockoptList: jspb.Message.toObjectList(msg.getCustomsockoptList(),
    proto.xray.transport.internet.CustomSockopt.toObject, includeInstance),
addressPortStrategy: jspb.Message.getFieldWithDefault(msg, 21, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.transport.internet.SocketConfig}
 */
proto.xray.transport.internet.SocketConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.transport.internet.SocketConfig;
  return proto.xray.transport.internet.SocketConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.transport.internet.SocketConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.transport.internet.SocketConfig}
 */
proto.xray.transport.internet.SocketConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMark(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTfo(value);
      break;
    case 3:
      var value = /** @type {!proto.xray.transport.internet.SocketConfig.TProxyMode} */ (reader.readEnum());
      msg.setTproxy(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReceiveOriginalDestAddress(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBindAddress(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBindPort(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcceptProxyProtocol(value);
      break;
    case 8:
      var value = /** @type {!proto.xray.transport.internet.DomainStrategy} */ (reader.readEnum());
      msg.setDomainStrategy(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialerProxy(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTcpKeepAliveInterval(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTcpKeepAliveIdle(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpCongestion(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setInterface(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setV6only(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTcpWindowClamp(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTcpUserTimeout(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTcpMaxSeg(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPenetrate(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTcpMptcp(value);
      break;
    case 20:
      var value = new proto.xray.transport.internet.CustomSockopt;
      reader.readMessage(value,proto.xray.transport.internet.CustomSockopt.deserializeBinaryFromReader);
      msg.addCustomsockopt(value);
      break;
    case 21:
      var value = /** @type {!proto.xray.transport.internet.AddressPortStrategy} */ (reader.readEnum());
      msg.setAddressPortStrategy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.SocketConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.transport.internet.SocketConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.transport.internet.SocketConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.SocketConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMark();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTfo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTproxy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getReceiveOriginalDestAddress();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBindAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getBindPort();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getAcceptProxyProtocol();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getDomainStrategy();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getDialerProxy();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTcpKeepAliveInterval();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTcpKeepAliveIdle();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTcpCongestion();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getInterface();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getV6only();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getTcpWindowClamp();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getTcpUserTimeout();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getTcpMaxSeg();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getPenetrate();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getTcpMptcp();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getCustomsockoptList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.xray.transport.internet.CustomSockopt.serializeBinaryToWriter
    );
  }
  f = message.getAddressPortStrategy();
  if (f !== 0.0) {
    writer.writeEnum(
      21,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.xray.transport.internet.SocketConfig.TProxyMode = {
  OFF: 0,
  TPROXY: 1,
  REDIRECT: 2
};

/**
 * optional int32 mark = 1;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getMark = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setMark = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 tfo = 2;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTfo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTfo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TProxyMode tproxy = 3;
 * @return {!proto.xray.transport.internet.SocketConfig.TProxyMode}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTproxy = function() {
  return /** @type {!proto.xray.transport.internet.SocketConfig.TProxyMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.xray.transport.internet.SocketConfig.TProxyMode} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTproxy = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool receive_original_dest_address = 4;
 * @return {boolean}
 */
proto.xray.transport.internet.SocketConfig.prototype.getReceiveOriginalDestAddress = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setReceiveOriginalDestAddress = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bytes bind_address = 5;
 * @return {!(string|Uint8Array)}
 */
proto.xray.transport.internet.SocketConfig.prototype.getBindAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes bind_address = 5;
 * This is a type-conversion wrapper around `getBindAddress()`
 * @return {string}
 */
proto.xray.transport.internet.SocketConfig.prototype.getBindAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBindAddress()));
};


/**
 * optional bytes bind_address = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBindAddress()`
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.SocketConfig.prototype.getBindAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBindAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setBindAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint32 bind_port = 6;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getBindPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setBindPort = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool accept_proxy_protocol = 7;
 * @return {boolean}
 */
proto.xray.transport.internet.SocketConfig.prototype.getAcceptProxyProtocol = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setAcceptProxyProtocol = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional DomainStrategy domain_strategy = 8;
 * @return {!proto.xray.transport.internet.DomainStrategy}
 */
proto.xray.transport.internet.SocketConfig.prototype.getDomainStrategy = function() {
  return /** @type {!proto.xray.transport.internet.DomainStrategy} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.xray.transport.internet.DomainStrategy} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setDomainStrategy = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string dialer_proxy = 9;
 * @return {string}
 */
proto.xray.transport.internet.SocketConfig.prototype.getDialerProxy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setDialerProxy = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 tcp_keep_alive_interval = 10;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpKeepAliveInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpKeepAliveInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 tcp_keep_alive_idle = 11;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpKeepAliveIdle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpKeepAliveIdle = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string tcp_congestion = 12;
 * @return {string}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpCongestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpCongestion = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string interface = 13;
 * @return {string}
 */
proto.xray.transport.internet.SocketConfig.prototype.getInterface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setInterface = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional bool v6only = 14;
 * @return {boolean}
 */
proto.xray.transport.internet.SocketConfig.prototype.getV6only = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setV6only = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional int32 tcp_window_clamp = 15;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpWindowClamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpWindowClamp = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 tcp_user_timeout = 16;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpUserTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpUserTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 tcp_max_seg = 17;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpMaxSeg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpMaxSeg = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional bool penetrate = 18;
 * @return {boolean}
 */
proto.xray.transport.internet.SocketConfig.prototype.getPenetrate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setPenetrate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional bool tcp_mptcp = 19;
 * @return {boolean}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpMptcp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpMptcp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * repeated CustomSockopt customSockopt = 20;
 * @return {!Array<!proto.xray.transport.internet.CustomSockopt>}
 */
proto.xray.transport.internet.SocketConfig.prototype.getCustomsockoptList = function() {
  return /** @type{!Array<!proto.xray.transport.internet.CustomSockopt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.transport.internet.CustomSockopt, 20));
};


/**
 * @param {!Array<!proto.xray.transport.internet.CustomSockopt>} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
*/
proto.xray.transport.internet.SocketConfig.prototype.setCustomsockoptList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.xray.transport.internet.CustomSockopt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.CustomSockopt}
 */
proto.xray.transport.internet.SocketConfig.prototype.addCustomsockopt = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.xray.transport.internet.CustomSockopt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.clearCustomsockoptList = function() {
  return this.setCustomsockoptList([]);
};


/**
 * optional AddressPortStrategy address_port_strategy = 21;
 * @return {!proto.xray.transport.internet.AddressPortStrategy}
 */
proto.xray.transport.internet.SocketConfig.prototype.getAddressPortStrategy = function() {
  return /** @type {!proto.xray.transport.internet.AddressPortStrategy} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {!proto.xray.transport.internet.AddressPortStrategy} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setAddressPortStrategy = function(value) {
  return jspb.Message.setProto3EnumField(this, 21, value);
};


/**
 * @enum {number}
 */
proto.xray.transport.internet.DomainStrategy = {
  AS_IS: 0,
  USE_IP: 1,
  USE_IP4: 2,
  USE_IP6: 3,
  USE_IP46: 4,
  USE_IP64: 5,
  FORCE_IP: 6,
  FORCE_IP4: 7,
  FORCE_IP6: 8,
  FORCE_IP46: 9,
  FORCE_IP64: 10
};

/**
 * @enum {number}
 */
proto.xray.transport.internet.AddressPortStrategy = {
  NONE: 0,
  SRVPORTONLY: 1,
  SRVADDRESSONLY: 2,
  SRVPORTANDADDRESS: 3,
  TXTPORTONLY: 4,
  TXTADDRESSONLY: 5,
  TXTPORTANDADDRESS: 6
};

goog.object.extend(exports, proto.xray.transport.internet);
