// source: transport/internet/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.xray.transport.internet.SocketConfig');
goog.provide('proto.xray.transport.internet.SocketConfig.TProxyMode');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.xray.transport.internet.CustomSockopt');

goog.forwardDeclare('proto.xray.transport.internet.AddressPortStrategy');
goog.forwardDeclare('proto.xray.transport.internet.DomainStrategy');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xray.transport.internet.SocketConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xray.transport.internet.SocketConfig.repeatedFields_, null);
};
goog.inherits(proto.xray.transport.internet.SocketConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xray.transport.internet.SocketConfig.displayName = 'proto.xray.transport.internet.SocketConfig';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xray.transport.internet.SocketConfig.repeatedFields_ = [20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xray.transport.internet.SocketConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.xray.transport.internet.SocketConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xray.transport.internet.SocketConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.SocketConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
mark: jspb.Message.getFieldWithDefault(msg, 1, 0),
tfo: jspb.Message.getFieldWithDefault(msg, 2, 0),
tproxy: jspb.Message.getFieldWithDefault(msg, 3, 0),
receiveOriginalDestAddress: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
bindAddress: msg.getBindAddress_asB64(),
bindPort: jspb.Message.getFieldWithDefault(msg, 6, 0),
acceptProxyProtocol: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
domainStrategy: jspb.Message.getFieldWithDefault(msg, 8, 0),
dialerProxy: jspb.Message.getFieldWithDefault(msg, 9, ""),
tcpKeepAliveInterval: jspb.Message.getFieldWithDefault(msg, 10, 0),
tcpKeepAliveIdle: jspb.Message.getFieldWithDefault(msg, 11, 0),
tcpCongestion: jspb.Message.getFieldWithDefault(msg, 12, ""),
pb_interface: jspb.Message.getFieldWithDefault(msg, 13, ""),
v6only: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
tcpWindowClamp: jspb.Message.getFieldWithDefault(msg, 15, 0),
tcpUserTimeout: jspb.Message.getFieldWithDefault(msg, 16, 0),
tcpMaxSeg: jspb.Message.getFieldWithDefault(msg, 17, 0),
penetrate: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
tcpMptcp: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
customsockoptList: jspb.Message.toObjectList(msg.getCustomsockoptList(),
    proto.xray.transport.internet.CustomSockopt.toObject, includeInstance),
addressPortStrategy: jspb.Message.getFieldWithDefault(msg, 21, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xray.transport.internet.SocketConfig}
 */
proto.xray.transport.internet.SocketConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xray.transport.internet.SocketConfig;
  return proto.xray.transport.internet.SocketConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xray.transport.internet.SocketConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xray.transport.internet.SocketConfig}
 */
proto.xray.transport.internet.SocketConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMark(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTfo(value);
      break;
    case 3:
      var value = /** @type {!proto.xray.transport.internet.SocketConfig.TProxyMode} */ (reader.readEnum());
      msg.setTproxy(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReceiveOriginalDestAddress(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBindAddress(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBindPort(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcceptProxyProtocol(value);
      break;
    case 8:
      var value = /** @type {!proto.xray.transport.internet.DomainStrategy} */ (reader.readEnum());
      msg.setDomainStrategy(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialerProxy(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTcpKeepAliveInterval(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTcpKeepAliveIdle(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpCongestion(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setInterface(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setV6only(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTcpWindowClamp(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTcpUserTimeout(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTcpMaxSeg(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPenetrate(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTcpMptcp(value);
      break;
    case 20:
      var value = new proto.xray.transport.internet.CustomSockopt;
      reader.readMessage(value,proto.xray.transport.internet.CustomSockopt.deserializeBinaryFromReader);
      msg.addCustomsockopt(value);
      break;
    case 21:
      var value = /** @type {!proto.xray.transport.internet.AddressPortStrategy} */ (reader.readEnum());
      msg.setAddressPortStrategy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.SocketConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xray.transport.internet.SocketConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xray.transport.internet.SocketConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xray.transport.internet.SocketConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMark();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTfo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTproxy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getReceiveOriginalDestAddress();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBindAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getBindPort();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getAcceptProxyProtocol();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getDomainStrategy();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getDialerProxy();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTcpKeepAliveInterval();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTcpKeepAliveIdle();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTcpCongestion();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getInterface();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getV6only();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getTcpWindowClamp();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getTcpUserTimeout();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getTcpMaxSeg();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getPenetrate();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getTcpMptcp();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getCustomsockoptList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.xray.transport.internet.CustomSockopt.serializeBinaryToWriter
    );
  }
  f = message.getAddressPortStrategy();
  if (f !== 0.0) {
    writer.writeEnum(
      21,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.xray.transport.internet.SocketConfig.TProxyMode = {
  OFF: 0,
  TPROXY: 1,
  REDIRECT: 2
};

/**
 * optional int32 mark = 1;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getMark = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setMark = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 tfo = 2;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTfo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTfo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TProxyMode tproxy = 3;
 * @return {!proto.xray.transport.internet.SocketConfig.TProxyMode}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTproxy = function() {
  return /** @type {!proto.xray.transport.internet.SocketConfig.TProxyMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.xray.transport.internet.SocketConfig.TProxyMode} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTproxy = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool receive_original_dest_address = 4;
 * @return {boolean}
 */
proto.xray.transport.internet.SocketConfig.prototype.getReceiveOriginalDestAddress = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setReceiveOriginalDestAddress = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bytes bind_address = 5;
 * @return {string}
 */
proto.xray.transport.internet.SocketConfig.prototype.getBindAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes bind_address = 5;
 * This is a type-conversion wrapper around `getBindAddress()`
 * @return {string}
 */
proto.xray.transport.internet.SocketConfig.prototype.getBindAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBindAddress()));
};


/**
 * optional bytes bind_address = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBindAddress()`
 * @return {!Uint8Array}
 */
proto.xray.transport.internet.SocketConfig.prototype.getBindAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBindAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setBindAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint32 bind_port = 6;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getBindPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setBindPort = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool accept_proxy_protocol = 7;
 * @return {boolean}
 */
proto.xray.transport.internet.SocketConfig.prototype.getAcceptProxyProtocol = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setAcceptProxyProtocol = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional DomainStrategy domain_strategy = 8;
 * @return {!proto.xray.transport.internet.DomainStrategy}
 */
proto.xray.transport.internet.SocketConfig.prototype.getDomainStrategy = function() {
  return /** @type {!proto.xray.transport.internet.DomainStrategy} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.xray.transport.internet.DomainStrategy} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setDomainStrategy = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string dialer_proxy = 9;
 * @return {string}
 */
proto.xray.transport.internet.SocketConfig.prototype.getDialerProxy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setDialerProxy = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 tcp_keep_alive_interval = 10;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpKeepAliveInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpKeepAliveInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 tcp_keep_alive_idle = 11;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpKeepAliveIdle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpKeepAliveIdle = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string tcp_congestion = 12;
 * @return {string}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpCongestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpCongestion = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string interface = 13;
 * @return {string}
 */
proto.xray.transport.internet.SocketConfig.prototype.getInterface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setInterface = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional bool v6only = 14;
 * @return {boolean}
 */
proto.xray.transport.internet.SocketConfig.prototype.getV6only = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setV6only = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional int32 tcp_window_clamp = 15;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpWindowClamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpWindowClamp = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 tcp_user_timeout = 16;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpUserTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpUserTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 tcp_max_seg = 17;
 * @return {number}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpMaxSeg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpMaxSeg = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional bool penetrate = 18;
 * @return {boolean}
 */
proto.xray.transport.internet.SocketConfig.prototype.getPenetrate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setPenetrate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional bool tcp_mptcp = 19;
 * @return {boolean}
 */
proto.xray.transport.internet.SocketConfig.prototype.getTcpMptcp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setTcpMptcp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * repeated CustomSockopt customSockopt = 20;
 * @return {!Array<!proto.xray.transport.internet.CustomSockopt>}
 */
proto.xray.transport.internet.SocketConfig.prototype.getCustomsockoptList = function() {
  return /** @type{!Array<!proto.xray.transport.internet.CustomSockopt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xray.transport.internet.CustomSockopt, 20));
};


/**
 * @param {!Array<!proto.xray.transport.internet.CustomSockopt>} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
*/
proto.xray.transport.internet.SocketConfig.prototype.setCustomsockoptList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.xray.transport.internet.CustomSockopt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xray.transport.internet.CustomSockopt}
 */
proto.xray.transport.internet.SocketConfig.prototype.addCustomsockopt = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.xray.transport.internet.CustomSockopt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.clearCustomsockoptList = function() {
  return this.setCustomsockoptList([]);
};


/**
 * optional AddressPortStrategy address_port_strategy = 21;
 * @return {!proto.xray.transport.internet.AddressPortStrategy}
 */
proto.xray.transport.internet.SocketConfig.prototype.getAddressPortStrategy = function() {
  return /** @type {!proto.xray.transport.internet.AddressPortStrategy} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {!proto.xray.transport.internet.AddressPortStrategy} value
 * @return {!proto.xray.transport.internet.SocketConfig} returns this
 */
proto.xray.transport.internet.SocketConfig.prototype.setAddressPortStrategy = function(value) {
  return jspb.Message.setProto3EnumField(this, 21, value);
};


