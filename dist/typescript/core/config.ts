/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: core/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../common/serial/typed_message";
import * as pb_1 from "google-protobuf";
export namespace xray.core {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inbound?: InboundHandlerConfig[];
            outbound?: OutboundHandlerConfig[];
            app?: dependency_1.xray.common.serial.TypedMessage[];
            extension?: dependency_1.xray.common.serial.TypedMessage[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 4, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inbound" in data && data.inbound != undefined) {
                    this.inbound = data.inbound;
                }
                if ("outbound" in data && data.outbound != undefined) {
                    this.outbound = data.outbound;
                }
                if ("app" in data && data.app != undefined) {
                    this.app = data.app;
                }
                if ("extension" in data && data.extension != undefined) {
                    this.extension = data.extension;
                }
            }
        }
        get inbound() {
            return pb_1.Message.getRepeatedWrapperField(this, InboundHandlerConfig, 1) as InboundHandlerConfig[];
        }
        set inbound(value: InboundHandlerConfig[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get outbound() {
            return pb_1.Message.getRepeatedWrapperField(this, OutboundHandlerConfig, 2) as OutboundHandlerConfig[];
        }
        set outbound(value: OutboundHandlerConfig[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get app() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 4) as dependency_1.xray.common.serial.TypedMessage[];
        }
        set app(value: dependency_1.xray.common.serial.TypedMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get extension() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 6) as dependency_1.xray.common.serial.TypedMessage[];
        }
        set extension(value: dependency_1.xray.common.serial.TypedMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            inbound?: ReturnType<typeof InboundHandlerConfig.prototype.toObject>[];
            outbound?: ReturnType<typeof OutboundHandlerConfig.prototype.toObject>[];
            app?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>[];
            extension?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>[];
        }): Config {
            const message = new Config({});
            if (data.inbound != null) {
                message.inbound = data.inbound.map(item => InboundHandlerConfig.fromObject(item));
            }
            if (data.outbound != null) {
                message.outbound = data.outbound.map(item => OutboundHandlerConfig.fromObject(item));
            }
            if (data.app != null) {
                message.app = data.app.map(item => dependency_1.xray.common.serial.TypedMessage.fromObject(item));
            }
            if (data.extension != null) {
                message.extension = data.extension.map(item => dependency_1.xray.common.serial.TypedMessage.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                inbound?: ReturnType<typeof InboundHandlerConfig.prototype.toObject>[];
                outbound?: ReturnType<typeof OutboundHandlerConfig.prototype.toObject>[];
                app?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>[];
                extension?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>[];
            } = {};
            if (this.inbound != null) {
                data.inbound = this.inbound.map((item: InboundHandlerConfig) => item.toObject());
            }
            if (this.outbound != null) {
                data.outbound = this.outbound.map((item: OutboundHandlerConfig) => item.toObject());
            }
            if (this.app != null) {
                data.app = this.app.map((item: dependency_1.xray.common.serial.TypedMessage) => item.toObject());
            }
            if (this.extension != null) {
                data.extension = this.extension.map((item: dependency_1.xray.common.serial.TypedMessage) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inbound.length)
                writer.writeRepeatedMessage(1, this.inbound, (item: InboundHandlerConfig) => item.serialize(writer));
            if (this.outbound.length)
                writer.writeRepeatedMessage(2, this.outbound, (item: OutboundHandlerConfig) => item.serialize(writer));
            if (this.app.length)
                writer.writeRepeatedMessage(4, this.app, (item: dependency_1.xray.common.serial.TypedMessage) => item.serialize(writer));
            if (this.extension.length)
                writer.writeRepeatedMessage(6, this.extension, (item: dependency_1.xray.common.serial.TypedMessage) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inbound, () => pb_1.Message.addToRepeatedWrapperField(message, 1, InboundHandlerConfig.deserialize(reader), InboundHandlerConfig));
                        break;
                    case 2:
                        reader.readMessage(message.outbound, () => pb_1.Message.addToRepeatedWrapperField(message, 2, OutboundHandlerConfig.deserialize(reader), OutboundHandlerConfig));
                        break;
                    case 4:
                        reader.readMessage(message.app, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.xray.common.serial.TypedMessage.deserialize(reader), dependency_1.xray.common.serial.TypedMessage));
                        break;
                    case 6:
                        reader.readMessage(message.extension, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.xray.common.serial.TypedMessage.deserialize(reader), dependency_1.xray.common.serial.TypedMessage));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
    export class InboundHandlerConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tag?: string;
            receiver_settings?: dependency_1.xray.common.serial.TypedMessage;
            proxy_settings?: dependency_1.xray.common.serial.TypedMessage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
                if ("receiver_settings" in data && data.receiver_settings != undefined) {
                    this.receiver_settings = data.receiver_settings;
                }
                if ("proxy_settings" in data && data.proxy_settings != undefined) {
                    this.proxy_settings = data.proxy_settings;
                }
            }
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get receiver_settings() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 2) as dependency_1.xray.common.serial.TypedMessage;
        }
        set receiver_settings(value: dependency_1.xray.common.serial.TypedMessage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_receiver_settings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get proxy_settings() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 3) as dependency_1.xray.common.serial.TypedMessage;
        }
        set proxy_settings(value: dependency_1.xray.common.serial.TypedMessage) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_proxy_settings() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            tag?: string;
            receiver_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
            proxy_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
        }): InboundHandlerConfig {
            const message = new InboundHandlerConfig({});
            if (data.tag != null) {
                message.tag = data.tag;
            }
            if (data.receiver_settings != null) {
                message.receiver_settings = dependency_1.xray.common.serial.TypedMessage.fromObject(data.receiver_settings);
            }
            if (data.proxy_settings != null) {
                message.proxy_settings = dependency_1.xray.common.serial.TypedMessage.fromObject(data.proxy_settings);
            }
            return message;
        }
        toObject() {
            const data: {
                tag?: string;
                receiver_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
                proxy_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
            } = {};
            if (this.tag != null) {
                data.tag = this.tag;
            }
            if (this.receiver_settings != null) {
                data.receiver_settings = this.receiver_settings.toObject();
            }
            if (this.proxy_settings != null) {
                data.proxy_settings = this.proxy_settings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tag.length)
                writer.writeString(1, this.tag);
            if (this.has_receiver_settings)
                writer.writeMessage(2, this.receiver_settings, () => this.receiver_settings.serialize(writer));
            if (this.has_proxy_settings)
                writer.writeMessage(3, this.proxy_settings, () => this.proxy_settings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InboundHandlerConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InboundHandlerConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tag = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.receiver_settings, () => message.receiver_settings = dependency_1.xray.common.serial.TypedMessage.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.proxy_settings, () => message.proxy_settings = dependency_1.xray.common.serial.TypedMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InboundHandlerConfig {
            return InboundHandlerConfig.deserialize(bytes);
        }
    }
    export class OutboundHandlerConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tag?: string;
            sender_settings?: dependency_1.xray.common.serial.TypedMessage;
            proxy_settings?: dependency_1.xray.common.serial.TypedMessage;
            expire?: number;
            comment?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
                if ("sender_settings" in data && data.sender_settings != undefined) {
                    this.sender_settings = data.sender_settings;
                }
                if ("proxy_settings" in data && data.proxy_settings != undefined) {
                    this.proxy_settings = data.proxy_settings;
                }
                if ("expire" in data && data.expire != undefined) {
                    this.expire = data.expire;
                }
                if ("comment" in data && data.comment != undefined) {
                    this.comment = data.comment;
                }
            }
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sender_settings() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 2) as dependency_1.xray.common.serial.TypedMessage;
        }
        set sender_settings(value: dependency_1.xray.common.serial.TypedMessage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_sender_settings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get proxy_settings() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 3) as dependency_1.xray.common.serial.TypedMessage;
        }
        set proxy_settings(value: dependency_1.xray.common.serial.TypedMessage) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_proxy_settings() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get expire() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set expire(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get comment() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set comment(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            tag?: string;
            sender_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
            proxy_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
            expire?: number;
            comment?: string;
        }): OutboundHandlerConfig {
            const message = new OutboundHandlerConfig({});
            if (data.tag != null) {
                message.tag = data.tag;
            }
            if (data.sender_settings != null) {
                message.sender_settings = dependency_1.xray.common.serial.TypedMessage.fromObject(data.sender_settings);
            }
            if (data.proxy_settings != null) {
                message.proxy_settings = dependency_1.xray.common.serial.TypedMessage.fromObject(data.proxy_settings);
            }
            if (data.expire != null) {
                message.expire = data.expire;
            }
            if (data.comment != null) {
                message.comment = data.comment;
            }
            return message;
        }
        toObject() {
            const data: {
                tag?: string;
                sender_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
                proxy_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
                expire?: number;
                comment?: string;
            } = {};
            if (this.tag != null) {
                data.tag = this.tag;
            }
            if (this.sender_settings != null) {
                data.sender_settings = this.sender_settings.toObject();
            }
            if (this.proxy_settings != null) {
                data.proxy_settings = this.proxy_settings.toObject();
            }
            if (this.expire != null) {
                data.expire = this.expire;
            }
            if (this.comment != null) {
                data.comment = this.comment;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tag.length)
                writer.writeString(1, this.tag);
            if (this.has_sender_settings)
                writer.writeMessage(2, this.sender_settings, () => this.sender_settings.serialize(writer));
            if (this.has_proxy_settings)
                writer.writeMessage(3, this.proxy_settings, () => this.proxy_settings.serialize(writer));
            if (this.expire != 0)
                writer.writeInt64(4, this.expire);
            if (this.comment.length)
                writer.writeString(5, this.comment);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OutboundHandlerConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OutboundHandlerConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tag = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.sender_settings, () => message.sender_settings = dependency_1.xray.common.serial.TypedMessage.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.proxy_settings, () => message.proxy_settings = dependency_1.xray.common.serial.TypedMessage.deserialize(reader));
                        break;
                    case 4:
                        message.expire = reader.readInt64();
                        break;
                    case 5:
                        message.comment = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OutboundHandlerConfig {
            return OutboundHandlerConfig.deserialize(bytes);
        }
    }
}
