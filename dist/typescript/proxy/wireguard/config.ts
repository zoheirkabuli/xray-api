/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proxy/wireguard/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.proxy.wireguard {
    export class PeerConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            public_key?: string;
            pre_shared_key?: string;
            endpoint?: string;
            keep_alive?: number;
            allowed_ips?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("public_key" in data && data.public_key != undefined) {
                    this.public_key = data.public_key;
                }
                if ("pre_shared_key" in data && data.pre_shared_key != undefined) {
                    this.pre_shared_key = data.pre_shared_key;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("keep_alive" in data && data.keep_alive != undefined) {
                    this.keep_alive = data.keep_alive;
                }
                if ("allowed_ips" in data && data.allowed_ips != undefined) {
                    this.allowed_ips = data.allowed_ips;
                }
            }
        }
        get public_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set public_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pre_shared_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set pre_shared_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get keep_alive() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set keep_alive(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get allowed_ips() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set allowed_ips(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            public_key?: string;
            pre_shared_key?: string;
            endpoint?: string;
            keep_alive?: number;
            allowed_ips?: string[];
        }): PeerConfig {
            const message = new PeerConfig({});
            if (data.public_key != null) {
                message.public_key = data.public_key;
            }
            if (data.pre_shared_key != null) {
                message.pre_shared_key = data.pre_shared_key;
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.keep_alive != null) {
                message.keep_alive = data.keep_alive;
            }
            if (data.allowed_ips != null) {
                message.allowed_ips = data.allowed_ips;
            }
            return message;
        }
        toObject() {
            const data: {
                public_key?: string;
                pre_shared_key?: string;
                endpoint?: string;
                keep_alive?: number;
                allowed_ips?: string[];
            } = {};
            if (this.public_key != null) {
                data.public_key = this.public_key;
            }
            if (this.pre_shared_key != null) {
                data.pre_shared_key = this.pre_shared_key;
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.keep_alive != null) {
                data.keep_alive = this.keep_alive;
            }
            if (this.allowed_ips != null) {
                data.allowed_ips = this.allowed_ips;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.public_key.length)
                writer.writeString(1, this.public_key);
            if (this.pre_shared_key.length)
                writer.writeString(2, this.pre_shared_key);
            if (this.endpoint.length)
                writer.writeString(3, this.endpoint);
            if (this.keep_alive != 0)
                writer.writeUint32(4, this.keep_alive);
            if (this.allowed_ips.length)
                writer.writeRepeatedString(5, this.allowed_ips);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PeerConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PeerConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.public_key = reader.readString();
                        break;
                    case 2:
                        message.pre_shared_key = reader.readString();
                        break;
                    case 3:
                        message.endpoint = reader.readString();
                        break;
                    case 4:
                        message.keep_alive = reader.readUint32();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PeerConfig {
            return PeerConfig.deserialize(bytes);
        }
    }
    export class DeviceConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secret_key?: string;
            endpoint?: string[];
            peers?: PeerConfig[];
            mtu?: number;
            num_workers?: number;
            reserved?: Uint8Array;
            domain_strategy?: DeviceConfig.DomainStrategy;
            is_client?: boolean;
            no_kernel_tun?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secret_key" in data && data.secret_key != undefined) {
                    this.secret_key = data.secret_key;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("peers" in data && data.peers != undefined) {
                    this.peers = data.peers;
                }
                if ("mtu" in data && data.mtu != undefined) {
                    this.mtu = data.mtu;
                }
                if ("num_workers" in data && data.num_workers != undefined) {
                    this.num_workers = data.num_workers;
                }
                if ("reserved" in data && data.reserved != undefined) {
                    this.reserved = data.reserved;
                }
                if ("domain_strategy" in data && data.domain_strategy != undefined) {
                    this.domain_strategy = data.domain_strategy;
                }
                if ("is_client" in data && data.is_client != undefined) {
                    this.is_client = data.is_client;
                }
                if ("no_kernel_tun" in data && data.no_kernel_tun != undefined) {
                    this.no_kernel_tun = data.no_kernel_tun;
                }
            }
        }
        get secret_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secret_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set endpoint(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get peers() {
            return pb_1.Message.getRepeatedWrapperField(this, PeerConfig, 3) as PeerConfig[];
        }
        set peers(value: PeerConfig[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get mtu() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set mtu(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get num_workers() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set num_workers(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reserved() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set reserved(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get domain_strategy() {
            return pb_1.Message.getFieldWithDefault(this, 7, DeviceConfig.DomainStrategy.FORCE_IP) as DeviceConfig.DomainStrategy;
        }
        set domain_strategy(value: DeviceConfig.DomainStrategy) {
            pb_1.Message.setField(this, 7, value);
        }
        get is_client() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set is_client(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get no_kernel_tun() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set no_kernel_tun(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            secret_key?: string;
            endpoint?: string[];
            peers?: ReturnType<typeof PeerConfig.prototype.toObject>[];
            mtu?: number;
            num_workers?: number;
            reserved?: Uint8Array;
            domain_strategy?: DeviceConfig.DomainStrategy;
            is_client?: boolean;
            no_kernel_tun?: boolean;
        }): DeviceConfig {
            const message = new DeviceConfig({});
            if (data.secret_key != null) {
                message.secret_key = data.secret_key;
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.peers != null) {
                message.peers = data.peers.map(item => PeerConfig.fromObject(item));
            }
            if (data.mtu != null) {
                message.mtu = data.mtu;
            }
            if (data.num_workers != null) {
                message.num_workers = data.num_workers;
            }
            if (data.reserved != null) {
                message.reserved = data.reserved;
            }
            if (data.domain_strategy != null) {
                message.domain_strategy = data.domain_strategy;
            }
            if (data.is_client != null) {
                message.is_client = data.is_client;
            }
            if (data.no_kernel_tun != null) {
                message.no_kernel_tun = data.no_kernel_tun;
            }
            return message;
        }
        toObject() {
            const data: {
                secret_key?: string;
                endpoint?: string[];
                peers?: ReturnType<typeof PeerConfig.prototype.toObject>[];
                mtu?: number;
                num_workers?: number;
                reserved?: Uint8Array;
                domain_strategy?: DeviceConfig.DomainStrategy;
                is_client?: boolean;
                no_kernel_tun?: boolean;
            } = {};
            if (this.secret_key != null) {
                data.secret_key = this.secret_key;
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.peers != null) {
                data.peers = this.peers.map((item: PeerConfig) => item.toObject());
            }
            if (this.mtu != null) {
                data.mtu = this.mtu;
            }
            if (this.num_workers != null) {
                data.num_workers = this.num_workers;
            }
            if (this.reserved != null) {
                data.reserved = this.reserved;
            }
            if (this.domain_strategy != null) {
                data.domain_strategy = this.domain_strategy;
            }
            if (this.is_client != null) {
                data.is_client = this.is_client;
            }
            if (this.no_kernel_tun != null) {
                data.no_kernel_tun = this.no_kernel_tun;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secret_key.length)
                writer.writeString(1, this.secret_key);
            if (this.endpoint.length)
                writer.writeRepeatedString(2, this.endpoint);
            if (this.peers.length)
                writer.writeRepeatedMessage(3, this.peers, (item: PeerConfig) => item.serialize(writer));
            if (this.mtu != 0)
                writer.writeInt32(4, this.mtu);
            if (this.num_workers != 0)
                writer.writeInt32(5, this.num_workers);
            if (this.reserved.length)
                writer.writeBytes(6, this.reserved);
            if (this.domain_strategy != DeviceConfig.DomainStrategy.FORCE_IP)
                writer.writeEnum(7, this.domain_strategy);
            if (this.is_client != false)
                writer.writeBool(8, this.is_client);
            if (this.no_kernel_tun != false)
                writer.writeBool(9, this.no_kernel_tun);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeviceConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeviceConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secret_key = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.peers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, PeerConfig.deserialize(reader), PeerConfig));
                        break;
                    case 4:
                        message.mtu = reader.readInt32();
                        break;
                    case 5:
                        message.num_workers = reader.readInt32();
                        break;
                    case 6:
                        message.reserved = reader.readBytes();
                        break;
                    case 7:
                        message.domain_strategy = reader.readEnum();
                        break;
                    case 8:
                        message.is_client = reader.readBool();
                        break;
                    case 9:
                        message.no_kernel_tun = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeviceConfig {
            return DeviceConfig.deserialize(bytes);
        }
    }
    export namespace DeviceConfig {
        export enum DomainStrategy {
            FORCE_IP = 0,
            FORCE_IP4 = 1,
            FORCE_IP6 = 2,
            FORCE_IP46 = 3,
            FORCE_IP64 = 4
        }
    }
}
