// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: proxy/freedom/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ServerEndpoint } from "../../common/protocol/server_spec";

export const protobufPackage = "xray.proxy.freedom";

export interface DestinationOverride {
  server: ServerEndpoint | undefined;
}

export interface Fragment {
  packetsFrom: number;
  packetsTo: number;
  lengthMin: number;
  lengthMax: number;
  intervalMin: number;
  intervalMax: number;
}

export interface Noise {
  lengthMin: number;
  lengthMax: number;
  delayMin: number;
  delayMax: number;
  packet: Uint8Array;
}

export interface Config {
  domainStrategy: Config_DomainStrategy;
  destinationOverride: DestinationOverride | undefined;
  userLevel: number;
  fragment: Fragment | undefined;
  proxyProtocol: number;
  noises: Noise[];
}

export enum Config_DomainStrategy {
  AS_IS = 0,
  USE_IP = 1,
  USE_IP4 = 2,
  USE_IP6 = 3,
  USE_IP46 = 4,
  USE_IP64 = 5,
  FORCE_IP = 6,
  FORCE_IP4 = 7,
  FORCE_IP6 = 8,
  FORCE_IP46 = 9,
  FORCE_IP64 = 10,
  UNRECOGNIZED = -1,
}

export function config_DomainStrategyFromJSON(object: any): Config_DomainStrategy {
  switch (object) {
    case 0:
    case "AS_IS":
      return Config_DomainStrategy.AS_IS;
    case 1:
    case "USE_IP":
      return Config_DomainStrategy.USE_IP;
    case 2:
    case "USE_IP4":
      return Config_DomainStrategy.USE_IP4;
    case 3:
    case "USE_IP6":
      return Config_DomainStrategy.USE_IP6;
    case 4:
    case "USE_IP46":
      return Config_DomainStrategy.USE_IP46;
    case 5:
    case "USE_IP64":
      return Config_DomainStrategy.USE_IP64;
    case 6:
    case "FORCE_IP":
      return Config_DomainStrategy.FORCE_IP;
    case 7:
    case "FORCE_IP4":
      return Config_DomainStrategy.FORCE_IP4;
    case 8:
    case "FORCE_IP6":
      return Config_DomainStrategy.FORCE_IP6;
    case 9:
    case "FORCE_IP46":
      return Config_DomainStrategy.FORCE_IP46;
    case 10:
    case "FORCE_IP64":
      return Config_DomainStrategy.FORCE_IP64;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Config_DomainStrategy.UNRECOGNIZED;
  }
}

export function config_DomainStrategyToJSON(object: Config_DomainStrategy): string {
  switch (object) {
    case Config_DomainStrategy.AS_IS:
      return "AS_IS";
    case Config_DomainStrategy.USE_IP:
      return "USE_IP";
    case Config_DomainStrategy.USE_IP4:
      return "USE_IP4";
    case Config_DomainStrategy.USE_IP6:
      return "USE_IP6";
    case Config_DomainStrategy.USE_IP46:
      return "USE_IP46";
    case Config_DomainStrategy.USE_IP64:
      return "USE_IP64";
    case Config_DomainStrategy.FORCE_IP:
      return "FORCE_IP";
    case Config_DomainStrategy.FORCE_IP4:
      return "FORCE_IP4";
    case Config_DomainStrategy.FORCE_IP6:
      return "FORCE_IP6";
    case Config_DomainStrategy.FORCE_IP46:
      return "FORCE_IP46";
    case Config_DomainStrategy.FORCE_IP64:
      return "FORCE_IP64";
    case Config_DomainStrategy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDestinationOverride(): DestinationOverride {
  return { server: undefined };
}

export const DestinationOverride: MessageFns<DestinationOverride> = {
  encode(message: DestinationOverride, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.server !== undefined) {
      ServerEndpoint.encode(message.server, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DestinationOverride {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestinationOverride();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.server = ServerEndpoint.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DestinationOverride {
    return { server: isSet(object.server) ? ServerEndpoint.fromJSON(object.server) : undefined };
  },

  toJSON(message: DestinationOverride): unknown {
    const obj: any = {};
    if (message.server !== undefined) {
      obj.server = ServerEndpoint.toJSON(message.server);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DestinationOverride>, I>>(base?: I): DestinationOverride {
    return DestinationOverride.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DestinationOverride>, I>>(object: I): DestinationOverride {
    const message = createBaseDestinationOverride();
    message.server = (object.server !== undefined && object.server !== null)
      ? ServerEndpoint.fromPartial(object.server)
      : undefined;
    return message;
  },
};

function createBaseFragment(): Fragment {
  return { packetsFrom: 0, packetsTo: 0, lengthMin: 0, lengthMax: 0, intervalMin: 0, intervalMax: 0 };
}

export const Fragment: MessageFns<Fragment> = {
  encode(message: Fragment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.packetsFrom !== 0) {
      writer.uint32(8).uint64(message.packetsFrom);
    }
    if (message.packetsTo !== 0) {
      writer.uint32(16).uint64(message.packetsTo);
    }
    if (message.lengthMin !== 0) {
      writer.uint32(24).uint64(message.lengthMin);
    }
    if (message.lengthMax !== 0) {
      writer.uint32(32).uint64(message.lengthMax);
    }
    if (message.intervalMin !== 0) {
      writer.uint32(40).uint64(message.intervalMin);
    }
    if (message.intervalMax !== 0) {
      writer.uint32(48).uint64(message.intervalMax);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fragment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFragment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.packetsFrom = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.packetsTo = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.lengthMin = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lengthMax = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.intervalMin = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.intervalMax = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fragment {
    return {
      packetsFrom: isSet(object.packetsFrom) ? globalThis.Number(object.packetsFrom) : 0,
      packetsTo: isSet(object.packetsTo) ? globalThis.Number(object.packetsTo) : 0,
      lengthMin: isSet(object.lengthMin) ? globalThis.Number(object.lengthMin) : 0,
      lengthMax: isSet(object.lengthMax) ? globalThis.Number(object.lengthMax) : 0,
      intervalMin: isSet(object.intervalMin) ? globalThis.Number(object.intervalMin) : 0,
      intervalMax: isSet(object.intervalMax) ? globalThis.Number(object.intervalMax) : 0,
    };
  },

  toJSON(message: Fragment): unknown {
    const obj: any = {};
    if (message.packetsFrom !== 0) {
      obj.packetsFrom = Math.round(message.packetsFrom);
    }
    if (message.packetsTo !== 0) {
      obj.packetsTo = Math.round(message.packetsTo);
    }
    if (message.lengthMin !== 0) {
      obj.lengthMin = Math.round(message.lengthMin);
    }
    if (message.lengthMax !== 0) {
      obj.lengthMax = Math.round(message.lengthMax);
    }
    if (message.intervalMin !== 0) {
      obj.intervalMin = Math.round(message.intervalMin);
    }
    if (message.intervalMax !== 0) {
      obj.intervalMax = Math.round(message.intervalMax);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Fragment>, I>>(base?: I): Fragment {
    return Fragment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Fragment>, I>>(object: I): Fragment {
    const message = createBaseFragment();
    message.packetsFrom = object.packetsFrom ?? 0;
    message.packetsTo = object.packetsTo ?? 0;
    message.lengthMin = object.lengthMin ?? 0;
    message.lengthMax = object.lengthMax ?? 0;
    message.intervalMin = object.intervalMin ?? 0;
    message.intervalMax = object.intervalMax ?? 0;
    return message;
  },
};

function createBaseNoise(): Noise {
  return { lengthMin: 0, lengthMax: 0, delayMin: 0, delayMax: 0, packet: new Uint8Array(0) };
}

export const Noise: MessageFns<Noise> = {
  encode(message: Noise, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lengthMin !== 0) {
      writer.uint32(8).uint64(message.lengthMin);
    }
    if (message.lengthMax !== 0) {
      writer.uint32(16).uint64(message.lengthMax);
    }
    if (message.delayMin !== 0) {
      writer.uint32(24).uint64(message.delayMin);
    }
    if (message.delayMax !== 0) {
      writer.uint32(32).uint64(message.delayMax);
    }
    if (message.packet.length !== 0) {
      writer.uint32(42).bytes(message.packet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Noise {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoise();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.lengthMin = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lengthMax = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.delayMin = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.delayMax = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.packet = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Noise {
    return {
      lengthMin: isSet(object.lengthMin) ? globalThis.Number(object.lengthMin) : 0,
      lengthMax: isSet(object.lengthMax) ? globalThis.Number(object.lengthMax) : 0,
      delayMin: isSet(object.delayMin) ? globalThis.Number(object.delayMin) : 0,
      delayMax: isSet(object.delayMax) ? globalThis.Number(object.delayMax) : 0,
      packet: isSet(object.packet) ? bytesFromBase64(object.packet) : new Uint8Array(0),
    };
  },

  toJSON(message: Noise): unknown {
    const obj: any = {};
    if (message.lengthMin !== 0) {
      obj.lengthMin = Math.round(message.lengthMin);
    }
    if (message.lengthMax !== 0) {
      obj.lengthMax = Math.round(message.lengthMax);
    }
    if (message.delayMin !== 0) {
      obj.delayMin = Math.round(message.delayMin);
    }
    if (message.delayMax !== 0) {
      obj.delayMax = Math.round(message.delayMax);
    }
    if (message.packet.length !== 0) {
      obj.packet = base64FromBytes(message.packet);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Noise>, I>>(base?: I): Noise {
    return Noise.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Noise>, I>>(object: I): Noise {
    const message = createBaseNoise();
    message.lengthMin = object.lengthMin ?? 0;
    message.lengthMax = object.lengthMax ?? 0;
    message.delayMin = object.delayMin ?? 0;
    message.delayMax = object.delayMax ?? 0;
    message.packet = object.packet ?? new Uint8Array(0);
    return message;
  },
};

function createBaseConfig(): Config {
  return {
    domainStrategy: 0,
    destinationOverride: undefined,
    userLevel: 0,
    fragment: undefined,
    proxyProtocol: 0,
    noises: [],
  };
}

export const Config: MessageFns<Config> = {
  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.domainStrategy !== 0) {
      writer.uint32(8).int32(message.domainStrategy);
    }
    if (message.destinationOverride !== undefined) {
      DestinationOverride.encode(message.destinationOverride, writer.uint32(26).fork()).join();
    }
    if (message.userLevel !== 0) {
      writer.uint32(32).uint32(message.userLevel);
    }
    if (message.fragment !== undefined) {
      Fragment.encode(message.fragment, writer.uint32(42).fork()).join();
    }
    if (message.proxyProtocol !== 0) {
      writer.uint32(48).uint32(message.proxyProtocol);
    }
    for (const v of message.noises) {
      Noise.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.domainStrategy = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.destinationOverride = DestinationOverride.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userLevel = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fragment = Fragment.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.proxyProtocol = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.noises.push(Noise.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      domainStrategy: isSet(object.domainStrategy) ? config_DomainStrategyFromJSON(object.domainStrategy) : 0,
      destinationOverride: isSet(object.destinationOverride)
        ? DestinationOverride.fromJSON(object.destinationOverride)
        : undefined,
      userLevel: isSet(object.userLevel) ? globalThis.Number(object.userLevel) : 0,
      fragment: isSet(object.fragment) ? Fragment.fromJSON(object.fragment) : undefined,
      proxyProtocol: isSet(object.proxyProtocol) ? globalThis.Number(object.proxyProtocol) : 0,
      noises: globalThis.Array.isArray(object?.noises) ? object.noises.map((e: any) => Noise.fromJSON(e)) : [],
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.domainStrategy !== 0) {
      obj.domainStrategy = config_DomainStrategyToJSON(message.domainStrategy);
    }
    if (message.destinationOverride !== undefined) {
      obj.destinationOverride = DestinationOverride.toJSON(message.destinationOverride);
    }
    if (message.userLevel !== 0) {
      obj.userLevel = Math.round(message.userLevel);
    }
    if (message.fragment !== undefined) {
      obj.fragment = Fragment.toJSON(message.fragment);
    }
    if (message.proxyProtocol !== 0) {
      obj.proxyProtocol = Math.round(message.proxyProtocol);
    }
    if (message.noises?.length) {
      obj.noises = message.noises.map((e) => Noise.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.domainStrategy = object.domainStrategy ?? 0;
    message.destinationOverride = (object.destinationOverride !== undefined && object.destinationOverride !== null)
      ? DestinationOverride.fromPartial(object.destinationOverride)
      : undefined;
    message.userLevel = object.userLevel ?? 0;
    message.fragment = (object.fragment !== undefined && object.fragment !== null)
      ? Fragment.fromPartial(object.fragment)
      : undefined;
    message.proxyProtocol = object.proxyProtocol ?? 0;
    message.noises = object.noises?.map((e) => Noise.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
