/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proxy/freedom/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/protocol/server_spec";
import * as pb_1 from "google-protobuf";
export namespace xray.proxy.freedom {
    export class DestinationOverride extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            server?: dependency_1.xray.common.protocol.ServerEndpoint;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("server" in data && data.server != undefined) {
                    this.server = data.server;
                }
            }
        }
        get server() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.protocol.ServerEndpoint, 1) as dependency_1.xray.common.protocol.ServerEndpoint;
        }
        set server(value: dependency_1.xray.common.protocol.ServerEndpoint) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_server() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            server?: ReturnType<typeof dependency_1.xray.common.protocol.ServerEndpoint.prototype.toObject>;
        }): DestinationOverride {
            const message = new DestinationOverride({});
            if (data.server != null) {
                message.server = dependency_1.xray.common.protocol.ServerEndpoint.fromObject(data.server);
            }
            return message;
        }
        toObject() {
            const data: {
                server?: ReturnType<typeof dependency_1.xray.common.protocol.ServerEndpoint.prototype.toObject>;
            } = {};
            if (this.server != null) {
                data.server = this.server.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_server)
                writer.writeMessage(1, this.server, () => this.server.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DestinationOverride {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DestinationOverride();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.server, () => message.server = dependency_1.xray.common.protocol.ServerEndpoint.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DestinationOverride {
            return DestinationOverride.deserialize(bytes);
        }
    }
    export class Fragment extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            packets_from?: number;
            packets_to?: number;
            length_min?: number;
            length_max?: number;
            interval_min?: number;
            interval_max?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("packets_from" in data && data.packets_from != undefined) {
                    this.packets_from = data.packets_from;
                }
                if ("packets_to" in data && data.packets_to != undefined) {
                    this.packets_to = data.packets_to;
                }
                if ("length_min" in data && data.length_min != undefined) {
                    this.length_min = data.length_min;
                }
                if ("length_max" in data && data.length_max != undefined) {
                    this.length_max = data.length_max;
                }
                if ("interval_min" in data && data.interval_min != undefined) {
                    this.interval_min = data.interval_min;
                }
                if ("interval_max" in data && data.interval_max != undefined) {
                    this.interval_max = data.interval_max;
                }
            }
        }
        get packets_from() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set packets_from(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get packets_to() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set packets_to(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get length_min() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set length_min(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get length_max() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set length_max(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get interval_min() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set interval_min(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get interval_max() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set interval_max(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            packets_from?: number;
            packets_to?: number;
            length_min?: number;
            length_max?: number;
            interval_min?: number;
            interval_max?: number;
        }): Fragment {
            const message = new Fragment({});
            if (data.packets_from != null) {
                message.packets_from = data.packets_from;
            }
            if (data.packets_to != null) {
                message.packets_to = data.packets_to;
            }
            if (data.length_min != null) {
                message.length_min = data.length_min;
            }
            if (data.length_max != null) {
                message.length_max = data.length_max;
            }
            if (data.interval_min != null) {
                message.interval_min = data.interval_min;
            }
            if (data.interval_max != null) {
                message.interval_max = data.interval_max;
            }
            return message;
        }
        toObject() {
            const data: {
                packets_from?: number;
                packets_to?: number;
                length_min?: number;
                length_max?: number;
                interval_min?: number;
                interval_max?: number;
            } = {};
            if (this.packets_from != null) {
                data.packets_from = this.packets_from;
            }
            if (this.packets_to != null) {
                data.packets_to = this.packets_to;
            }
            if (this.length_min != null) {
                data.length_min = this.length_min;
            }
            if (this.length_max != null) {
                data.length_max = this.length_max;
            }
            if (this.interval_min != null) {
                data.interval_min = this.interval_min;
            }
            if (this.interval_max != null) {
                data.interval_max = this.interval_max;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.packets_from != 0)
                writer.writeUint64(1, this.packets_from);
            if (this.packets_to != 0)
                writer.writeUint64(2, this.packets_to);
            if (this.length_min != 0)
                writer.writeUint64(3, this.length_min);
            if (this.length_max != 0)
                writer.writeUint64(4, this.length_max);
            if (this.interval_min != 0)
                writer.writeUint64(5, this.interval_min);
            if (this.interval_max != 0)
                writer.writeUint64(6, this.interval_max);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fragment {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fragment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.packets_from = reader.readUint64();
                        break;
                    case 2:
                        message.packets_to = reader.readUint64();
                        break;
                    case 3:
                        message.length_min = reader.readUint64();
                        break;
                    case 4:
                        message.length_max = reader.readUint64();
                        break;
                    case 5:
                        message.interval_min = reader.readUint64();
                        break;
                    case 6:
                        message.interval_max = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Fragment {
            return Fragment.deserialize(bytes);
        }
    }
    export class Noise extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            length_min?: number;
            length_max?: number;
            delay_min?: number;
            delay_max?: number;
            packet?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("length_min" in data && data.length_min != undefined) {
                    this.length_min = data.length_min;
                }
                if ("length_max" in data && data.length_max != undefined) {
                    this.length_max = data.length_max;
                }
                if ("delay_min" in data && data.delay_min != undefined) {
                    this.delay_min = data.delay_min;
                }
                if ("delay_max" in data && data.delay_max != undefined) {
                    this.delay_max = data.delay_max;
                }
                if ("packet" in data && data.packet != undefined) {
                    this.packet = data.packet;
                }
            }
        }
        get length_min() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set length_min(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get length_max() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set length_max(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get delay_min() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set delay_min(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get delay_max() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set delay_max(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get packet() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set packet(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            length_min?: number;
            length_max?: number;
            delay_min?: number;
            delay_max?: number;
            packet?: Uint8Array;
        }): Noise {
            const message = new Noise({});
            if (data.length_min != null) {
                message.length_min = data.length_min;
            }
            if (data.length_max != null) {
                message.length_max = data.length_max;
            }
            if (data.delay_min != null) {
                message.delay_min = data.delay_min;
            }
            if (data.delay_max != null) {
                message.delay_max = data.delay_max;
            }
            if (data.packet != null) {
                message.packet = data.packet;
            }
            return message;
        }
        toObject() {
            const data: {
                length_min?: number;
                length_max?: number;
                delay_min?: number;
                delay_max?: number;
                packet?: Uint8Array;
            } = {};
            if (this.length_min != null) {
                data.length_min = this.length_min;
            }
            if (this.length_max != null) {
                data.length_max = this.length_max;
            }
            if (this.delay_min != null) {
                data.delay_min = this.delay_min;
            }
            if (this.delay_max != null) {
                data.delay_max = this.delay_max;
            }
            if (this.packet != null) {
                data.packet = this.packet;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.length_min != 0)
                writer.writeUint64(1, this.length_min);
            if (this.length_max != 0)
                writer.writeUint64(2, this.length_max);
            if (this.delay_min != 0)
                writer.writeUint64(3, this.delay_min);
            if (this.delay_max != 0)
                writer.writeUint64(4, this.delay_max);
            if (this.packet.length)
                writer.writeBytes(5, this.packet);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Noise {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Noise();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.length_min = reader.readUint64();
                        break;
                    case 2:
                        message.length_max = reader.readUint64();
                        break;
                    case 3:
                        message.delay_min = reader.readUint64();
                        break;
                    case 4:
                        message.delay_max = reader.readUint64();
                        break;
                    case 5:
                        message.packet = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Noise {
            return Noise.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            domain_strategy?: Config.DomainStrategy;
            destination_override?: DestinationOverride;
            user_level?: number;
            fragment?: Fragment;
            proxy_protocol?: number;
            noises?: Noise[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("domain_strategy" in data && data.domain_strategy != undefined) {
                    this.domain_strategy = data.domain_strategy;
                }
                if ("destination_override" in data && data.destination_override != undefined) {
                    this.destination_override = data.destination_override;
                }
                if ("user_level" in data && data.user_level != undefined) {
                    this.user_level = data.user_level;
                }
                if ("fragment" in data && data.fragment != undefined) {
                    this.fragment = data.fragment;
                }
                if ("proxy_protocol" in data && data.proxy_protocol != undefined) {
                    this.proxy_protocol = data.proxy_protocol;
                }
                if ("noises" in data && data.noises != undefined) {
                    this.noises = data.noises;
                }
            }
        }
        get domain_strategy() {
            return pb_1.Message.getFieldWithDefault(this, 1, Config.DomainStrategy.AS_IS) as Config.DomainStrategy;
        }
        set domain_strategy(value: Config.DomainStrategy) {
            pb_1.Message.setField(this, 1, value);
        }
        get destination_override() {
            return pb_1.Message.getWrapperField(this, DestinationOverride, 3) as DestinationOverride;
        }
        set destination_override(value: DestinationOverride) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_destination_override() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get user_level() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set user_level(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get fragment() {
            return pb_1.Message.getWrapperField(this, Fragment, 5) as Fragment;
        }
        set fragment(value: Fragment) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_fragment() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get proxy_protocol() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set proxy_protocol(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get noises() {
            return pb_1.Message.getRepeatedWrapperField(this, Noise, 7) as Noise[];
        }
        set noises(value: Noise[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            domain_strategy?: Config.DomainStrategy;
            destination_override?: ReturnType<typeof DestinationOverride.prototype.toObject>;
            user_level?: number;
            fragment?: ReturnType<typeof Fragment.prototype.toObject>;
            proxy_protocol?: number;
            noises?: ReturnType<typeof Noise.prototype.toObject>[];
        }): Config {
            const message = new Config({});
            if (data.domain_strategy != null) {
                message.domain_strategy = data.domain_strategy;
            }
            if (data.destination_override != null) {
                message.destination_override = DestinationOverride.fromObject(data.destination_override);
            }
            if (data.user_level != null) {
                message.user_level = data.user_level;
            }
            if (data.fragment != null) {
                message.fragment = Fragment.fromObject(data.fragment);
            }
            if (data.proxy_protocol != null) {
                message.proxy_protocol = data.proxy_protocol;
            }
            if (data.noises != null) {
                message.noises = data.noises.map(item => Noise.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                domain_strategy?: Config.DomainStrategy;
                destination_override?: ReturnType<typeof DestinationOverride.prototype.toObject>;
                user_level?: number;
                fragment?: ReturnType<typeof Fragment.prototype.toObject>;
                proxy_protocol?: number;
                noises?: ReturnType<typeof Noise.prototype.toObject>[];
            } = {};
            if (this.domain_strategy != null) {
                data.domain_strategy = this.domain_strategy;
            }
            if (this.destination_override != null) {
                data.destination_override = this.destination_override.toObject();
            }
            if (this.user_level != null) {
                data.user_level = this.user_level;
            }
            if (this.fragment != null) {
                data.fragment = this.fragment.toObject();
            }
            if (this.proxy_protocol != null) {
                data.proxy_protocol = this.proxy_protocol;
            }
            if (this.noises != null) {
                data.noises = this.noises.map((item: Noise) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.domain_strategy != Config.DomainStrategy.AS_IS)
                writer.writeEnum(1, this.domain_strategy);
            if (this.has_destination_override)
                writer.writeMessage(3, this.destination_override, () => this.destination_override.serialize(writer));
            if (this.user_level != 0)
                writer.writeUint32(4, this.user_level);
            if (this.has_fragment)
                writer.writeMessage(5, this.fragment, () => this.fragment.serialize(writer));
            if (this.proxy_protocol != 0)
                writer.writeUint32(6, this.proxy_protocol);
            if (this.noises.length)
                writer.writeRepeatedMessage(7, this.noises, (item: Noise) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.domain_strategy = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.destination_override, () => message.destination_override = DestinationOverride.deserialize(reader));
                        break;
                    case 4:
                        message.user_level = reader.readUint32();
                        break;
                    case 5:
                        reader.readMessage(message.fragment, () => message.fragment = Fragment.deserialize(reader));
                        break;
                    case 6:
                        message.proxy_protocol = reader.readUint32();
                        break;
                    case 7:
                        reader.readMessage(message.noises, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Noise.deserialize(reader), Noise));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
    export namespace Config {
        export enum DomainStrategy {
            AS_IS = 0,
            USE_IP = 1,
            USE_IP4 = 2,
            USE_IP6 = 3,
            USE_IP46 = 4,
            USE_IP64 = 5,
            FORCE_IP = 6,
            FORCE_IP4 = 7,
            FORCE_IP6 = 8,
            FORCE_IP46 = 9,
            FORCE_IP64 = 10
        }
    }
}
