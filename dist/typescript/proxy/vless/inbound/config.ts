/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proxy/vless/inbound/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../common/protocol/user";
import * as pb_1 from "google-protobuf";
export namespace xray.proxy.vless.inbound {
    export class Fallback extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            alpn?: string;
            path?: string;
            type?: string;
            dest?: string;
            xver?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("alpn" in data && data.alpn != undefined) {
                    this.alpn = data.alpn;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("dest" in data && data.dest != undefined) {
                    this.dest = data.dest;
                }
                if ("xver" in data && data.xver != undefined) {
                    this.xver = data.xver;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get alpn() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set alpn(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get dest() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set dest(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get xver() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set xver(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            name?: string;
            alpn?: string;
            path?: string;
            type?: string;
            dest?: string;
            xver?: number;
        }): Fallback {
            const message = new Fallback({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.alpn != null) {
                message.alpn = data.alpn;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.dest != null) {
                message.dest = data.dest;
            }
            if (data.xver != null) {
                message.xver = data.xver;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                alpn?: string;
                path?: string;
                type?: string;
                dest?: string;
                xver?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.alpn != null) {
                data.alpn = this.alpn;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.dest != null) {
                data.dest = this.dest;
            }
            if (this.xver != null) {
                data.xver = this.xver;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.alpn.length)
                writer.writeString(2, this.alpn);
            if (this.path.length)
                writer.writeString(3, this.path);
            if (this.type.length)
                writer.writeString(4, this.type);
            if (this.dest.length)
                writer.writeString(5, this.dest);
            if (this.xver != 0)
                writer.writeUint64(6, this.xver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fallback {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fallback();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.alpn = reader.readString();
                        break;
                    case 3:
                        message.path = reader.readString();
                        break;
                    case 4:
                        message.type = reader.readString();
                        break;
                    case 5:
                        message.dest = reader.readString();
                        break;
                    case 6:
                        message.xver = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Fallback {
            return Fallback.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            clients?: dependency_1.xray.common.protocol.User[];
            decryption?: string;
            fallbacks?: Fallback[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("clients" in data && data.clients != undefined) {
                    this.clients = data.clients;
                }
                if ("decryption" in data && data.decryption != undefined) {
                    this.decryption = data.decryption;
                }
                if ("fallbacks" in data && data.fallbacks != undefined) {
                    this.fallbacks = data.fallbacks;
                }
            }
        }
        get clients() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.xray.common.protocol.User, 1) as dependency_1.xray.common.protocol.User[];
        }
        set clients(value: dependency_1.xray.common.protocol.User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get decryption() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set decryption(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get fallbacks() {
            return pb_1.Message.getRepeatedWrapperField(this, Fallback, 3) as Fallback[];
        }
        set fallbacks(value: Fallback[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            clients?: ReturnType<typeof dependency_1.xray.common.protocol.User.prototype.toObject>[];
            decryption?: string;
            fallbacks?: ReturnType<typeof Fallback.prototype.toObject>[];
        }): Config {
            const message = new Config({});
            if (data.clients != null) {
                message.clients = data.clients.map(item => dependency_1.xray.common.protocol.User.fromObject(item));
            }
            if (data.decryption != null) {
                message.decryption = data.decryption;
            }
            if (data.fallbacks != null) {
                message.fallbacks = data.fallbacks.map(item => Fallback.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                clients?: ReturnType<typeof dependency_1.xray.common.protocol.User.prototype.toObject>[];
                decryption?: string;
                fallbacks?: ReturnType<typeof Fallback.prototype.toObject>[];
            } = {};
            if (this.clients != null) {
                data.clients = this.clients.map((item: dependency_1.xray.common.protocol.User) => item.toObject());
            }
            if (this.decryption != null) {
                data.decryption = this.decryption;
            }
            if (this.fallbacks != null) {
                data.fallbacks = this.fallbacks.map((item: Fallback) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.clients.length)
                writer.writeRepeatedMessage(1, this.clients, (item: dependency_1.xray.common.protocol.User) => item.serialize(writer));
            if (this.decryption.length)
                writer.writeString(2, this.decryption);
            if (this.fallbacks.length)
                writer.writeRepeatedMessage(3, this.fallbacks, (item: Fallback) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.clients, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.xray.common.protocol.User.deserialize(reader), dependency_1.xray.common.protocol.User));
                        break;
                    case 2:
                        message.decryption = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.fallbacks, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Fallback.deserialize(reader), Fallback));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
