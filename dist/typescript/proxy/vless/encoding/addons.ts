/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proxy/vless/encoding/addons.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.proxy.vless.encoding {
    export class Addons extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Flow?: string;
            Seed?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Flow" in data && data.Flow != undefined) {
                    this.Flow = data.Flow;
                }
                if ("Seed" in data && data.Seed != undefined) {
                    this.Seed = data.Seed;
                }
            }
        }
        get Flow() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set Flow(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Seed() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set Seed(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Flow?: string;
            Seed?: Uint8Array;
        }): Addons {
            const message = new Addons({});
            if (data.Flow != null) {
                message.Flow = data.Flow;
            }
            if (data.Seed != null) {
                message.Seed = data.Seed;
            }
            return message;
        }
        toObject() {
            const data: {
                Flow?: string;
                Seed?: Uint8Array;
            } = {};
            if (this.Flow != null) {
                data.Flow = this.Flow;
            }
            if (this.Seed != null) {
                data.Seed = this.Seed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Flow.length)
                writer.writeString(1, this.Flow);
            if (this.Seed.length)
                writer.writeBytes(2, this.Seed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Addons {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Addons();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Flow = reader.readString();
                        break;
                    case 2:
                        message.Seed = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Addons {
            return Addons.deserialize(bytes);
        }
    }
}
