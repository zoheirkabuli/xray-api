// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: proxy/shadowsocks_2022/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { IPOrDomain } from "../../common/net/address";
import { Network, networkFromJSON, networkToJSON } from "../../common/net/network";
import { User } from "../../common/protocol/user";

export const protobufPackage = "xray.proxy.shadowsocks_2022";

export interface ServerConfig {
  method: string;
  key: string;
  email: string;
  level: number;
  network: Network[];
}

export interface MultiUserServerConfig {
  method: string;
  key: string;
  users: User[];
  network: Network[];
}

export interface RelayDestination {
  key: string;
  address: IPOrDomain | undefined;
  port: number;
  email: string;
  level: number;
}

export interface RelayServerConfig {
  method: string;
  key: string;
  destinations: RelayDestination[];
  network: Network[];
}

export interface Account {
  key: string;
}

export interface ClientConfig {
  address: IPOrDomain | undefined;
  port: number;
  method: string;
  key: string;
  udpOverTcp: boolean;
  udpOverTcpVersion: number;
}

function createBaseServerConfig(): ServerConfig {
  return { method: "", key: "", email: "", level: 0, network: [] };
}

export const ServerConfig: MessageFns<ServerConfig> = {
  encode(message: ServerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== "") {
      writer.uint32(10).string(message.method);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.level !== 0) {
      writer.uint32(32).int32(message.level);
    }
    writer.uint32(42).fork();
    for (const v of message.network) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.network.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.network.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerConfig {
    return {
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      network: globalThis.Array.isArray(object?.network) ? object.network.map((e: any) => networkFromJSON(e)) : [],
    };
  },

  toJSON(message: ServerConfig): unknown {
    const obj: any = {};
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.network?.length) {
      obj.network = message.network.map((e) => networkToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerConfig>, I>>(base?: I): ServerConfig {
    return ServerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerConfig>, I>>(object: I): ServerConfig {
    const message = createBaseServerConfig();
    message.method = object.method ?? "";
    message.key = object.key ?? "";
    message.email = object.email ?? "";
    message.level = object.level ?? 0;
    message.network = object.network?.map((e) => e) || [];
    return message;
  },
};

function createBaseMultiUserServerConfig(): MultiUserServerConfig {
  return { method: "", key: "", users: [], network: [] };
}

export const MultiUserServerConfig: MessageFns<MultiUserServerConfig> = {
  encode(message: MultiUserServerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== "") {
      writer.uint32(10).string(message.method);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    for (const v of message.users) {
      User.encode(v!, writer.uint32(26).fork()).join();
    }
    writer.uint32(34).fork();
    for (const v of message.network) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiUserServerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiUserServerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.network.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.network.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiUserServerConfig {
    return {
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [],
      network: globalThis.Array.isArray(object?.network) ? object.network.map((e: any) => networkFromJSON(e)) : [],
    };
  },

  toJSON(message: MultiUserServerConfig): unknown {
    const obj: any = {};
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    if (message.network?.length) {
      obj.network = message.network.map((e) => networkToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiUserServerConfig>, I>>(base?: I): MultiUserServerConfig {
    return MultiUserServerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiUserServerConfig>, I>>(object: I): MultiUserServerConfig {
    const message = createBaseMultiUserServerConfig();
    message.method = object.method ?? "";
    message.key = object.key ?? "";
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    message.network = object.network?.map((e) => e) || [];
    return message;
  },
};

function createBaseRelayDestination(): RelayDestination {
  return { key: "", address: undefined, port: 0, email: "", level: 0 };
}

export const RelayDestination: MessageFns<RelayDestination> = {
  encode(message: RelayDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.address !== undefined) {
      IPOrDomain.encode(message.address, writer.uint32(18).fork()).join();
    }
    if (message.port !== 0) {
      writer.uint32(24).uint32(message.port);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.level !== 0) {
      writer.uint32(40).int32(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelayDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelayDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = IPOrDomain.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.port = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelayDestination {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      address: isSet(object.address) ? IPOrDomain.fromJSON(object.address) : undefined,
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
    };
  },

  toJSON(message: RelayDestination): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.address !== undefined) {
      obj.address = IPOrDomain.toJSON(message.address);
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelayDestination>, I>>(base?: I): RelayDestination {
    return RelayDestination.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelayDestination>, I>>(object: I): RelayDestination {
    const message = createBaseRelayDestination();
    message.key = object.key ?? "";
    message.address = (object.address !== undefined && object.address !== null)
      ? IPOrDomain.fromPartial(object.address)
      : undefined;
    message.port = object.port ?? 0;
    message.email = object.email ?? "";
    message.level = object.level ?? 0;
    return message;
  },
};

function createBaseRelayServerConfig(): RelayServerConfig {
  return { method: "", key: "", destinations: [], network: [] };
}

export const RelayServerConfig: MessageFns<RelayServerConfig> = {
  encode(message: RelayServerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== "") {
      writer.uint32(10).string(message.method);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    for (const v of message.destinations) {
      RelayDestination.encode(v!, writer.uint32(26).fork()).join();
    }
    writer.uint32(34).fork();
    for (const v of message.network) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelayServerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelayServerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.destinations.push(RelayDestination.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.network.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.network.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RelayServerConfig {
    return {
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      destinations: globalThis.Array.isArray(object?.destinations)
        ? object.destinations.map((e: any) => RelayDestination.fromJSON(e))
        : [],
      network: globalThis.Array.isArray(object?.network) ? object.network.map((e: any) => networkFromJSON(e)) : [],
    };
  },

  toJSON(message: RelayServerConfig): unknown {
    const obj: any = {};
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.destinations?.length) {
      obj.destinations = message.destinations.map((e) => RelayDestination.toJSON(e));
    }
    if (message.network?.length) {
      obj.network = message.network.map((e) => networkToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RelayServerConfig>, I>>(base?: I): RelayServerConfig {
    return RelayServerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RelayServerConfig>, I>>(object: I): RelayServerConfig {
    const message = createBaseRelayServerConfig();
    message.method = object.method ?? "";
    message.key = object.key ?? "";
    message.destinations = object.destinations?.map((e) => RelayDestination.fromPartial(e)) || [];
    message.network = object.network?.map((e) => e) || [];
    return message;
  },
};

function createBaseAccount(): Account {
  return { key: "" };
}

export const Account: MessageFns<Account> = {
  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Account>, I>>(base?: I): Account {
    return Account.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Account>, I>>(object: I): Account {
    const message = createBaseAccount();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseClientConfig(): ClientConfig {
  return { address: undefined, port: 0, method: "", key: "", udpOverTcp: false, udpOverTcpVersion: 0 };
}

export const ClientConfig: MessageFns<ClientConfig> = {
  encode(message: ClientConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== undefined) {
      IPOrDomain.encode(message.address, writer.uint32(10).fork()).join();
    }
    if (message.port !== 0) {
      writer.uint32(16).uint32(message.port);
    }
    if (message.method !== "") {
      writer.uint32(26).string(message.method);
    }
    if (message.key !== "") {
      writer.uint32(34).string(message.key);
    }
    if (message.udpOverTcp !== false) {
      writer.uint32(40).bool(message.udpOverTcp);
    }
    if (message.udpOverTcpVersion !== 0) {
      writer.uint32(48).uint32(message.udpOverTcpVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = IPOrDomain.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.port = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.udpOverTcp = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.udpOverTcpVersion = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConfig {
    return {
      address: isSet(object.address) ? IPOrDomain.fromJSON(object.address) : undefined,
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      udpOverTcp: isSet(object.udpOverTcp) ? globalThis.Boolean(object.udpOverTcp) : false,
      udpOverTcpVersion: isSet(object.udpOverTcpVersion) ? globalThis.Number(object.udpOverTcpVersion) : 0,
    };
  },

  toJSON(message: ClientConfig): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = IPOrDomain.toJSON(message.address);
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.udpOverTcp !== false) {
      obj.udpOverTcp = message.udpOverTcp;
    }
    if (message.udpOverTcpVersion !== 0) {
      obj.udpOverTcpVersion = Math.round(message.udpOverTcpVersion);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientConfig>, I>>(base?: I): ClientConfig {
    return ClientConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientConfig>, I>>(object: I): ClientConfig {
    const message = createBaseClientConfig();
    message.address = (object.address !== undefined && object.address !== null)
      ? IPOrDomain.fromPartial(object.address)
      : undefined;
    message.port = object.port ?? 0;
    message.method = object.method ?? "";
    message.key = object.key ?? "";
    message.udpOverTcp = object.udpOverTcp ?? false;
    message.udpOverTcpVersion = object.udpOverTcpVersion ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
