/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proxy/shadowsocks_2022/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/net/network";
import * as dependency_2 from "./../../common/net/address";
import * as dependency_3 from "./../../common/protocol/user";
import * as pb_1 from "google-protobuf";
export namespace xray.proxy.shadowsocks_2022 {
    export class ServerConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            method?: string;
            key?: string;
            email?: string;
            level?: number;
            network?: dependency_1.xray.common.net.Network[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("network" in data && data.network != undefined) {
                    this.network = data.network;
                }
            }
        }
        get method() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set method(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get network() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as dependency_1.xray.common.net.Network[];
        }
        set network(value: dependency_1.xray.common.net.Network[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            method?: string;
            key?: string;
            email?: string;
            level?: number;
            network?: dependency_1.xray.common.net.Network[];
        }): ServerConfig {
            const message = new ServerConfig({});
            if (data.method != null) {
                message.method = data.method;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.network != null) {
                message.network = data.network;
            }
            return message;
        }
        toObject() {
            const data: {
                method?: string;
                key?: string;
                email?: string;
                level?: number;
                network?: dependency_1.xray.common.net.Network[];
            } = {};
            if (this.method != null) {
                data.method = this.method;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.network != null) {
                data.network = this.network;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.method.length)
                writer.writeString(1, this.method);
            if (this.key.length)
                writer.writeString(2, this.key);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.level != 0)
                writer.writeInt32(4, this.level);
            if (this.network.length)
                writer.writePackedEnum(5, this.network);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.method = reader.readString();
                        break;
                    case 2:
                        message.key = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.level = reader.readInt32();
                        break;
                    case 5:
                        message.network = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerConfig {
            return ServerConfig.deserialize(bytes);
        }
    }
    export class MultiUserServerConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            method?: string;
            key?: string;
            users?: dependency_3.xray.common.protocol.User[];
            network?: dependency_1.xray.common.net.Network[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
                if ("network" in data && data.network != undefined) {
                    this.network = data.network;
                }
            }
        }
        get method() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set method(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.xray.common.protocol.User, 3) as dependency_3.xray.common.protocol.User[];
        }
        set users(value: dependency_3.xray.common.protocol.User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get network() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as dependency_1.xray.common.net.Network[];
        }
        set network(value: dependency_1.xray.common.net.Network[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            method?: string;
            key?: string;
            users?: ReturnType<typeof dependency_3.xray.common.protocol.User.prototype.toObject>[];
            network?: dependency_1.xray.common.net.Network[];
        }): MultiUserServerConfig {
            const message = new MultiUserServerConfig({});
            if (data.method != null) {
                message.method = data.method;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.users != null) {
                message.users = data.users.map(item => dependency_3.xray.common.protocol.User.fromObject(item));
            }
            if (data.network != null) {
                message.network = data.network;
            }
            return message;
        }
        toObject() {
            const data: {
                method?: string;
                key?: string;
                users?: ReturnType<typeof dependency_3.xray.common.protocol.User.prototype.toObject>[];
                network?: dependency_1.xray.common.net.Network[];
            } = {};
            if (this.method != null) {
                data.method = this.method;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.users != null) {
                data.users = this.users.map((item: dependency_3.xray.common.protocol.User) => item.toObject());
            }
            if (this.network != null) {
                data.network = this.network;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.method.length)
                writer.writeString(1, this.method);
            if (this.key.length)
                writer.writeString(2, this.key);
            if (this.users.length)
                writer.writeRepeatedMessage(3, this.users, (item: dependency_3.xray.common.protocol.User) => item.serialize(writer));
            if (this.network.length)
                writer.writePackedEnum(4, this.network);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiUserServerConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiUserServerConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.method = reader.readString();
                        break;
                    case 2:
                        message.key = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.xray.common.protocol.User.deserialize(reader), dependency_3.xray.common.protocol.User));
                        break;
                    case 4:
                        message.network = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultiUserServerConfig {
            return MultiUserServerConfig.deserialize(bytes);
        }
    }
    export class RelayDestination extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            address?: dependency_2.xray.common.net.IPOrDomain;
            port?: number;
            email?: string;
            level?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getWrapperField(this, dependency_2.xray.common.net.IPOrDomain, 2) as dependency_2.xray.common.net.IPOrDomain;
        }
        set address(value: dependency_2.xray.common.net.IPOrDomain) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_address() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            key?: string;
            address?: ReturnType<typeof dependency_2.xray.common.net.IPOrDomain.prototype.toObject>;
            port?: number;
            email?: string;
            level?: number;
        }): RelayDestination {
            const message = new RelayDestination({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.address != null) {
                message.address = dependency_2.xray.common.net.IPOrDomain.fromObject(data.address);
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.level != null) {
                message.level = data.level;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                address?: ReturnType<typeof dependency_2.xray.common.net.IPOrDomain.prototype.toObject>;
                port?: number;
                email?: string;
                level?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.address != null) {
                data.address = this.address.toObject();
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.level != null) {
                data.level = this.level;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.has_address)
                writer.writeMessage(2, this.address, () => this.address.serialize(writer));
            if (this.port != 0)
                writer.writeUint32(3, this.port);
            if (this.email.length)
                writer.writeString(4, this.email);
            if (this.level != 0)
                writer.writeInt32(5, this.level);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RelayDestination {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RelayDestination();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.address, () => message.address = dependency_2.xray.common.net.IPOrDomain.deserialize(reader));
                        break;
                    case 3:
                        message.port = reader.readUint32();
                        break;
                    case 4:
                        message.email = reader.readString();
                        break;
                    case 5:
                        message.level = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RelayDestination {
            return RelayDestination.deserialize(bytes);
        }
    }
    export class RelayServerConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            method?: string;
            key?: string;
            destinations?: RelayDestination[];
            network?: dependency_1.xray.common.net.Network[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("destinations" in data && data.destinations != undefined) {
                    this.destinations = data.destinations;
                }
                if ("network" in data && data.network != undefined) {
                    this.network = data.network;
                }
            }
        }
        get method() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set method(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get destinations() {
            return pb_1.Message.getRepeatedWrapperField(this, RelayDestination, 3) as RelayDestination[];
        }
        set destinations(value: RelayDestination[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get network() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as dependency_1.xray.common.net.Network[];
        }
        set network(value: dependency_1.xray.common.net.Network[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            method?: string;
            key?: string;
            destinations?: ReturnType<typeof RelayDestination.prototype.toObject>[];
            network?: dependency_1.xray.common.net.Network[];
        }): RelayServerConfig {
            const message = new RelayServerConfig({});
            if (data.method != null) {
                message.method = data.method;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.destinations != null) {
                message.destinations = data.destinations.map(item => RelayDestination.fromObject(item));
            }
            if (data.network != null) {
                message.network = data.network;
            }
            return message;
        }
        toObject() {
            const data: {
                method?: string;
                key?: string;
                destinations?: ReturnType<typeof RelayDestination.prototype.toObject>[];
                network?: dependency_1.xray.common.net.Network[];
            } = {};
            if (this.method != null) {
                data.method = this.method;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.destinations != null) {
                data.destinations = this.destinations.map((item: RelayDestination) => item.toObject());
            }
            if (this.network != null) {
                data.network = this.network;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.method.length)
                writer.writeString(1, this.method);
            if (this.key.length)
                writer.writeString(2, this.key);
            if (this.destinations.length)
                writer.writeRepeatedMessage(3, this.destinations, (item: RelayDestination) => item.serialize(writer));
            if (this.network.length)
                writer.writePackedEnum(4, this.network);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RelayServerConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RelayServerConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.method = reader.readString();
                        break;
                    case 2:
                        message.key = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.destinations, () => pb_1.Message.addToRepeatedWrapperField(message, 3, RelayDestination.deserialize(reader), RelayDestination));
                        break;
                    case 4:
                        message.network = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RelayServerConfig {
            return RelayServerConfig.deserialize(bytes);
        }
    }
    export class Account extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: string;
        }): Account {
            const message = new Account({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Account {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Account();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Account {
            return Account.deserialize(bytes);
        }
    }
    export class ClientConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: dependency_2.xray.common.net.IPOrDomain;
            port?: number;
            method?: string;
            key?: string;
            udp_over_tcp?: boolean;
            udp_over_tcp_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("udp_over_tcp" in data && data.udp_over_tcp != undefined) {
                    this.udp_over_tcp = data.udp_over_tcp;
                }
                if ("udp_over_tcp_version" in data && data.udp_over_tcp_version != undefined) {
                    this.udp_over_tcp_version = data.udp_over_tcp_version;
                }
            }
        }
        get address() {
            return pb_1.Message.getWrapperField(this, dependency_2.xray.common.net.IPOrDomain, 1) as dependency_2.xray.common.net.IPOrDomain;
        }
        set address(value: dependency_2.xray.common.net.IPOrDomain) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_address() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get method() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set method(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get udp_over_tcp() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set udp_over_tcp(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get udp_over_tcp_version() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set udp_over_tcp_version(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            address?: ReturnType<typeof dependency_2.xray.common.net.IPOrDomain.prototype.toObject>;
            port?: number;
            method?: string;
            key?: string;
            udp_over_tcp?: boolean;
            udp_over_tcp_version?: number;
        }): ClientConfig {
            const message = new ClientConfig({});
            if (data.address != null) {
                message.address = dependency_2.xray.common.net.IPOrDomain.fromObject(data.address);
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.method != null) {
                message.method = data.method;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.udp_over_tcp != null) {
                message.udp_over_tcp = data.udp_over_tcp;
            }
            if (data.udp_over_tcp_version != null) {
                message.udp_over_tcp_version = data.udp_over_tcp_version;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: ReturnType<typeof dependency_2.xray.common.net.IPOrDomain.prototype.toObject>;
                port?: number;
                method?: string;
                key?: string;
                udp_over_tcp?: boolean;
                udp_over_tcp_version?: number;
            } = {};
            if (this.address != null) {
                data.address = this.address.toObject();
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.method != null) {
                data.method = this.method;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.udp_over_tcp != null) {
                data.udp_over_tcp = this.udp_over_tcp;
            }
            if (this.udp_over_tcp_version != null) {
                data.udp_over_tcp_version = this.udp_over_tcp_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_address)
                writer.writeMessage(1, this.address, () => this.address.serialize(writer));
            if (this.port != 0)
                writer.writeUint32(2, this.port);
            if (this.method.length)
                writer.writeString(3, this.method);
            if (this.key.length)
                writer.writeString(4, this.key);
            if (this.udp_over_tcp != false)
                writer.writeBool(5, this.udp_over_tcp);
            if (this.udp_over_tcp_version != 0)
                writer.writeUint32(6, this.udp_over_tcp_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.address, () => message.address = dependency_2.xray.common.net.IPOrDomain.deserialize(reader));
                        break;
                    case 2:
                        message.port = reader.readUint32();
                        break;
                    case 3:
                        message.method = reader.readString();
                        break;
                    case 4:
                        message.key = reader.readString();
                        break;
                    case 5:
                        message.udp_over_tcp = reader.readBool();
                        break;
                    case 6:
                        message.udp_over_tcp_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientConfig {
            return ClientConfig.deserialize(bytes);
        }
    }
}
