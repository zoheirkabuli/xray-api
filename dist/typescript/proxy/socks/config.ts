// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: proxy/socks/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { IPOrDomain } from "../../common/net/address";
import { ServerEndpoint } from "../../common/protocol/server_spec";

export const protobufPackage = "xray.proxy.socks";

/** AuthType is the authentication type of Socks proxy. */
export enum AuthType {
  /** NO_AUTH - NO_AUTH is for anonymous authentication. */
  NO_AUTH = 0,
  /** PASSWORD - PASSWORD is for username/password authentication. */
  PASSWORD = 1,
  UNRECOGNIZED = -1,
}

export function authTypeFromJSON(object: any): AuthType {
  switch (object) {
    case 0:
    case "NO_AUTH":
      return AuthType.NO_AUTH;
    case 1:
    case "PASSWORD":
      return AuthType.PASSWORD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AuthType.UNRECOGNIZED;
  }
}

export function authTypeToJSON(object: AuthType): string {
  switch (object) {
    case AuthType.NO_AUTH:
      return "NO_AUTH";
    case AuthType.PASSWORD:
      return "PASSWORD";
    case AuthType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Account represents a Socks account. */
export interface Account {
  username: string;
  password: string;
}

/** ServerConfig is the protobuf config for Socks server. */
export interface ServerConfig {
  authType: AuthType;
  accounts: { [key: string]: string };
  address: IPOrDomain | undefined;
  udpEnabled: boolean;
  userLevel: number;
}

export interface ServerConfig_AccountsEntry {
  key: string;
  value: string;
}

/** ClientConfig is the protobuf config for Socks client. */
export interface ClientConfig {
  /** Sever is a list of Socks server addresses. */
  server: ServerEndpoint[];
}

function createBaseAccount(): Account {
  return { username: "", password: "" };
}

export const Account: MessageFns<Account> = {
  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Account>, I>>(base?: I): Account {
    return Account.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Account>, I>>(object: I): Account {
    const message = createBaseAccount();
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseServerConfig(): ServerConfig {
  return { authType: 0, accounts: {}, address: undefined, udpEnabled: false, userLevel: 0 };
}

export const ServerConfig: MessageFns<ServerConfig> = {
  encode(message: ServerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authType !== 0) {
      writer.uint32(8).int32(message.authType);
    }
    Object.entries(message.accounts).forEach(([key, value]) => {
      ServerConfig_AccountsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.address !== undefined) {
      IPOrDomain.encode(message.address, writer.uint32(26).fork()).join();
    }
    if (message.udpEnabled !== false) {
      writer.uint32(32).bool(message.udpEnabled);
    }
    if (message.userLevel !== 0) {
      writer.uint32(48).uint32(message.userLevel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.authType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = ServerConfig_AccountsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.accounts[entry2.key] = entry2.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.address = IPOrDomain.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.udpEnabled = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.userLevel = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerConfig {
    return {
      authType: isSet(object.authType) ? authTypeFromJSON(object.authType) : 0,
      accounts: isObject(object.accounts)
        ? Object.entries(object.accounts).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      address: isSet(object.address) ? IPOrDomain.fromJSON(object.address) : undefined,
      udpEnabled: isSet(object.udpEnabled) ? globalThis.Boolean(object.udpEnabled) : false,
      userLevel: isSet(object.userLevel) ? globalThis.Number(object.userLevel) : 0,
    };
  },

  toJSON(message: ServerConfig): unknown {
    const obj: any = {};
    if (message.authType !== 0) {
      obj.authType = authTypeToJSON(message.authType);
    }
    if (message.accounts) {
      const entries = Object.entries(message.accounts);
      if (entries.length > 0) {
        obj.accounts = {};
        entries.forEach(([k, v]) => {
          obj.accounts[k] = v;
        });
      }
    }
    if (message.address !== undefined) {
      obj.address = IPOrDomain.toJSON(message.address);
    }
    if (message.udpEnabled !== false) {
      obj.udpEnabled = message.udpEnabled;
    }
    if (message.userLevel !== 0) {
      obj.userLevel = Math.round(message.userLevel);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerConfig>, I>>(base?: I): ServerConfig {
    return ServerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerConfig>, I>>(object: I): ServerConfig {
    const message = createBaseServerConfig();
    message.authType = object.authType ?? 0;
    message.accounts = Object.entries(object.accounts ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.address = (object.address !== undefined && object.address !== null)
      ? IPOrDomain.fromPartial(object.address)
      : undefined;
    message.udpEnabled = object.udpEnabled ?? false;
    message.userLevel = object.userLevel ?? 0;
    return message;
  },
};

function createBaseServerConfig_AccountsEntry(): ServerConfig_AccountsEntry {
  return { key: "", value: "" };
}

export const ServerConfig_AccountsEntry: MessageFns<ServerConfig_AccountsEntry> = {
  encode(message: ServerConfig_AccountsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerConfig_AccountsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerConfig_AccountsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerConfig_AccountsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ServerConfig_AccountsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerConfig_AccountsEntry>, I>>(base?: I): ServerConfig_AccountsEntry {
    return ServerConfig_AccountsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerConfig_AccountsEntry>, I>>(object: I): ServerConfig_AccountsEntry {
    const message = createBaseServerConfig_AccountsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseClientConfig(): ClientConfig {
  return { server: [] };
}

export const ClientConfig: MessageFns<ClientConfig> = {
  encode(message: ClientConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.server) {
      ServerEndpoint.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.server.push(ServerEndpoint.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConfig {
    return {
      server: globalThis.Array.isArray(object?.server) ? object.server.map((e: any) => ServerEndpoint.fromJSON(e)) : [],
    };
  },

  toJSON(message: ClientConfig): unknown {
    const obj: any = {};
    if (message.server?.length) {
      obj.server = message.server.map((e) => ServerEndpoint.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientConfig>, I>>(base?: I): ClientConfig {
    return ClientConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientConfig>, I>>(object: I): ClientConfig {
    const message = createBaseClientConfig();
    message.server = object.server?.map((e) => ServerEndpoint.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
