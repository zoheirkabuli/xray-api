/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proxy/shadowsocks/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/net/network";
import * as dependency_2 from "./../../common/protocol/user";
import * as dependency_3 from "./../../common/protocol/server_spec";
import * as pb_1 from "google-protobuf";
export namespace xray.proxy.shadowsocks {
    export enum CipherType {
        UNKNOWN = 0,
        AES_128_GCM = 5,
        AES_256_GCM = 6,
        CHACHA20_POLY1305 = 7,
        XCHACHA20_POLY1305 = 8,
        NONE = 9
    }
    export class Account extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            password?: string;
            cipher_type?: CipherType;
            iv_check?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("cipher_type" in data && data.cipher_type != undefined) {
                    this.cipher_type = data.cipher_type;
                }
                if ("iv_check" in data && data.iv_check != undefined) {
                    this.iv_check = data.iv_check;
                }
            }
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get cipher_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, CipherType.UNKNOWN) as CipherType;
        }
        set cipher_type(value: CipherType) {
            pb_1.Message.setField(this, 2, value);
        }
        get iv_check() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set iv_check(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            password?: string;
            cipher_type?: CipherType;
            iv_check?: boolean;
        }): Account {
            const message = new Account({});
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.cipher_type != null) {
                message.cipher_type = data.cipher_type;
            }
            if (data.iv_check != null) {
                message.iv_check = data.iv_check;
            }
            return message;
        }
        toObject() {
            const data: {
                password?: string;
                cipher_type?: CipherType;
                iv_check?: boolean;
            } = {};
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.cipher_type != null) {
                data.cipher_type = this.cipher_type;
            }
            if (this.iv_check != null) {
                data.iv_check = this.iv_check;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.password.length)
                writer.writeString(1, this.password);
            if (this.cipher_type != CipherType.UNKNOWN)
                writer.writeEnum(2, this.cipher_type);
            if (this.iv_check != false)
                writer.writeBool(3, this.iv_check);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Account {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Account();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.password = reader.readString();
                        break;
                    case 2:
                        message.cipher_type = reader.readEnum();
                        break;
                    case 3:
                        message.iv_check = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Account {
            return Account.deserialize(bytes);
        }
    }
    export class ServerConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: dependency_2.xray.common.protocol.User[];
            network?: dependency_1.xray.common.net.Network[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
                if ("network" in data && data.network != undefined) {
                    this.network = data.network;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.xray.common.protocol.User, 1) as dependency_2.xray.common.protocol.User[];
        }
        set users(value: dependency_2.xray.common.protocol.User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get network() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as dependency_1.xray.common.net.Network[];
        }
        set network(value: dependency_1.xray.common.net.Network[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof dependency_2.xray.common.protocol.User.prototype.toObject>[];
            network?: dependency_1.xray.common.net.Network[];
        }): ServerConfig {
            const message = new ServerConfig({});
            if (data.users != null) {
                message.users = data.users.map(item => dependency_2.xray.common.protocol.User.fromObject(item));
            }
            if (data.network != null) {
                message.network = data.network;
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof dependency_2.xray.common.protocol.User.prototype.toObject>[];
                network?: dependency_1.xray.common.net.Network[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: dependency_2.xray.common.protocol.User) => item.toObject());
            }
            if (this.network != null) {
                data.network = this.network;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: dependency_2.xray.common.protocol.User) => item.serialize(writer));
            if (this.network.length)
                writer.writePackedEnum(2, this.network);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.xray.common.protocol.User.deserialize(reader), dependency_2.xray.common.protocol.User));
                        break;
                    case 2:
                        message.network = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerConfig {
            return ServerConfig.deserialize(bytes);
        }
    }
    export class ClientConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            server?: dependency_3.xray.common.protocol.ServerEndpoint[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("server" in data && data.server != undefined) {
                    this.server = data.server;
                }
            }
        }
        get server() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.xray.common.protocol.ServerEndpoint, 1) as dependency_3.xray.common.protocol.ServerEndpoint[];
        }
        set server(value: dependency_3.xray.common.protocol.ServerEndpoint[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            server?: ReturnType<typeof dependency_3.xray.common.protocol.ServerEndpoint.prototype.toObject>[];
        }): ClientConfig {
            const message = new ClientConfig({});
            if (data.server != null) {
                message.server = data.server.map(item => dependency_3.xray.common.protocol.ServerEndpoint.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                server?: ReturnType<typeof dependency_3.xray.common.protocol.ServerEndpoint.prototype.toObject>[];
            } = {};
            if (this.server != null) {
                data.server = this.server.map((item: dependency_3.xray.common.protocol.ServerEndpoint) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.server.length)
                writer.writeRepeatedMessage(1, this.server, (item: dependency_3.xray.common.protocol.ServerEndpoint) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.server, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.xray.common.protocol.ServerEndpoint.deserialize(reader), dependency_3.xray.common.protocol.ServerEndpoint));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientConfig {
            return ClientConfig.deserialize(bytes);
        }
    }
}
