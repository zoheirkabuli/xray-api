/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proxy/dokodemo/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/net/address";
import * as dependency_2 from "./../../common/net/network";
import * as pb_1 from "google-protobuf";
export namespace xray.proxy.dokodemo {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: dependency_1.xray.common.net.IPOrDomain;
            port?: number;
            networks?: dependency_2.xray.common.net.Network[];
            follow_redirect?: boolean;
            user_level?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("networks" in data && data.networks != undefined) {
                    this.networks = data.networks;
                }
                if ("follow_redirect" in data && data.follow_redirect != undefined) {
                    this.follow_redirect = data.follow_redirect;
                }
                if ("user_level" in data && data.user_level != undefined) {
                    this.user_level = data.user_level;
                }
            }
        }
        get address() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.net.IPOrDomain, 1) as dependency_1.xray.common.net.IPOrDomain;
        }
        set address(value: dependency_1.xray.common.net.IPOrDomain) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_address() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get networks() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as dependency_2.xray.common.net.Network[];
        }
        set networks(value: dependency_2.xray.common.net.Network[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get follow_redirect() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set follow_redirect(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get user_level() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set user_level(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            address?: ReturnType<typeof dependency_1.xray.common.net.IPOrDomain.prototype.toObject>;
            port?: number;
            networks?: dependency_2.xray.common.net.Network[];
            follow_redirect?: boolean;
            user_level?: number;
        }): Config {
            const message = new Config({});
            if (data.address != null) {
                message.address = dependency_1.xray.common.net.IPOrDomain.fromObject(data.address);
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.networks != null) {
                message.networks = data.networks;
            }
            if (data.follow_redirect != null) {
                message.follow_redirect = data.follow_redirect;
            }
            if (data.user_level != null) {
                message.user_level = data.user_level;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: ReturnType<typeof dependency_1.xray.common.net.IPOrDomain.prototype.toObject>;
                port?: number;
                networks?: dependency_2.xray.common.net.Network[];
                follow_redirect?: boolean;
                user_level?: number;
            } = {};
            if (this.address != null) {
                data.address = this.address.toObject();
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.networks != null) {
                data.networks = this.networks;
            }
            if (this.follow_redirect != null) {
                data.follow_redirect = this.follow_redirect;
            }
            if (this.user_level != null) {
                data.user_level = this.user_level;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_address)
                writer.writeMessage(1, this.address, () => this.address.serialize(writer));
            if (this.port != 0)
                writer.writeUint32(2, this.port);
            if (this.networks.length)
                writer.writePackedEnum(7, this.networks);
            if (this.follow_redirect != false)
                writer.writeBool(5, this.follow_redirect);
            if (this.user_level != 0)
                writer.writeUint32(6, this.user_level);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.address, () => message.address = dependency_1.xray.common.net.IPOrDomain.deserialize(reader));
                        break;
                    case 2:
                        message.port = reader.readUint32();
                        break;
                    case 7:
                        message.networks = reader.readPackedEnum();
                        break;
                    case 5:
                        message.follow_redirect = reader.readBool();
                        break;
                    case 6:
                        message.user_level = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
