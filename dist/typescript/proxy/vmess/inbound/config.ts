/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proxy/vmess/inbound/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../common/protocol/user";
import * as pb_1 from "google-protobuf";
export namespace xray.proxy.vmess.inbound {
    export class DetourConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            to?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
            }
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            to?: string;
        }): DetourConfig {
            const message = new DetourConfig({});
            if (data.to != null) {
                message.to = data.to;
            }
            return message;
        }
        toObject() {
            const data: {
                to?: string;
            } = {};
            if (this.to != null) {
                data.to = this.to;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.to.length)
                writer.writeString(1, this.to);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DetourConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DetourConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.to = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DetourConfig {
            return DetourConfig.deserialize(bytes);
        }
    }
    export class DefaultConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            level?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
            }
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            level?: number;
        }): DefaultConfig {
            const message = new DefaultConfig({});
            if (data.level != null) {
                message.level = data.level;
            }
            return message;
        }
        toObject() {
            const data: {
                level?: number;
            } = {};
            if (this.level != null) {
                data.level = this.level;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.level != 0)
                writer.writeUint32(2, this.level);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DefaultConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DefaultConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.level = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DefaultConfig {
            return DefaultConfig.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: dependency_1.xray.common.protocol.User[];
            default?: DefaultConfig;
            detour?: DetourConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("default" in data && data.default != undefined) {
                    this.default = data.default;
                }
                if ("detour" in data && data.detour != undefined) {
                    this.detour = data.detour;
                }
            }
        }
        get user() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.xray.common.protocol.User, 1) as dependency_1.xray.common.protocol.User[];
        }
        set user(value: dependency_1.xray.common.protocol.User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get default() {
            return pb_1.Message.getWrapperField(this, DefaultConfig, 2) as DefaultConfig;
        }
        set default(value: DefaultConfig) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_default() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get detour() {
            return pb_1.Message.getWrapperField(this, DetourConfig, 3) as DetourConfig;
        }
        set detour(value: DetourConfig) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_detour() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof dependency_1.xray.common.protocol.User.prototype.toObject>[];
            default?: ReturnType<typeof DefaultConfig.prototype.toObject>;
            detour?: ReturnType<typeof DetourConfig.prototype.toObject>;
        }): Config {
            const message = new Config({});
            if (data.user != null) {
                message.user = data.user.map(item => dependency_1.xray.common.protocol.User.fromObject(item));
            }
            if (data.default != null) {
                message.default = DefaultConfig.fromObject(data.default);
            }
            if (data.detour != null) {
                message.detour = DetourConfig.fromObject(data.detour);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof dependency_1.xray.common.protocol.User.prototype.toObject>[];
                default?: ReturnType<typeof DefaultConfig.prototype.toObject>;
                detour?: ReturnType<typeof DetourConfig.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.map((item: dependency_1.xray.common.protocol.User) => item.toObject());
            }
            if (this.default != null) {
                data.default = this.default.toObject();
            }
            if (this.detour != null) {
                data.detour = this.detour.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user.length)
                writer.writeRepeatedMessage(1, this.user, (item: dependency_1.xray.common.protocol.User) => item.serialize(writer));
            if (this.has_default)
                writer.writeMessage(2, this.default, () => this.default.serialize(writer));
            if (this.has_detour)
                writer.writeMessage(3, this.detour, () => this.detour.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.xray.common.protocol.User.deserialize(reader), dependency_1.xray.common.protocol.User));
                        break;
                    case 2:
                        reader.readMessage(message.default, () => message.default = DefaultConfig.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.detour, () => message.detour = DetourConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
