/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proxy/vmess/account.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/protocol/headers";
import * as pb_1 from "google-protobuf";
export namespace xray.proxy.vmess {
    export class Account extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            security_settings?: dependency_1.xray.common.protocol.SecurityConfig;
            tests_enabled?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("security_settings" in data && data.security_settings != undefined) {
                    this.security_settings = data.security_settings;
                }
                if ("tests_enabled" in data && data.tests_enabled != undefined) {
                    this.tests_enabled = data.tests_enabled;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get security_settings() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.protocol.SecurityConfig, 3) as dependency_1.xray.common.protocol.SecurityConfig;
        }
        set security_settings(value: dependency_1.xray.common.protocol.SecurityConfig) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_security_settings() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get tests_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set tests_enabled(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            security_settings?: ReturnType<typeof dependency_1.xray.common.protocol.SecurityConfig.prototype.toObject>;
            tests_enabled?: string;
        }): Account {
            const message = new Account({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.security_settings != null) {
                message.security_settings = dependency_1.xray.common.protocol.SecurityConfig.fromObject(data.security_settings);
            }
            if (data.tests_enabled != null) {
                message.tests_enabled = data.tests_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                security_settings?: ReturnType<typeof dependency_1.xray.common.protocol.SecurityConfig.prototype.toObject>;
                tests_enabled?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.security_settings != null) {
                data.security_settings = this.security_settings.toObject();
            }
            if (this.tests_enabled != null) {
                data.tests_enabled = this.tests_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.has_security_settings)
                writer.writeMessage(3, this.security_settings, () => this.security_settings.serialize(writer));
            if (this.tests_enabled.length)
                writer.writeString(4, this.tests_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Account {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Account();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.security_settings, () => message.security_settings = dependency_1.xray.common.protocol.SecurityConfig.deserialize(reader));
                        break;
                    case 4:
                        message.tests_enabled = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Account {
            return Account.deserialize(bytes);
        }
    }
}
