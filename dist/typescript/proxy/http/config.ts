/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proxy/http/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/protocol/server_spec";
import * as pb_1 from "google-protobuf";
export namespace xray.proxy.http {
    export class Account extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
        }): Account {
            const message = new Account({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Account {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Account();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Account {
            return Account.deserialize(bytes);
        }
    }
    export class ServerConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accounts?: Map<string, string>;
            allow_transparent?: boolean;
            user_level?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accounts" in data && data.accounts != undefined) {
                    this.accounts = data.accounts;
                }
                if ("allow_transparent" in data && data.allow_transparent != undefined) {
                    this.allow_transparent = data.allow_transparent;
                }
                if ("user_level" in data && data.user_level != undefined) {
                    this.user_level = data.user_level;
                }
            }
            if (!this.accounts)
                this.accounts = new Map();
        }
        get accounts() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set accounts(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get allow_transparent() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set allow_transparent(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_level() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set user_level(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            accounts?: {
                [key: string]: string;
            };
            allow_transparent?: boolean;
            user_level?: number;
        }): ServerConfig {
            const message = new ServerConfig({});
            if (typeof data.accounts == "object") {
                message.accounts = new Map(Object.entries(data.accounts));
            }
            if (data.allow_transparent != null) {
                message.allow_transparent = data.allow_transparent;
            }
            if (data.user_level != null) {
                message.user_level = data.user_level;
            }
            return message;
        }
        toObject() {
            const data: {
                accounts?: {
                    [key: string]: string;
                };
                allow_transparent?: boolean;
                user_level?: number;
            } = {};
            if (this.accounts != null) {
                data.accounts = (Object.fromEntries)(this.accounts);
            }
            if (this.allow_transparent != null) {
                data.allow_transparent = this.allow_transparent;
            }
            if (this.user_level != null) {
                data.user_level = this.user_level;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.accounts) {
                writer.writeMessage(2, this.accounts, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.allow_transparent != false)
                writer.writeBool(3, this.allow_transparent);
            if (this.user_level != 0)
                writer.writeUint32(4, this.user_level);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.accounts as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        message.allow_transparent = reader.readBool();
                        break;
                    case 4:
                        message.user_level = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerConfig {
            return ServerConfig.deserialize(bytes);
        }
    }
    export class Header extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: string;
            value?: string;
        }): Header {
            const message = new Header({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Header {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Header();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Header {
            return Header.deserialize(bytes);
        }
    }
    export class ClientConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            server?: dependency_1.xray.common.protocol.ServerEndpoint[];
            header?: Header[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("server" in data && data.server != undefined) {
                    this.server = data.server;
                }
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get server() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.xray.common.protocol.ServerEndpoint, 1) as dependency_1.xray.common.protocol.ServerEndpoint[];
        }
        set server(value: dependency_1.xray.common.protocol.ServerEndpoint[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get header() {
            return pb_1.Message.getRepeatedWrapperField(this, Header, 2) as Header[];
        }
        set header(value: Header[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            server?: ReturnType<typeof dependency_1.xray.common.protocol.ServerEndpoint.prototype.toObject>[];
            header?: ReturnType<typeof Header.prototype.toObject>[];
        }): ClientConfig {
            const message = new ClientConfig({});
            if (data.server != null) {
                message.server = data.server.map(item => dependency_1.xray.common.protocol.ServerEndpoint.fromObject(item));
            }
            if (data.header != null) {
                message.header = data.header.map(item => Header.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                server?: ReturnType<typeof dependency_1.xray.common.protocol.ServerEndpoint.prototype.toObject>[];
                header?: ReturnType<typeof Header.prototype.toObject>[];
            } = {};
            if (this.server != null) {
                data.server = this.server.map((item: dependency_1.xray.common.protocol.ServerEndpoint) => item.toObject());
            }
            if (this.header != null) {
                data.header = this.header.map((item: Header) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.server.length)
                writer.writeRepeatedMessage(1, this.server, (item: dependency_1.xray.common.protocol.ServerEndpoint) => item.serialize(writer));
            if (this.header.length)
                writer.writeRepeatedMessage(2, this.header, (item: Header) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.server, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.xray.common.protocol.ServerEndpoint.deserialize(reader), dependency_1.xray.common.protocol.ServerEndpoint));
                        break;
                    case 2:
                        reader.readMessage(message.header, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Header.deserialize(reader), Header));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientConfig {
            return ClientConfig.deserialize(bytes);
        }
    }
}
