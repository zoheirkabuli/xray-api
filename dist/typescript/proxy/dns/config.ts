/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proxy/dns/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/net/destination";
import * as pb_1 from "google-protobuf";
export namespace xray.proxy.dns {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            server?: dependency_1.xray.common.net.Endpoint;
            user_level?: number;
            non_IP_query?: string;
            block_types?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("server" in data && data.server != undefined) {
                    this.server = data.server;
                }
                if ("user_level" in data && data.user_level != undefined) {
                    this.user_level = data.user_level;
                }
                if ("non_IP_query" in data && data.non_IP_query != undefined) {
                    this.non_IP_query = data.non_IP_query;
                }
                if ("block_types" in data && data.block_types != undefined) {
                    this.block_types = data.block_types;
                }
            }
        }
        get server() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.net.Endpoint, 1) as dependency_1.xray.common.net.Endpoint;
        }
        set server(value: dependency_1.xray.common.net.Endpoint) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_server() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get user_level() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set user_level(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get non_IP_query() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set non_IP_query(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get block_types() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set block_types(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            server?: ReturnType<typeof dependency_1.xray.common.net.Endpoint.prototype.toObject>;
            user_level?: number;
            non_IP_query?: string;
            block_types?: number[];
        }): Config {
            const message = new Config({});
            if (data.server != null) {
                message.server = dependency_1.xray.common.net.Endpoint.fromObject(data.server);
            }
            if (data.user_level != null) {
                message.user_level = data.user_level;
            }
            if (data.non_IP_query != null) {
                message.non_IP_query = data.non_IP_query;
            }
            if (data.block_types != null) {
                message.block_types = data.block_types;
            }
            return message;
        }
        toObject() {
            const data: {
                server?: ReturnType<typeof dependency_1.xray.common.net.Endpoint.prototype.toObject>;
                user_level?: number;
                non_IP_query?: string;
                block_types?: number[];
            } = {};
            if (this.server != null) {
                data.server = this.server.toObject();
            }
            if (this.user_level != null) {
                data.user_level = this.user_level;
            }
            if (this.non_IP_query != null) {
                data.non_IP_query = this.non_IP_query;
            }
            if (this.block_types != null) {
                data.block_types = this.block_types;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_server)
                writer.writeMessage(1, this.server, () => this.server.serialize(writer));
            if (this.user_level != 0)
                writer.writeUint32(2, this.user_level);
            if (this.non_IP_query.length)
                writer.writeString(3, this.non_IP_query);
            if (this.block_types.length)
                writer.writePackedInt32(4, this.block_types);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.server, () => message.server = dependency_1.xray.common.net.Endpoint.deserialize(reader));
                        break;
                    case 2:
                        message.user_level = reader.readUint32();
                        break;
                    case 3:
                        message.non_IP_query = reader.readString();
                        break;
                    case 4:
                        message.block_types = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
