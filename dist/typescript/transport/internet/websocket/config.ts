/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: transport/internet/websocket/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.transport.internet.websocket {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            host?: string;
            path?: string;
            header?: Map<string, string>;
            accept_proxy_protocol?: boolean;
            ed?: number;
            heartbeatPeriod?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("accept_proxy_protocol" in data && data.accept_proxy_protocol != undefined) {
                    this.accept_proxy_protocol = data.accept_proxy_protocol;
                }
                if ("ed" in data && data.ed != undefined) {
                    this.ed = data.ed;
                }
                if ("heartbeatPeriod" in data && data.heartbeatPeriod != undefined) {
                    this.heartbeatPeriod = data.heartbeatPeriod;
                }
            }
            if (!this.header)
                this.header = new Map();
        }
        get host() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set host(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get header() {
            return pb_1.Message.getField(this, 3) as any as Map<string, string>;
        }
        set header(value: Map<string, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get accept_proxy_protocol() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set accept_proxy_protocol(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get ed() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set ed(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get heartbeatPeriod() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set heartbeatPeriod(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            host?: string;
            path?: string;
            header?: {
                [key: string]: string;
            };
            accept_proxy_protocol?: boolean;
            ed?: number;
            heartbeatPeriod?: number;
        }): Config {
            const message = new Config({});
            if (data.host != null) {
                message.host = data.host;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (typeof data.header == "object") {
                message.header = new Map(Object.entries(data.header));
            }
            if (data.accept_proxy_protocol != null) {
                message.accept_proxy_protocol = data.accept_proxy_protocol;
            }
            if (data.ed != null) {
                message.ed = data.ed;
            }
            if (data.heartbeatPeriod != null) {
                message.heartbeatPeriod = data.heartbeatPeriod;
            }
            return message;
        }
        toObject() {
            const data: {
                host?: string;
                path?: string;
                header?: {
                    [key: string]: string;
                };
                accept_proxy_protocol?: boolean;
                ed?: number;
                heartbeatPeriod?: number;
            } = {};
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.header != null) {
                data.header = (Object.fromEntries)(this.header);
            }
            if (this.accept_proxy_protocol != null) {
                data.accept_proxy_protocol = this.accept_proxy_protocol;
            }
            if (this.ed != null) {
                data.ed = this.ed;
            }
            if (this.heartbeatPeriod != null) {
                data.heartbeatPeriod = this.heartbeatPeriod;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.host.length)
                writer.writeString(1, this.host);
            if (this.path.length)
                writer.writeString(2, this.path);
            for (const [key, value] of this.header) {
                writer.writeMessage(3, this.header, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.accept_proxy_protocol != false)
                writer.writeBool(4, this.accept_proxy_protocol);
            if (this.ed != 0)
                writer.writeUint32(5, this.ed);
            if (this.heartbeatPeriod != 0)
                writer.writeUint32(6, this.heartbeatPeriod);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.host = reader.readString();
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.header as any, reader, reader.readString, reader.readString));
                        break;
                    case 4:
                        message.accept_proxy_protocol = reader.readBool();
                        break;
                    case 5:
                        message.ed = reader.readUint32();
                        break;
                    case 6:
                        message.heartbeatPeriod = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
