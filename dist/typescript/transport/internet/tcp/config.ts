/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: transport/internet/tcp/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../common/serial/typed_message";
import * as pb_1 from "google-protobuf";
export namespace xray.transport.internet.tcp {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header_settings?: dependency_1.xray.common.serial.TypedMessage;
            accept_proxy_protocol?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header_settings" in data && data.header_settings != undefined) {
                    this.header_settings = data.header_settings;
                }
                if ("accept_proxy_protocol" in data && data.accept_proxy_protocol != undefined) {
                    this.accept_proxy_protocol = data.accept_proxy_protocol;
                }
            }
        }
        get header_settings() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 2) as dependency_1.xray.common.serial.TypedMessage;
        }
        set header_settings(value: dependency_1.xray.common.serial.TypedMessage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_header_settings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get accept_proxy_protocol() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set accept_proxy_protocol(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
            accept_proxy_protocol?: boolean;
        }): Config {
            const message = new Config({});
            if (data.header_settings != null) {
                message.header_settings = dependency_1.xray.common.serial.TypedMessage.fromObject(data.header_settings);
            }
            if (data.accept_proxy_protocol != null) {
                message.accept_proxy_protocol = data.accept_proxy_protocol;
            }
            return message;
        }
        toObject() {
            const data: {
                header_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
                accept_proxy_protocol?: boolean;
            } = {};
            if (this.header_settings != null) {
                data.header_settings = this.header_settings.toObject();
            }
            if (this.accept_proxy_protocol != null) {
                data.accept_proxy_protocol = this.accept_proxy_protocol;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header_settings)
                writer.writeMessage(2, this.header_settings, () => this.header_settings.serialize(writer));
            if (this.accept_proxy_protocol != false)
                writer.writeBool(3, this.accept_proxy_protocol);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.header_settings, () => message.header_settings = dependency_1.xray.common.serial.TypedMessage.deserialize(reader));
                        break;
                    case 3:
                        message.accept_proxy_protocol = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
