// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: transport/internet/headers/srtp/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "xray.transport.internet.headers.srtp";

export interface Config {
  version: number;
  padding: boolean;
  extension: boolean;
  csrcCount: number;
  marker: boolean;
  payloadType: number;
}

function createBaseConfig(): Config {
  return { version: 0, padding: false, extension: false, csrcCount: 0, marker: false, payloadType: 0 };
}

export const Config: MessageFns<Config> = {
  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== 0) {
      writer.uint32(8).uint32(message.version);
    }
    if (message.padding !== false) {
      writer.uint32(16).bool(message.padding);
    }
    if (message.extension !== false) {
      writer.uint32(24).bool(message.extension);
    }
    if (message.csrcCount !== 0) {
      writer.uint32(32).uint32(message.csrcCount);
    }
    if (message.marker !== false) {
      writer.uint32(40).bool(message.marker);
    }
    if (message.payloadType !== 0) {
      writer.uint32(48).uint32(message.payloadType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.padding = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.extension = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.csrcCount = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.marker = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.payloadType = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      padding: isSet(object.padding) ? globalThis.Boolean(object.padding) : false,
      extension: isSet(object.extension) ? globalThis.Boolean(object.extension) : false,
      csrcCount: isSet(object.csrcCount) ? globalThis.Number(object.csrcCount) : 0,
      marker: isSet(object.marker) ? globalThis.Boolean(object.marker) : false,
      payloadType: isSet(object.payloadType) ? globalThis.Number(object.payloadType) : 0,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.padding !== false) {
      obj.padding = message.padding;
    }
    if (message.extension !== false) {
      obj.extension = message.extension;
    }
    if (message.csrcCount !== 0) {
      obj.csrcCount = Math.round(message.csrcCount);
    }
    if (message.marker !== false) {
      obj.marker = message.marker;
    }
    if (message.payloadType !== 0) {
      obj.payloadType = Math.round(message.payloadType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.version = object.version ?? 0;
    message.padding = object.padding ?? false;
    message.extension = object.extension ?? false;
    message.csrcCount = object.csrcCount ?? 0;
    message.marker = object.marker ?? false;
    message.payloadType = object.payloadType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
