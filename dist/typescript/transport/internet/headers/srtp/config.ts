/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: transport/internet/headers/srtp/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.transport.internet.headers.srtp {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version?: number;
            padding?: boolean;
            extension?: boolean;
            csrc_count?: number;
            marker?: boolean;
            payload_type?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("padding" in data && data.padding != undefined) {
                    this.padding = data.padding;
                }
                if ("extension" in data && data.extension != undefined) {
                    this.extension = data.extension;
                }
                if ("csrc_count" in data && data.csrc_count != undefined) {
                    this.csrc_count = data.csrc_count;
                }
                if ("marker" in data && data.marker != undefined) {
                    this.marker = data.marker;
                }
                if ("payload_type" in data && data.payload_type != undefined) {
                    this.payload_type = data.payload_type;
                }
            }
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get padding() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set padding(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get extension() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set extension(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get csrc_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set csrc_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get marker() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set marker(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get payload_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set payload_type(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            version?: number;
            padding?: boolean;
            extension?: boolean;
            csrc_count?: number;
            marker?: boolean;
            payload_type?: number;
        }): Config {
            const message = new Config({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.padding != null) {
                message.padding = data.padding;
            }
            if (data.extension != null) {
                message.extension = data.extension;
            }
            if (data.csrc_count != null) {
                message.csrc_count = data.csrc_count;
            }
            if (data.marker != null) {
                message.marker = data.marker;
            }
            if (data.payload_type != null) {
                message.payload_type = data.payload_type;
            }
            return message;
        }
        toObject() {
            const data: {
                version?: number;
                padding?: boolean;
                extension?: boolean;
                csrc_count?: number;
                marker?: boolean;
                payload_type?: number;
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.padding != null) {
                data.padding = this.padding;
            }
            if (this.extension != null) {
                data.extension = this.extension;
            }
            if (this.csrc_count != null) {
                data.csrc_count = this.csrc_count;
            }
            if (this.marker != null) {
                data.marker = this.marker;
            }
            if (this.payload_type != null) {
                data.payload_type = this.payload_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version != 0)
                writer.writeUint32(1, this.version);
            if (this.padding != false)
                writer.writeBool(2, this.padding);
            if (this.extension != false)
                writer.writeBool(3, this.extension);
            if (this.csrc_count != 0)
                writer.writeUint32(4, this.csrc_count);
            if (this.marker != false)
                writer.writeBool(5, this.marker);
            if (this.payload_type != 0)
                writer.writeUint32(6, this.payload_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readUint32();
                        break;
                    case 2:
                        message.padding = reader.readBool();
                        break;
                    case 3:
                        message.extension = reader.readBool();
                        break;
                    case 4:
                        message.csrc_count = reader.readUint32();
                        break;
                    case 5:
                        message.marker = reader.readBool();
                        break;
                    case 6:
                        message.payload_type = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
