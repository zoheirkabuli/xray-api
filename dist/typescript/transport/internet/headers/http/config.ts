/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: transport/internet/headers/http/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.transport.internet.headers.http {
    export class Header extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            value?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set value(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            value?: string[];
        }): Header {
            const message = new Header({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                value?: string[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.value.length)
                writer.writeRepeatedString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Header {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Header();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Header {
            return Header.deserialize(bytes);
        }
    }
    export class Version extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: string;
        }): Version {
            const message = new Version({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: string;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeString(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Version {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Version();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Version {
            return Version.deserialize(bytes);
        }
    }
    export class Method extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: string;
        }): Method {
            const message = new Method({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: string;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeString(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Method {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Method();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Method {
            return Method.deserialize(bytes);
        }
    }
    export class RequestConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version?: Version;
            method?: Method;
            uri?: string[];
            header?: Header[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get version() {
            return pb_1.Message.getWrapperField(this, Version, 1) as Version;
        }
        set version(value: Version) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get method() {
            return pb_1.Message.getWrapperField(this, Method, 2) as Method;
        }
        set method(value: Method) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_method() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set uri(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get header() {
            return pb_1.Message.getRepeatedWrapperField(this, Header, 4) as Header[];
        }
        set header(value: Header[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            version?: ReturnType<typeof Version.prototype.toObject>;
            method?: ReturnType<typeof Method.prototype.toObject>;
            uri?: string[];
            header?: ReturnType<typeof Header.prototype.toObject>[];
        }): RequestConfig {
            const message = new RequestConfig({});
            if (data.version != null) {
                message.version = Version.fromObject(data.version);
            }
            if (data.method != null) {
                message.method = Method.fromObject(data.method);
            }
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.header != null) {
                message.header = data.header.map(item => Header.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                version?: ReturnType<typeof Version.prototype.toObject>;
                method?: ReturnType<typeof Method.prototype.toObject>;
                uri?: string[];
                header?: ReturnType<typeof Header.prototype.toObject>[];
            } = {};
            if (this.version != null) {
                data.version = this.version.toObject();
            }
            if (this.method != null) {
                data.method = this.method.toObject();
            }
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.header != null) {
                data.header = this.header.map((item: Header) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_version)
                writer.writeMessage(1, this.version, () => this.version.serialize(writer));
            if (this.has_method)
                writer.writeMessage(2, this.method, () => this.method.serialize(writer));
            if (this.uri.length)
                writer.writeRepeatedString(3, this.uri);
            if (this.header.length)
                writer.writeRepeatedMessage(4, this.header, (item: Header) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.version, () => message.version = Version.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.method, () => message.method = Method.deserialize(reader));
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message.header, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Header.deserialize(reader), Header));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestConfig {
            return RequestConfig.deserialize(bytes);
        }
    }
    export class Status extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: string;
            reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: string;
            reason?: string;
        }): Status {
            const message = new Status({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: string;
                reason?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code.length)
                writer.writeString(1, this.code);
            if (this.reason.length)
                writer.writeString(2, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Status {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Status();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readString();
                        break;
                    case 2:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Status {
            return Status.deserialize(bytes);
        }
    }
    export class ResponseConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version?: Version;
            status?: Status;
            header?: Header[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get version() {
            return pb_1.Message.getWrapperField(this, Version, 1) as Version;
        }
        set version(value: Version) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get status() {
            return pb_1.Message.getWrapperField(this, Status, 2) as Status;
        }
        set status(value: Status) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get header() {
            return pb_1.Message.getRepeatedWrapperField(this, Header, 3) as Header[];
        }
        set header(value: Header[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            version?: ReturnType<typeof Version.prototype.toObject>;
            status?: ReturnType<typeof Status.prototype.toObject>;
            header?: ReturnType<typeof Header.prototype.toObject>[];
        }): ResponseConfig {
            const message = new ResponseConfig({});
            if (data.version != null) {
                message.version = Version.fromObject(data.version);
            }
            if (data.status != null) {
                message.status = Status.fromObject(data.status);
            }
            if (data.header != null) {
                message.header = data.header.map(item => Header.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                version?: ReturnType<typeof Version.prototype.toObject>;
                status?: ReturnType<typeof Status.prototype.toObject>;
                header?: ReturnType<typeof Header.prototype.toObject>[];
            } = {};
            if (this.version != null) {
                data.version = this.version.toObject();
            }
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            if (this.header != null) {
                data.header = this.header.map((item: Header) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_version)
                writer.writeMessage(1, this.version, () => this.version.serialize(writer));
            if (this.has_status)
                writer.writeMessage(2, this.status, () => this.status.serialize(writer));
            if (this.header.length)
                writer.writeRepeatedMessage(3, this.header, (item: Header) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.version, () => message.version = Version.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.status, () => message.status = Status.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.header, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Header.deserialize(reader), Header));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseConfig {
            return ResponseConfig.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request?: RequestConfig;
            response?: ResponseConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
            }
        }
        get request() {
            return pb_1.Message.getWrapperField(this, RequestConfig, 1) as RequestConfig;
        }
        set request(value: RequestConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get response() {
            return pb_1.Message.getWrapperField(this, ResponseConfig, 2) as ResponseConfig;
        }
        set response(value: ResponseConfig) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            request?: ReturnType<typeof RequestConfig.prototype.toObject>;
            response?: ReturnType<typeof ResponseConfig.prototype.toObject>;
        }): Config {
            const message = new Config({});
            if (data.request != null) {
                message.request = RequestConfig.fromObject(data.request);
            }
            if (data.response != null) {
                message.response = ResponseConfig.fromObject(data.response);
            }
            return message;
        }
        toObject() {
            const data: {
                request?: ReturnType<typeof RequestConfig.prototype.toObject>;
                response?: ReturnType<typeof ResponseConfig.prototype.toObject>;
            } = {};
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request)
                writer.writeMessage(1, this.request, () => this.request.serialize(writer));
            if (this.has_response)
                writer.writeMessage(2, this.response, () => this.response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request, () => message.request = RequestConfig.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.response, () => message.response = ResponseConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
