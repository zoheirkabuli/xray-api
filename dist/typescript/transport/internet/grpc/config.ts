/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: transport/internet/grpc/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.transport.internet.grpc.encoding {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            authority?: string;
            service_name?: string;
            multi_mode?: boolean;
            idle_timeout?: number;
            health_check_timeout?: number;
            permit_without_stream?: boolean;
            initial_windows_size?: number;
            user_agent?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authority" in data && data.authority != undefined) {
                    this.authority = data.authority;
                }
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("multi_mode" in data && data.multi_mode != undefined) {
                    this.multi_mode = data.multi_mode;
                }
                if ("idle_timeout" in data && data.idle_timeout != undefined) {
                    this.idle_timeout = data.idle_timeout;
                }
                if ("health_check_timeout" in data && data.health_check_timeout != undefined) {
                    this.health_check_timeout = data.health_check_timeout;
                }
                if ("permit_without_stream" in data && data.permit_without_stream != undefined) {
                    this.permit_without_stream = data.permit_without_stream;
                }
                if ("initial_windows_size" in data && data.initial_windows_size != undefined) {
                    this.initial_windows_size = data.initial_windows_size;
                }
                if ("user_agent" in data && data.user_agent != undefined) {
                    this.user_agent = data.user_agent;
                }
            }
        }
        get authority() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set authority(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get multi_mode() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set multi_mode(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get idle_timeout() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set idle_timeout(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get health_check_timeout() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set health_check_timeout(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get permit_without_stream() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set permit_without_stream(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get initial_windows_size() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set initial_windows_size(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get user_agent() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set user_agent(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            authority?: string;
            service_name?: string;
            multi_mode?: boolean;
            idle_timeout?: number;
            health_check_timeout?: number;
            permit_without_stream?: boolean;
            initial_windows_size?: number;
            user_agent?: string;
        }): Config {
            const message = new Config({});
            if (data.authority != null) {
                message.authority = data.authority;
            }
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.multi_mode != null) {
                message.multi_mode = data.multi_mode;
            }
            if (data.idle_timeout != null) {
                message.idle_timeout = data.idle_timeout;
            }
            if (data.health_check_timeout != null) {
                message.health_check_timeout = data.health_check_timeout;
            }
            if (data.permit_without_stream != null) {
                message.permit_without_stream = data.permit_without_stream;
            }
            if (data.initial_windows_size != null) {
                message.initial_windows_size = data.initial_windows_size;
            }
            if (data.user_agent != null) {
                message.user_agent = data.user_agent;
            }
            return message;
        }
        toObject() {
            const data: {
                authority?: string;
                service_name?: string;
                multi_mode?: boolean;
                idle_timeout?: number;
                health_check_timeout?: number;
                permit_without_stream?: boolean;
                initial_windows_size?: number;
                user_agent?: string;
            } = {};
            if (this.authority != null) {
                data.authority = this.authority;
            }
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.multi_mode != null) {
                data.multi_mode = this.multi_mode;
            }
            if (this.idle_timeout != null) {
                data.idle_timeout = this.idle_timeout;
            }
            if (this.health_check_timeout != null) {
                data.health_check_timeout = this.health_check_timeout;
            }
            if (this.permit_without_stream != null) {
                data.permit_without_stream = this.permit_without_stream;
            }
            if (this.initial_windows_size != null) {
                data.initial_windows_size = this.initial_windows_size;
            }
            if (this.user_agent != null) {
                data.user_agent = this.user_agent;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.authority.length)
                writer.writeString(1, this.authority);
            if (this.service_name.length)
                writer.writeString(2, this.service_name);
            if (this.multi_mode != false)
                writer.writeBool(3, this.multi_mode);
            if (this.idle_timeout != 0)
                writer.writeInt32(4, this.idle_timeout);
            if (this.health_check_timeout != 0)
                writer.writeInt32(5, this.health_check_timeout);
            if (this.permit_without_stream != false)
                writer.writeBool(6, this.permit_without_stream);
            if (this.initial_windows_size != 0)
                writer.writeInt32(7, this.initial_windows_size);
            if (this.user_agent.length)
                writer.writeString(8, this.user_agent);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.authority = reader.readString();
                        break;
                    case 2:
                        message.service_name = reader.readString();
                        break;
                    case 3:
                        message.multi_mode = reader.readBool();
                        break;
                    case 4:
                        message.idle_timeout = reader.readInt32();
                        break;
                    case 5:
                        message.health_check_timeout = reader.readInt32();
                        break;
                    case 6:
                        message.permit_without_stream = reader.readBool();
                        break;
                    case 7:
                        message.initial_windows_size = reader.readInt32();
                        break;
                    case 8:
                        message.user_agent = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
