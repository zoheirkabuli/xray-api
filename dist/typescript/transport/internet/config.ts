/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: transport/internet/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/serial/typed_message";
import * as dependency_2 from "./../../common/net/address";
import * as pb_1 from "google-protobuf";
export namespace xray.transport.internet {
    export enum DomainStrategy {
        AS_IS = 0,
        USE_IP = 1,
        USE_IP4 = 2,
        USE_IP6 = 3,
        USE_IP46 = 4,
        USE_IP64 = 5,
        FORCE_IP = 6,
        FORCE_IP4 = 7,
        FORCE_IP6 = 8,
        FORCE_IP46 = 9,
        FORCE_IP64 = 10
    }
    export enum AddressPortStrategy {
        None = 0,
        SrvPortOnly = 1,
        SrvAddressOnly = 2,
        SrvPortAndAddress = 3,
        TxtPortOnly = 4,
        TxtAddressOnly = 5,
        TxtPortAndAddress = 6
    }
    export class TransportConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            protocol_name?: string;
            settings?: dependency_1.xray.common.serial.TypedMessage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protocol_name" in data && data.protocol_name != undefined) {
                    this.protocol_name = data.protocol_name;
                }
                if ("settings" in data && data.settings != undefined) {
                    this.settings = data.settings;
                }
            }
        }
        get protocol_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set protocol_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get settings() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 2) as dependency_1.xray.common.serial.TypedMessage;
        }
        set settings(value: dependency_1.xray.common.serial.TypedMessage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_settings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            protocol_name?: string;
            settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
        }): TransportConfig {
            const message = new TransportConfig({});
            if (data.protocol_name != null) {
                message.protocol_name = data.protocol_name;
            }
            if (data.settings != null) {
                message.settings = dependency_1.xray.common.serial.TypedMessage.fromObject(data.settings);
            }
            return message;
        }
        toObject() {
            const data: {
                protocol_name?: string;
                settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
            } = {};
            if (this.protocol_name != null) {
                data.protocol_name = this.protocol_name;
            }
            if (this.settings != null) {
                data.settings = this.settings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.protocol_name.length)
                writer.writeString(3, this.protocol_name);
            if (this.has_settings)
                writer.writeMessage(2, this.settings, () => this.settings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransportConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransportConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.protocol_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.settings, () => message.settings = dependency_1.xray.common.serial.TypedMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransportConfig {
            return TransportConfig.deserialize(bytes);
        }
    }
    export class StreamConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: dependency_2.xray.common.net.IPOrDomain;
            port?: number;
            protocol_name?: string;
            transport_settings?: TransportConfig[];
            security_type?: string;
            security_settings?: dependency_1.xray.common.serial.TypedMessage[];
            socket_settings?: SocketConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("protocol_name" in data && data.protocol_name != undefined) {
                    this.protocol_name = data.protocol_name;
                }
                if ("transport_settings" in data && data.transport_settings != undefined) {
                    this.transport_settings = data.transport_settings;
                }
                if ("security_type" in data && data.security_type != undefined) {
                    this.security_type = data.security_type;
                }
                if ("security_settings" in data && data.security_settings != undefined) {
                    this.security_settings = data.security_settings;
                }
                if ("socket_settings" in data && data.socket_settings != undefined) {
                    this.socket_settings = data.socket_settings;
                }
            }
        }
        get address() {
            return pb_1.Message.getWrapperField(this, dependency_2.xray.common.net.IPOrDomain, 8) as dependency_2.xray.common.net.IPOrDomain;
        }
        set address(value: dependency_2.xray.common.net.IPOrDomain) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_address() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get protocol_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set protocol_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get transport_settings() {
            return pb_1.Message.getRepeatedWrapperField(this, TransportConfig, 2) as TransportConfig[];
        }
        set transport_settings(value: TransportConfig[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get security_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set security_type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get security_settings() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 4) as dependency_1.xray.common.serial.TypedMessage[];
        }
        set security_settings(value: dependency_1.xray.common.serial.TypedMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get socket_settings() {
            return pb_1.Message.getWrapperField(this, SocketConfig, 6) as SocketConfig;
        }
        set socket_settings(value: SocketConfig) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_socket_settings() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            address?: ReturnType<typeof dependency_2.xray.common.net.IPOrDomain.prototype.toObject>;
            port?: number;
            protocol_name?: string;
            transport_settings?: ReturnType<typeof TransportConfig.prototype.toObject>[];
            security_type?: string;
            security_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>[];
            socket_settings?: ReturnType<typeof SocketConfig.prototype.toObject>;
        }): StreamConfig {
            const message = new StreamConfig({});
            if (data.address != null) {
                message.address = dependency_2.xray.common.net.IPOrDomain.fromObject(data.address);
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.protocol_name != null) {
                message.protocol_name = data.protocol_name;
            }
            if (data.transport_settings != null) {
                message.transport_settings = data.transport_settings.map(item => TransportConfig.fromObject(item));
            }
            if (data.security_type != null) {
                message.security_type = data.security_type;
            }
            if (data.security_settings != null) {
                message.security_settings = data.security_settings.map(item => dependency_1.xray.common.serial.TypedMessage.fromObject(item));
            }
            if (data.socket_settings != null) {
                message.socket_settings = SocketConfig.fromObject(data.socket_settings);
            }
            return message;
        }
        toObject() {
            const data: {
                address?: ReturnType<typeof dependency_2.xray.common.net.IPOrDomain.prototype.toObject>;
                port?: number;
                protocol_name?: string;
                transport_settings?: ReturnType<typeof TransportConfig.prototype.toObject>[];
                security_type?: string;
                security_settings?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>[];
                socket_settings?: ReturnType<typeof SocketConfig.prototype.toObject>;
            } = {};
            if (this.address != null) {
                data.address = this.address.toObject();
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.protocol_name != null) {
                data.protocol_name = this.protocol_name;
            }
            if (this.transport_settings != null) {
                data.transport_settings = this.transport_settings.map((item: TransportConfig) => item.toObject());
            }
            if (this.security_type != null) {
                data.security_type = this.security_type;
            }
            if (this.security_settings != null) {
                data.security_settings = this.security_settings.map((item: dependency_1.xray.common.serial.TypedMessage) => item.toObject());
            }
            if (this.socket_settings != null) {
                data.socket_settings = this.socket_settings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_address)
                writer.writeMessage(8, this.address, () => this.address.serialize(writer));
            if (this.port != 0)
                writer.writeUint32(9, this.port);
            if (this.protocol_name.length)
                writer.writeString(5, this.protocol_name);
            if (this.transport_settings.length)
                writer.writeRepeatedMessage(2, this.transport_settings, (item: TransportConfig) => item.serialize(writer));
            if (this.security_type.length)
                writer.writeString(3, this.security_type);
            if (this.security_settings.length)
                writer.writeRepeatedMessage(4, this.security_settings, (item: dependency_1.xray.common.serial.TypedMessage) => item.serialize(writer));
            if (this.has_socket_settings)
                writer.writeMessage(6, this.socket_settings, () => this.socket_settings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 8:
                        reader.readMessage(message.address, () => message.address = dependency_2.xray.common.net.IPOrDomain.deserialize(reader));
                        break;
                    case 9:
                        message.port = reader.readUint32();
                        break;
                    case 5:
                        message.protocol_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.transport_settings, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TransportConfig.deserialize(reader), TransportConfig));
                        break;
                    case 3:
                        message.security_type = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.security_settings, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.xray.common.serial.TypedMessage.deserialize(reader), dependency_1.xray.common.serial.TypedMessage));
                        break;
                    case 6:
                        reader.readMessage(message.socket_settings, () => message.socket_settings = SocketConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamConfig {
            return StreamConfig.deserialize(bytes);
        }
    }
    export class ProxyConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tag?: string;
            transportLayerProxy?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
                if ("transportLayerProxy" in data && data.transportLayerProxy != undefined) {
                    this.transportLayerProxy = data.transportLayerProxy;
                }
            }
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get transportLayerProxy() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set transportLayerProxy(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tag?: string;
            transportLayerProxy?: boolean;
        }): ProxyConfig {
            const message = new ProxyConfig({});
            if (data.tag != null) {
                message.tag = data.tag;
            }
            if (data.transportLayerProxy != null) {
                message.transportLayerProxy = data.transportLayerProxy;
            }
            return message;
        }
        toObject() {
            const data: {
                tag?: string;
                transportLayerProxy?: boolean;
            } = {};
            if (this.tag != null) {
                data.tag = this.tag;
            }
            if (this.transportLayerProxy != null) {
                data.transportLayerProxy = this.transportLayerProxy;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tag.length)
                writer.writeString(1, this.tag);
            if (this.transportLayerProxy != false)
                writer.writeBool(2, this.transportLayerProxy);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProxyConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProxyConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tag = reader.readString();
                        break;
                    case 2:
                        message.transportLayerProxy = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProxyConfig {
            return ProxyConfig.deserialize(bytes);
        }
    }
    export class CustomSockopt extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            system?: string;
            network?: string;
            level?: string;
            opt?: string;
            value?: string;
            type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("system" in data && data.system != undefined) {
                    this.system = data.system;
                }
                if ("network" in data && data.network != undefined) {
                    this.network = data.network;
                }
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("opt" in data && data.opt != undefined) {
                    this.opt = data.opt;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get system() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set system(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get network() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set network(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set level(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get opt() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set opt(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            system?: string;
            network?: string;
            level?: string;
            opt?: string;
            value?: string;
            type?: string;
        }): CustomSockopt {
            const message = new CustomSockopt({});
            if (data.system != null) {
                message.system = data.system;
            }
            if (data.network != null) {
                message.network = data.network;
            }
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.opt != null) {
                message.opt = data.opt;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                system?: string;
                network?: string;
                level?: string;
                opt?: string;
                value?: string;
                type?: string;
            } = {};
            if (this.system != null) {
                data.system = this.system;
            }
            if (this.network != null) {
                data.network = this.network;
            }
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.opt != null) {
                data.opt = this.opt;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.system.length)
                writer.writeString(1, this.system);
            if (this.network.length)
                writer.writeString(2, this.network);
            if (this.level.length)
                writer.writeString(3, this.level);
            if (this.opt.length)
                writer.writeString(4, this.opt);
            if (this.value.length)
                writer.writeString(5, this.value);
            if (this.type.length)
                writer.writeString(6, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomSockopt {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomSockopt();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.system = reader.readString();
                        break;
                    case 2:
                        message.network = reader.readString();
                        break;
                    case 3:
                        message.level = reader.readString();
                        break;
                    case 4:
                        message.opt = reader.readString();
                        break;
                    case 5:
                        message.value = reader.readString();
                        break;
                    case 6:
                        message.type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomSockopt {
            return CustomSockopt.deserialize(bytes);
        }
    }
    export class SocketConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mark?: number;
            tfo?: number;
            tproxy?: SocketConfig.TProxyMode;
            receive_original_dest_address?: boolean;
            bind_address?: Uint8Array;
            bind_port?: number;
            accept_proxy_protocol?: boolean;
            domain_strategy?: DomainStrategy;
            dialer_proxy?: string;
            tcp_keep_alive_interval?: number;
            tcp_keep_alive_idle?: number;
            tcp_congestion?: string;
            interface?: string;
            v6only?: boolean;
            tcp_window_clamp?: number;
            tcp_user_timeout?: number;
            tcp_max_seg?: number;
            penetrate?: boolean;
            tcp_mptcp?: boolean;
            customSockopt?: CustomSockopt[];
            address_port_strategy?: AddressPortStrategy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [20], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mark" in data && data.mark != undefined) {
                    this.mark = data.mark;
                }
                if ("tfo" in data && data.tfo != undefined) {
                    this.tfo = data.tfo;
                }
                if ("tproxy" in data && data.tproxy != undefined) {
                    this.tproxy = data.tproxy;
                }
                if ("receive_original_dest_address" in data && data.receive_original_dest_address != undefined) {
                    this.receive_original_dest_address = data.receive_original_dest_address;
                }
                if ("bind_address" in data && data.bind_address != undefined) {
                    this.bind_address = data.bind_address;
                }
                if ("bind_port" in data && data.bind_port != undefined) {
                    this.bind_port = data.bind_port;
                }
                if ("accept_proxy_protocol" in data && data.accept_proxy_protocol != undefined) {
                    this.accept_proxy_protocol = data.accept_proxy_protocol;
                }
                if ("domain_strategy" in data && data.domain_strategy != undefined) {
                    this.domain_strategy = data.domain_strategy;
                }
                if ("dialer_proxy" in data && data.dialer_proxy != undefined) {
                    this.dialer_proxy = data.dialer_proxy;
                }
                if ("tcp_keep_alive_interval" in data && data.tcp_keep_alive_interval != undefined) {
                    this.tcp_keep_alive_interval = data.tcp_keep_alive_interval;
                }
                if ("tcp_keep_alive_idle" in data && data.tcp_keep_alive_idle != undefined) {
                    this.tcp_keep_alive_idle = data.tcp_keep_alive_idle;
                }
                if ("tcp_congestion" in data && data.tcp_congestion != undefined) {
                    this.tcp_congestion = data.tcp_congestion;
                }
                if ("interface" in data && data.interface != undefined) {
                    this.interface = data.interface;
                }
                if ("v6only" in data && data.v6only != undefined) {
                    this.v6only = data.v6only;
                }
                if ("tcp_window_clamp" in data && data.tcp_window_clamp != undefined) {
                    this.tcp_window_clamp = data.tcp_window_clamp;
                }
                if ("tcp_user_timeout" in data && data.tcp_user_timeout != undefined) {
                    this.tcp_user_timeout = data.tcp_user_timeout;
                }
                if ("tcp_max_seg" in data && data.tcp_max_seg != undefined) {
                    this.tcp_max_seg = data.tcp_max_seg;
                }
                if ("penetrate" in data && data.penetrate != undefined) {
                    this.penetrate = data.penetrate;
                }
                if ("tcp_mptcp" in data && data.tcp_mptcp != undefined) {
                    this.tcp_mptcp = data.tcp_mptcp;
                }
                if ("customSockopt" in data && data.customSockopt != undefined) {
                    this.customSockopt = data.customSockopt;
                }
                if ("address_port_strategy" in data && data.address_port_strategy != undefined) {
                    this.address_port_strategy = data.address_port_strategy;
                }
            }
        }
        get mark() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set mark(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tfo() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tfo(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get tproxy() {
            return pb_1.Message.getFieldWithDefault(this, 3, SocketConfig.TProxyMode.Off) as SocketConfig.TProxyMode;
        }
        set tproxy(value: SocketConfig.TProxyMode) {
            pb_1.Message.setField(this, 3, value);
        }
        get receive_original_dest_address() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set receive_original_dest_address(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get bind_address() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set bind_address(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get bind_port() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set bind_port(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get accept_proxy_protocol() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set accept_proxy_protocol(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get domain_strategy() {
            return pb_1.Message.getFieldWithDefault(this, 8, DomainStrategy.AS_IS) as DomainStrategy;
        }
        set domain_strategy(value: DomainStrategy) {
            pb_1.Message.setField(this, 8, value);
        }
        get dialer_proxy() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set dialer_proxy(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get tcp_keep_alive_interval() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set tcp_keep_alive_interval(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get tcp_keep_alive_idle() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set tcp_keep_alive_idle(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get tcp_congestion() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set tcp_congestion(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get interface() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set interface(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get v6only() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set v6only(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get tcp_window_clamp() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set tcp_window_clamp(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get tcp_user_timeout() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set tcp_user_timeout(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get tcp_max_seg() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set tcp_max_seg(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get penetrate() {
            return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
        }
        set penetrate(value: boolean) {
            pb_1.Message.setField(this, 18, value);
        }
        get tcp_mptcp() {
            return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
        }
        set tcp_mptcp(value: boolean) {
            pb_1.Message.setField(this, 19, value);
        }
        get customSockopt() {
            return pb_1.Message.getRepeatedWrapperField(this, CustomSockopt, 20) as CustomSockopt[];
        }
        set customSockopt(value: CustomSockopt[]) {
            pb_1.Message.setRepeatedWrapperField(this, 20, value);
        }
        get address_port_strategy() {
            return pb_1.Message.getFieldWithDefault(this, 21, AddressPortStrategy.None) as AddressPortStrategy;
        }
        set address_port_strategy(value: AddressPortStrategy) {
            pb_1.Message.setField(this, 21, value);
        }
        static fromObject(data: {
            mark?: number;
            tfo?: number;
            tproxy?: SocketConfig.TProxyMode;
            receive_original_dest_address?: boolean;
            bind_address?: Uint8Array;
            bind_port?: number;
            accept_proxy_protocol?: boolean;
            domain_strategy?: DomainStrategy;
            dialer_proxy?: string;
            tcp_keep_alive_interval?: number;
            tcp_keep_alive_idle?: number;
            tcp_congestion?: string;
            interface?: string;
            v6only?: boolean;
            tcp_window_clamp?: number;
            tcp_user_timeout?: number;
            tcp_max_seg?: number;
            penetrate?: boolean;
            tcp_mptcp?: boolean;
            customSockopt?: ReturnType<typeof CustomSockopt.prototype.toObject>[];
            address_port_strategy?: AddressPortStrategy;
        }): SocketConfig {
            const message = new SocketConfig({});
            if (data.mark != null) {
                message.mark = data.mark;
            }
            if (data.tfo != null) {
                message.tfo = data.tfo;
            }
            if (data.tproxy != null) {
                message.tproxy = data.tproxy;
            }
            if (data.receive_original_dest_address != null) {
                message.receive_original_dest_address = data.receive_original_dest_address;
            }
            if (data.bind_address != null) {
                message.bind_address = data.bind_address;
            }
            if (data.bind_port != null) {
                message.bind_port = data.bind_port;
            }
            if (data.accept_proxy_protocol != null) {
                message.accept_proxy_protocol = data.accept_proxy_protocol;
            }
            if (data.domain_strategy != null) {
                message.domain_strategy = data.domain_strategy;
            }
            if (data.dialer_proxy != null) {
                message.dialer_proxy = data.dialer_proxy;
            }
            if (data.tcp_keep_alive_interval != null) {
                message.tcp_keep_alive_interval = data.tcp_keep_alive_interval;
            }
            if (data.tcp_keep_alive_idle != null) {
                message.tcp_keep_alive_idle = data.tcp_keep_alive_idle;
            }
            if (data.tcp_congestion != null) {
                message.tcp_congestion = data.tcp_congestion;
            }
            if (data.interface != null) {
                message.interface = data.interface;
            }
            if (data.v6only != null) {
                message.v6only = data.v6only;
            }
            if (data.tcp_window_clamp != null) {
                message.tcp_window_clamp = data.tcp_window_clamp;
            }
            if (data.tcp_user_timeout != null) {
                message.tcp_user_timeout = data.tcp_user_timeout;
            }
            if (data.tcp_max_seg != null) {
                message.tcp_max_seg = data.tcp_max_seg;
            }
            if (data.penetrate != null) {
                message.penetrate = data.penetrate;
            }
            if (data.tcp_mptcp != null) {
                message.tcp_mptcp = data.tcp_mptcp;
            }
            if (data.customSockopt != null) {
                message.customSockopt = data.customSockopt.map(item => CustomSockopt.fromObject(item));
            }
            if (data.address_port_strategy != null) {
                message.address_port_strategy = data.address_port_strategy;
            }
            return message;
        }
        toObject() {
            const data: {
                mark?: number;
                tfo?: number;
                tproxy?: SocketConfig.TProxyMode;
                receive_original_dest_address?: boolean;
                bind_address?: Uint8Array;
                bind_port?: number;
                accept_proxy_protocol?: boolean;
                domain_strategy?: DomainStrategy;
                dialer_proxy?: string;
                tcp_keep_alive_interval?: number;
                tcp_keep_alive_idle?: number;
                tcp_congestion?: string;
                interface?: string;
                v6only?: boolean;
                tcp_window_clamp?: number;
                tcp_user_timeout?: number;
                tcp_max_seg?: number;
                penetrate?: boolean;
                tcp_mptcp?: boolean;
                customSockopt?: ReturnType<typeof CustomSockopt.prototype.toObject>[];
                address_port_strategy?: AddressPortStrategy;
            } = {};
            if (this.mark != null) {
                data.mark = this.mark;
            }
            if (this.tfo != null) {
                data.tfo = this.tfo;
            }
            if (this.tproxy != null) {
                data.tproxy = this.tproxy;
            }
            if (this.receive_original_dest_address != null) {
                data.receive_original_dest_address = this.receive_original_dest_address;
            }
            if (this.bind_address != null) {
                data.bind_address = this.bind_address;
            }
            if (this.bind_port != null) {
                data.bind_port = this.bind_port;
            }
            if (this.accept_proxy_protocol != null) {
                data.accept_proxy_protocol = this.accept_proxy_protocol;
            }
            if (this.domain_strategy != null) {
                data.domain_strategy = this.domain_strategy;
            }
            if (this.dialer_proxy != null) {
                data.dialer_proxy = this.dialer_proxy;
            }
            if (this.tcp_keep_alive_interval != null) {
                data.tcp_keep_alive_interval = this.tcp_keep_alive_interval;
            }
            if (this.tcp_keep_alive_idle != null) {
                data.tcp_keep_alive_idle = this.tcp_keep_alive_idle;
            }
            if (this.tcp_congestion != null) {
                data.tcp_congestion = this.tcp_congestion;
            }
            if (this.interface != null) {
                data.interface = this.interface;
            }
            if (this.v6only != null) {
                data.v6only = this.v6only;
            }
            if (this.tcp_window_clamp != null) {
                data.tcp_window_clamp = this.tcp_window_clamp;
            }
            if (this.tcp_user_timeout != null) {
                data.tcp_user_timeout = this.tcp_user_timeout;
            }
            if (this.tcp_max_seg != null) {
                data.tcp_max_seg = this.tcp_max_seg;
            }
            if (this.penetrate != null) {
                data.penetrate = this.penetrate;
            }
            if (this.tcp_mptcp != null) {
                data.tcp_mptcp = this.tcp_mptcp;
            }
            if (this.customSockopt != null) {
                data.customSockopt = this.customSockopt.map((item: CustomSockopt) => item.toObject());
            }
            if (this.address_port_strategy != null) {
                data.address_port_strategy = this.address_port_strategy;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mark != 0)
                writer.writeInt32(1, this.mark);
            if (this.tfo != 0)
                writer.writeInt32(2, this.tfo);
            if (this.tproxy != SocketConfig.TProxyMode.Off)
                writer.writeEnum(3, this.tproxy);
            if (this.receive_original_dest_address != false)
                writer.writeBool(4, this.receive_original_dest_address);
            if (this.bind_address.length)
                writer.writeBytes(5, this.bind_address);
            if (this.bind_port != 0)
                writer.writeUint32(6, this.bind_port);
            if (this.accept_proxy_protocol != false)
                writer.writeBool(7, this.accept_proxy_protocol);
            if (this.domain_strategy != DomainStrategy.AS_IS)
                writer.writeEnum(8, this.domain_strategy);
            if (this.dialer_proxy.length)
                writer.writeString(9, this.dialer_proxy);
            if (this.tcp_keep_alive_interval != 0)
                writer.writeInt32(10, this.tcp_keep_alive_interval);
            if (this.tcp_keep_alive_idle != 0)
                writer.writeInt32(11, this.tcp_keep_alive_idle);
            if (this.tcp_congestion.length)
                writer.writeString(12, this.tcp_congestion);
            if (this.interface.length)
                writer.writeString(13, this.interface);
            if (this.v6only != false)
                writer.writeBool(14, this.v6only);
            if (this.tcp_window_clamp != 0)
                writer.writeInt32(15, this.tcp_window_clamp);
            if (this.tcp_user_timeout != 0)
                writer.writeInt32(16, this.tcp_user_timeout);
            if (this.tcp_max_seg != 0)
                writer.writeInt32(17, this.tcp_max_seg);
            if (this.penetrate != false)
                writer.writeBool(18, this.penetrate);
            if (this.tcp_mptcp != false)
                writer.writeBool(19, this.tcp_mptcp);
            if (this.customSockopt.length)
                writer.writeRepeatedMessage(20, this.customSockopt, (item: CustomSockopt) => item.serialize(writer));
            if (this.address_port_strategy != AddressPortStrategy.None)
                writer.writeEnum(21, this.address_port_strategy);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SocketConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SocketConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mark = reader.readInt32();
                        break;
                    case 2:
                        message.tfo = reader.readInt32();
                        break;
                    case 3:
                        message.tproxy = reader.readEnum();
                        break;
                    case 4:
                        message.receive_original_dest_address = reader.readBool();
                        break;
                    case 5:
                        message.bind_address = reader.readBytes();
                        break;
                    case 6:
                        message.bind_port = reader.readUint32();
                        break;
                    case 7:
                        message.accept_proxy_protocol = reader.readBool();
                        break;
                    case 8:
                        message.domain_strategy = reader.readEnum();
                        break;
                    case 9:
                        message.dialer_proxy = reader.readString();
                        break;
                    case 10:
                        message.tcp_keep_alive_interval = reader.readInt32();
                        break;
                    case 11:
                        message.tcp_keep_alive_idle = reader.readInt32();
                        break;
                    case 12:
                        message.tcp_congestion = reader.readString();
                        break;
                    case 13:
                        message.interface = reader.readString();
                        break;
                    case 14:
                        message.v6only = reader.readBool();
                        break;
                    case 15:
                        message.tcp_window_clamp = reader.readInt32();
                        break;
                    case 16:
                        message.tcp_user_timeout = reader.readInt32();
                        break;
                    case 17:
                        message.tcp_max_seg = reader.readInt32();
                        break;
                    case 18:
                        message.penetrate = reader.readBool();
                        break;
                    case 19:
                        message.tcp_mptcp = reader.readBool();
                        break;
                    case 20:
                        reader.readMessage(message.customSockopt, () => pb_1.Message.addToRepeatedWrapperField(message, 20, CustomSockopt.deserialize(reader), CustomSockopt));
                        break;
                    case 21:
                        message.address_port_strategy = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SocketConfig {
            return SocketConfig.deserialize(bytes);
        }
    }
    export namespace SocketConfig {
        export enum TProxyMode {
            Off = 0,
            TProxy = 1,
            Redirect = 2
        }
    }
}
