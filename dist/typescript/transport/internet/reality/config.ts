/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: transport/internet/reality/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.transport.internet.reality {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            show?: boolean;
            dest?: string;
            type?: string;
            xver?: number;
            server_names?: string[];
            private_key?: Uint8Array;
            min_client_ver?: Uint8Array;
            max_client_ver?: Uint8Array;
            max_time_diff?: number;
            short_ids?: Uint8Array[];
            Fingerprint?: string;
            server_name?: string;
            public_key?: Uint8Array;
            short_id?: Uint8Array;
            spider_x?: string;
            spider_y?: number[];
            master_key_log?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 10, 26], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("show" in data && data.show != undefined) {
                    this.show = data.show;
                }
                if ("dest" in data && data.dest != undefined) {
                    this.dest = data.dest;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("xver" in data && data.xver != undefined) {
                    this.xver = data.xver;
                }
                if ("server_names" in data && data.server_names != undefined) {
                    this.server_names = data.server_names;
                }
                if ("private_key" in data && data.private_key != undefined) {
                    this.private_key = data.private_key;
                }
                if ("min_client_ver" in data && data.min_client_ver != undefined) {
                    this.min_client_ver = data.min_client_ver;
                }
                if ("max_client_ver" in data && data.max_client_ver != undefined) {
                    this.max_client_ver = data.max_client_ver;
                }
                if ("max_time_diff" in data && data.max_time_diff != undefined) {
                    this.max_time_diff = data.max_time_diff;
                }
                if ("short_ids" in data && data.short_ids != undefined) {
                    this.short_ids = data.short_ids;
                }
                if ("Fingerprint" in data && data.Fingerprint != undefined) {
                    this.Fingerprint = data.Fingerprint;
                }
                if ("server_name" in data && data.server_name != undefined) {
                    this.server_name = data.server_name;
                }
                if ("public_key" in data && data.public_key != undefined) {
                    this.public_key = data.public_key;
                }
                if ("short_id" in data && data.short_id != undefined) {
                    this.short_id = data.short_id;
                }
                if ("spider_x" in data && data.spider_x != undefined) {
                    this.spider_x = data.spider_x;
                }
                if ("spider_y" in data && data.spider_y != undefined) {
                    this.spider_y = data.spider_y;
                }
                if ("master_key_log" in data && data.master_key_log != undefined) {
                    this.master_key_log = data.master_key_log;
                }
            }
        }
        get show() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set show(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get dest() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set dest(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get xver() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set xver(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get server_names() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set server_names(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get private_key() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set private_key(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get min_client_ver() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set min_client_ver(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get max_client_ver() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set max_client_ver(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        get max_time_diff() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set max_time_diff(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get short_ids() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as Uint8Array[];
        }
        set short_ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get Fingerprint() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set Fingerprint(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get server_name() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set server_name(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get public_key() {
            return pb_1.Message.getFieldWithDefault(this, 23, new Uint8Array(0)) as Uint8Array;
        }
        set public_key(value: Uint8Array) {
            pb_1.Message.setField(this, 23, value);
        }
        get short_id() {
            return pb_1.Message.getFieldWithDefault(this, 24, new Uint8Array(0)) as Uint8Array;
        }
        set short_id(value: Uint8Array) {
            pb_1.Message.setField(this, 24, value);
        }
        get spider_x() {
            return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
        }
        set spider_x(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        get spider_y() {
            return pb_1.Message.getFieldWithDefault(this, 26, []) as number[];
        }
        set spider_y(value: number[]) {
            pb_1.Message.setField(this, 26, value);
        }
        get master_key_log() {
            return pb_1.Message.getFieldWithDefault(this, 27, "") as string;
        }
        set master_key_log(value: string) {
            pb_1.Message.setField(this, 27, value);
        }
        static fromObject(data: {
            show?: boolean;
            dest?: string;
            type?: string;
            xver?: number;
            server_names?: string[];
            private_key?: Uint8Array;
            min_client_ver?: Uint8Array;
            max_client_ver?: Uint8Array;
            max_time_diff?: number;
            short_ids?: Uint8Array[];
            Fingerprint?: string;
            server_name?: string;
            public_key?: Uint8Array;
            short_id?: Uint8Array;
            spider_x?: string;
            spider_y?: number[];
            master_key_log?: string;
        }): Config {
            const message = new Config({});
            if (data.show != null) {
                message.show = data.show;
            }
            if (data.dest != null) {
                message.dest = data.dest;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.xver != null) {
                message.xver = data.xver;
            }
            if (data.server_names != null) {
                message.server_names = data.server_names;
            }
            if (data.private_key != null) {
                message.private_key = data.private_key;
            }
            if (data.min_client_ver != null) {
                message.min_client_ver = data.min_client_ver;
            }
            if (data.max_client_ver != null) {
                message.max_client_ver = data.max_client_ver;
            }
            if (data.max_time_diff != null) {
                message.max_time_diff = data.max_time_diff;
            }
            if (data.short_ids != null) {
                message.short_ids = data.short_ids;
            }
            if (data.Fingerprint != null) {
                message.Fingerprint = data.Fingerprint;
            }
            if (data.server_name != null) {
                message.server_name = data.server_name;
            }
            if (data.public_key != null) {
                message.public_key = data.public_key;
            }
            if (data.short_id != null) {
                message.short_id = data.short_id;
            }
            if (data.spider_x != null) {
                message.spider_x = data.spider_x;
            }
            if (data.spider_y != null) {
                message.spider_y = data.spider_y;
            }
            if (data.master_key_log != null) {
                message.master_key_log = data.master_key_log;
            }
            return message;
        }
        toObject() {
            const data: {
                show?: boolean;
                dest?: string;
                type?: string;
                xver?: number;
                server_names?: string[];
                private_key?: Uint8Array;
                min_client_ver?: Uint8Array;
                max_client_ver?: Uint8Array;
                max_time_diff?: number;
                short_ids?: Uint8Array[];
                Fingerprint?: string;
                server_name?: string;
                public_key?: Uint8Array;
                short_id?: Uint8Array;
                spider_x?: string;
                spider_y?: number[];
                master_key_log?: string;
            } = {};
            if (this.show != null) {
                data.show = this.show;
            }
            if (this.dest != null) {
                data.dest = this.dest;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.xver != null) {
                data.xver = this.xver;
            }
            if (this.server_names != null) {
                data.server_names = this.server_names;
            }
            if (this.private_key != null) {
                data.private_key = this.private_key;
            }
            if (this.min_client_ver != null) {
                data.min_client_ver = this.min_client_ver;
            }
            if (this.max_client_ver != null) {
                data.max_client_ver = this.max_client_ver;
            }
            if (this.max_time_diff != null) {
                data.max_time_diff = this.max_time_diff;
            }
            if (this.short_ids != null) {
                data.short_ids = this.short_ids;
            }
            if (this.Fingerprint != null) {
                data.Fingerprint = this.Fingerprint;
            }
            if (this.server_name != null) {
                data.server_name = this.server_name;
            }
            if (this.public_key != null) {
                data.public_key = this.public_key;
            }
            if (this.short_id != null) {
                data.short_id = this.short_id;
            }
            if (this.spider_x != null) {
                data.spider_x = this.spider_x;
            }
            if (this.spider_y != null) {
                data.spider_y = this.spider_y;
            }
            if (this.master_key_log != null) {
                data.master_key_log = this.master_key_log;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.show != false)
                writer.writeBool(1, this.show);
            if (this.dest.length)
                writer.writeString(2, this.dest);
            if (this.type.length)
                writer.writeString(3, this.type);
            if (this.xver != 0)
                writer.writeUint64(4, this.xver);
            if (this.server_names.length)
                writer.writeRepeatedString(5, this.server_names);
            if (this.private_key.length)
                writer.writeBytes(6, this.private_key);
            if (this.min_client_ver.length)
                writer.writeBytes(7, this.min_client_ver);
            if (this.max_client_ver.length)
                writer.writeBytes(8, this.max_client_ver);
            if (this.max_time_diff != 0)
                writer.writeUint64(9, this.max_time_diff);
            if (this.short_ids.length)
                writer.writeRepeatedBytes(10, this.short_ids);
            if (this.Fingerprint.length)
                writer.writeString(21, this.Fingerprint);
            if (this.server_name.length)
                writer.writeString(22, this.server_name);
            if (this.public_key.length)
                writer.writeBytes(23, this.public_key);
            if (this.short_id.length)
                writer.writeBytes(24, this.short_id);
            if (this.spider_x.length)
                writer.writeString(25, this.spider_x);
            if (this.spider_y.length)
                writer.writePackedInt64(26, this.spider_y);
            if (this.master_key_log.length)
                writer.writeString(27, this.master_key_log);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.show = reader.readBool();
                        break;
                    case 2:
                        message.dest = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        message.xver = reader.readUint64();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.private_key = reader.readBytes();
                        break;
                    case 7:
                        message.min_client_ver = reader.readBytes();
                        break;
                    case 8:
                        message.max_client_ver = reader.readBytes();
                        break;
                    case 9:
                        message.max_time_diff = reader.readUint64();
                        break;
                    case 10:
                        pb_1.Message.addToRepeatedField(message, 10, reader.readBytes());
                        break;
                    case 21:
                        message.Fingerprint = reader.readString();
                        break;
                    case 22:
                        message.server_name = reader.readString();
                        break;
                    case 23:
                        message.public_key = reader.readBytes();
                        break;
                    case 24:
                        message.short_id = reader.readBytes();
                        break;
                    case 25:
                        message.spider_x = reader.readString();
                        break;
                    case 26:
                        message.spider_y = reader.readPackedInt64();
                        break;
                    case 27:
                        message.master_key_log = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
