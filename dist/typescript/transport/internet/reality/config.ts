// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: transport/internet/reality/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "xray.transport.internet.reality";

export interface Config {
  show: boolean;
  dest: string;
  type: string;
  xver: number;
  serverNames: string[];
  privateKey: Uint8Array;
  minClientVer: Uint8Array;
  maxClientVer: Uint8Array;
  maxTimeDiff: number;
  shortIds: Uint8Array[];
  Fingerprint: string;
  serverName: string;
  publicKey: Uint8Array;
  shortId: Uint8Array;
  spiderX: string;
  spiderY: number[];
  masterKeyLog: string;
}

function createBaseConfig(): Config {
  return {
    show: false,
    dest: "",
    type: "",
    xver: 0,
    serverNames: [],
    privateKey: new Uint8Array(0),
    minClientVer: new Uint8Array(0),
    maxClientVer: new Uint8Array(0),
    maxTimeDiff: 0,
    shortIds: [],
    Fingerprint: "",
    serverName: "",
    publicKey: new Uint8Array(0),
    shortId: new Uint8Array(0),
    spiderX: "",
    spiderY: [],
    masterKeyLog: "",
  };
}

export const Config: MessageFns<Config> = {
  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.show !== false) {
      writer.uint32(8).bool(message.show);
    }
    if (message.dest !== "") {
      writer.uint32(18).string(message.dest);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.xver !== 0) {
      writer.uint32(32).uint64(message.xver);
    }
    for (const v of message.serverNames) {
      writer.uint32(42).string(v!);
    }
    if (message.privateKey.length !== 0) {
      writer.uint32(50).bytes(message.privateKey);
    }
    if (message.minClientVer.length !== 0) {
      writer.uint32(58).bytes(message.minClientVer);
    }
    if (message.maxClientVer.length !== 0) {
      writer.uint32(66).bytes(message.maxClientVer);
    }
    if (message.maxTimeDiff !== 0) {
      writer.uint32(72).uint64(message.maxTimeDiff);
    }
    for (const v of message.shortIds) {
      writer.uint32(82).bytes(v!);
    }
    if (message.Fingerprint !== "") {
      writer.uint32(170).string(message.Fingerprint);
    }
    if (message.serverName !== "") {
      writer.uint32(178).string(message.serverName);
    }
    if (message.publicKey.length !== 0) {
      writer.uint32(186).bytes(message.publicKey);
    }
    if (message.shortId.length !== 0) {
      writer.uint32(194).bytes(message.shortId);
    }
    if (message.spiderX !== "") {
      writer.uint32(202).string(message.spiderX);
    }
    writer.uint32(210).fork();
    for (const v of message.spiderY) {
      writer.int64(v);
    }
    writer.join();
    if (message.masterKeyLog !== "") {
      writer.uint32(218).string(message.masterKeyLog);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.show = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dest = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.xver = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.serverNames.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.privateKey = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.minClientVer = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.maxClientVer = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.maxTimeDiff = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.shortIds.push(reader.bytes());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.Fingerprint = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.shortId = reader.bytes();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.spiderX = reader.string();
          continue;
        }
        case 26: {
          if (tag === 208) {
            message.spiderY.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 210) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.spiderY.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.masterKeyLog = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      show: isSet(object.show) ? globalThis.Boolean(object.show) : false,
      dest: isSet(object.dest) ? globalThis.String(object.dest) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      xver: isSet(object.xver) ? globalThis.Number(object.xver) : 0,
      serverNames: globalThis.Array.isArray(object?.serverNames)
        ? object.serverNames.map((e: any) => globalThis.String(e))
        : [],
      privateKey: isSet(object.privateKey) ? bytesFromBase64(object.privateKey) : new Uint8Array(0),
      minClientVer: isSet(object.minClientVer) ? bytesFromBase64(object.minClientVer) : new Uint8Array(0),
      maxClientVer: isSet(object.maxClientVer) ? bytesFromBase64(object.maxClientVer) : new Uint8Array(0),
      maxTimeDiff: isSet(object.maxTimeDiff) ? globalThis.Number(object.maxTimeDiff) : 0,
      shortIds: globalThis.Array.isArray(object?.shortIds) ? object.shortIds.map((e: any) => bytesFromBase64(e)) : [],
      Fingerprint: isSet(object.Fingerprint) ? globalThis.String(object.Fingerprint) : "",
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0),
      shortId: isSet(object.shortId) ? bytesFromBase64(object.shortId) : new Uint8Array(0),
      spiderX: isSet(object.spiderX) ? globalThis.String(object.spiderX) : "",
      spiderY: globalThis.Array.isArray(object?.spiderY) ? object.spiderY.map((e: any) => globalThis.Number(e)) : [],
      masterKeyLog: isSet(object.masterKeyLog) ? globalThis.String(object.masterKeyLog) : "",
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.show !== false) {
      obj.show = message.show;
    }
    if (message.dest !== "") {
      obj.dest = message.dest;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.xver !== 0) {
      obj.xver = Math.round(message.xver);
    }
    if (message.serverNames?.length) {
      obj.serverNames = message.serverNames;
    }
    if (message.privateKey.length !== 0) {
      obj.privateKey = base64FromBytes(message.privateKey);
    }
    if (message.minClientVer.length !== 0) {
      obj.minClientVer = base64FromBytes(message.minClientVer);
    }
    if (message.maxClientVer.length !== 0) {
      obj.maxClientVer = base64FromBytes(message.maxClientVer);
    }
    if (message.maxTimeDiff !== 0) {
      obj.maxTimeDiff = Math.round(message.maxTimeDiff);
    }
    if (message.shortIds?.length) {
      obj.shortIds = message.shortIds.map((e) => base64FromBytes(e));
    }
    if (message.Fingerprint !== "") {
      obj.Fingerprint = message.Fingerprint;
    }
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.shortId.length !== 0) {
      obj.shortId = base64FromBytes(message.shortId);
    }
    if (message.spiderX !== "") {
      obj.spiderX = message.spiderX;
    }
    if (message.spiderY?.length) {
      obj.spiderY = message.spiderY.map((e) => Math.round(e));
    }
    if (message.masterKeyLog !== "") {
      obj.masterKeyLog = message.masterKeyLog;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.show = object.show ?? false;
    message.dest = object.dest ?? "";
    message.type = object.type ?? "";
    message.xver = object.xver ?? 0;
    message.serverNames = object.serverNames?.map((e) => e) || [];
    message.privateKey = object.privateKey ?? new Uint8Array(0);
    message.minClientVer = object.minClientVer ?? new Uint8Array(0);
    message.maxClientVer = object.maxClientVer ?? new Uint8Array(0);
    message.maxTimeDiff = object.maxTimeDiff ?? 0;
    message.shortIds = object.shortIds?.map((e) => e) || [];
    message.Fingerprint = object.Fingerprint ?? "";
    message.serverName = object.serverName ?? "";
    message.publicKey = object.publicKey ?? new Uint8Array(0);
    message.shortId = object.shortId ?? new Uint8Array(0);
    message.spiderX = object.spiderX ?? "";
    message.spiderY = object.spiderY?.map((e) => e) || [];
    message.masterKeyLog = object.masterKeyLog ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
