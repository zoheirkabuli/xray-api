/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: transport/internet/splithttp/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../config";
import * as pb_1 from "google-protobuf";
export namespace xray.transport.internet.splithttp {
    export class RangeConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: number;
            to?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
            }
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set from(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set to(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            from?: number;
            to?: number;
        }): RangeConfig {
            const message = new RangeConfig({});
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            return message;
        }
        toObject() {
            const data: {
                from?: number;
                to?: number;
            } = {};
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.from != 0)
                writer.writeInt32(1, this.from);
            if (this.to != 0)
                writer.writeInt32(2, this.to);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RangeConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RangeConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from = reader.readInt32();
                        break;
                    case 2:
                        message.to = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RangeConfig {
            return RangeConfig.deserialize(bytes);
        }
    }
    export class XmuxConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            maxConcurrency?: RangeConfig;
            maxConnections?: RangeConfig;
            cMaxReuseTimes?: RangeConfig;
            hMaxRequestTimes?: RangeConfig;
            hMaxReusableSecs?: RangeConfig;
            hKeepAlivePeriod?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("maxConcurrency" in data && data.maxConcurrency != undefined) {
                    this.maxConcurrency = data.maxConcurrency;
                }
                if ("maxConnections" in data && data.maxConnections != undefined) {
                    this.maxConnections = data.maxConnections;
                }
                if ("cMaxReuseTimes" in data && data.cMaxReuseTimes != undefined) {
                    this.cMaxReuseTimes = data.cMaxReuseTimes;
                }
                if ("hMaxRequestTimes" in data && data.hMaxRequestTimes != undefined) {
                    this.hMaxRequestTimes = data.hMaxRequestTimes;
                }
                if ("hMaxReusableSecs" in data && data.hMaxReusableSecs != undefined) {
                    this.hMaxReusableSecs = data.hMaxReusableSecs;
                }
                if ("hKeepAlivePeriod" in data && data.hKeepAlivePeriod != undefined) {
                    this.hKeepAlivePeriod = data.hKeepAlivePeriod;
                }
            }
        }
        get maxConcurrency() {
            return pb_1.Message.getWrapperField(this, RangeConfig, 1) as RangeConfig;
        }
        set maxConcurrency(value: RangeConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_maxConcurrency() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get maxConnections() {
            return pb_1.Message.getWrapperField(this, RangeConfig, 2) as RangeConfig;
        }
        set maxConnections(value: RangeConfig) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_maxConnections() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get cMaxReuseTimes() {
            return pb_1.Message.getWrapperField(this, RangeConfig, 3) as RangeConfig;
        }
        set cMaxReuseTimes(value: RangeConfig) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_cMaxReuseTimes() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get hMaxRequestTimes() {
            return pb_1.Message.getWrapperField(this, RangeConfig, 4) as RangeConfig;
        }
        set hMaxRequestTimes(value: RangeConfig) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_hMaxRequestTimes() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get hMaxReusableSecs() {
            return pb_1.Message.getWrapperField(this, RangeConfig, 5) as RangeConfig;
        }
        set hMaxReusableSecs(value: RangeConfig) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_hMaxReusableSecs() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get hKeepAlivePeriod() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set hKeepAlivePeriod(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            maxConcurrency?: ReturnType<typeof RangeConfig.prototype.toObject>;
            maxConnections?: ReturnType<typeof RangeConfig.prototype.toObject>;
            cMaxReuseTimes?: ReturnType<typeof RangeConfig.prototype.toObject>;
            hMaxRequestTimes?: ReturnType<typeof RangeConfig.prototype.toObject>;
            hMaxReusableSecs?: ReturnType<typeof RangeConfig.prototype.toObject>;
            hKeepAlivePeriod?: number;
        }): XmuxConfig {
            const message = new XmuxConfig({});
            if (data.maxConcurrency != null) {
                message.maxConcurrency = RangeConfig.fromObject(data.maxConcurrency);
            }
            if (data.maxConnections != null) {
                message.maxConnections = RangeConfig.fromObject(data.maxConnections);
            }
            if (data.cMaxReuseTimes != null) {
                message.cMaxReuseTimes = RangeConfig.fromObject(data.cMaxReuseTimes);
            }
            if (data.hMaxRequestTimes != null) {
                message.hMaxRequestTimes = RangeConfig.fromObject(data.hMaxRequestTimes);
            }
            if (data.hMaxReusableSecs != null) {
                message.hMaxReusableSecs = RangeConfig.fromObject(data.hMaxReusableSecs);
            }
            if (data.hKeepAlivePeriod != null) {
                message.hKeepAlivePeriod = data.hKeepAlivePeriod;
            }
            return message;
        }
        toObject() {
            const data: {
                maxConcurrency?: ReturnType<typeof RangeConfig.prototype.toObject>;
                maxConnections?: ReturnType<typeof RangeConfig.prototype.toObject>;
                cMaxReuseTimes?: ReturnType<typeof RangeConfig.prototype.toObject>;
                hMaxRequestTimes?: ReturnType<typeof RangeConfig.prototype.toObject>;
                hMaxReusableSecs?: ReturnType<typeof RangeConfig.prototype.toObject>;
                hKeepAlivePeriod?: number;
            } = {};
            if (this.maxConcurrency != null) {
                data.maxConcurrency = this.maxConcurrency.toObject();
            }
            if (this.maxConnections != null) {
                data.maxConnections = this.maxConnections.toObject();
            }
            if (this.cMaxReuseTimes != null) {
                data.cMaxReuseTimes = this.cMaxReuseTimes.toObject();
            }
            if (this.hMaxRequestTimes != null) {
                data.hMaxRequestTimes = this.hMaxRequestTimes.toObject();
            }
            if (this.hMaxReusableSecs != null) {
                data.hMaxReusableSecs = this.hMaxReusableSecs.toObject();
            }
            if (this.hKeepAlivePeriod != null) {
                data.hKeepAlivePeriod = this.hKeepAlivePeriod;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_maxConcurrency)
                writer.writeMessage(1, this.maxConcurrency, () => this.maxConcurrency.serialize(writer));
            if (this.has_maxConnections)
                writer.writeMessage(2, this.maxConnections, () => this.maxConnections.serialize(writer));
            if (this.has_cMaxReuseTimes)
                writer.writeMessage(3, this.cMaxReuseTimes, () => this.cMaxReuseTimes.serialize(writer));
            if (this.has_hMaxRequestTimes)
                writer.writeMessage(4, this.hMaxRequestTimes, () => this.hMaxRequestTimes.serialize(writer));
            if (this.has_hMaxReusableSecs)
                writer.writeMessage(5, this.hMaxReusableSecs, () => this.hMaxReusableSecs.serialize(writer));
            if (this.hKeepAlivePeriod != 0)
                writer.writeInt64(6, this.hKeepAlivePeriod);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): XmuxConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new XmuxConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.maxConcurrency, () => message.maxConcurrency = RangeConfig.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.maxConnections, () => message.maxConnections = RangeConfig.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.cMaxReuseTimes, () => message.cMaxReuseTimes = RangeConfig.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.hMaxRequestTimes, () => message.hMaxRequestTimes = RangeConfig.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.hMaxReusableSecs, () => message.hMaxReusableSecs = RangeConfig.deserialize(reader));
                        break;
                    case 6:
                        message.hKeepAlivePeriod = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): XmuxConfig {
            return XmuxConfig.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            host?: string;
            path?: string;
            mode?: string;
            headers?: Map<string, string>;
            xPaddingBytes?: RangeConfig;
            noGRPCHeader?: boolean;
            noSSEHeader?: boolean;
            scMaxEachPostBytes?: RangeConfig;
            scMinPostsIntervalMs?: RangeConfig;
            scMaxBufferedPosts?: number;
            scStreamUpServerSecs?: RangeConfig;
            xmux?: XmuxConfig;
            downloadSettings?: dependency_1.xray.transport.internet.StreamConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
                if ("xPaddingBytes" in data && data.xPaddingBytes != undefined) {
                    this.xPaddingBytes = data.xPaddingBytes;
                }
                if ("noGRPCHeader" in data && data.noGRPCHeader != undefined) {
                    this.noGRPCHeader = data.noGRPCHeader;
                }
                if ("noSSEHeader" in data && data.noSSEHeader != undefined) {
                    this.noSSEHeader = data.noSSEHeader;
                }
                if ("scMaxEachPostBytes" in data && data.scMaxEachPostBytes != undefined) {
                    this.scMaxEachPostBytes = data.scMaxEachPostBytes;
                }
                if ("scMinPostsIntervalMs" in data && data.scMinPostsIntervalMs != undefined) {
                    this.scMinPostsIntervalMs = data.scMinPostsIntervalMs;
                }
                if ("scMaxBufferedPosts" in data && data.scMaxBufferedPosts != undefined) {
                    this.scMaxBufferedPosts = data.scMaxBufferedPosts;
                }
                if ("scStreamUpServerSecs" in data && data.scStreamUpServerSecs != undefined) {
                    this.scStreamUpServerSecs = data.scStreamUpServerSecs;
                }
                if ("xmux" in data && data.xmux != undefined) {
                    this.xmux = data.xmux;
                }
                if ("downloadSettings" in data && data.downloadSettings != undefined) {
                    this.downloadSettings = data.downloadSettings;
                }
            }
            if (!this.headers)
                this.headers = new Map();
        }
        get host() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set host(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get headers() {
            return pb_1.Message.getField(this, 4) as any as Map<string, string>;
        }
        set headers(value: Map<string, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get xPaddingBytes() {
            return pb_1.Message.getWrapperField(this, RangeConfig, 5) as RangeConfig;
        }
        set xPaddingBytes(value: RangeConfig) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_xPaddingBytes() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get noGRPCHeader() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set noGRPCHeader(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get noSSEHeader() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set noSSEHeader(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get scMaxEachPostBytes() {
            return pb_1.Message.getWrapperField(this, RangeConfig, 8) as RangeConfig;
        }
        set scMaxEachPostBytes(value: RangeConfig) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_scMaxEachPostBytes() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get scMinPostsIntervalMs() {
            return pb_1.Message.getWrapperField(this, RangeConfig, 9) as RangeConfig;
        }
        set scMinPostsIntervalMs(value: RangeConfig) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_scMinPostsIntervalMs() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get scMaxBufferedPosts() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set scMaxBufferedPosts(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get scStreamUpServerSecs() {
            return pb_1.Message.getWrapperField(this, RangeConfig, 11) as RangeConfig;
        }
        set scStreamUpServerSecs(value: RangeConfig) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_scStreamUpServerSecs() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get xmux() {
            return pb_1.Message.getWrapperField(this, XmuxConfig, 12) as XmuxConfig;
        }
        set xmux(value: XmuxConfig) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_xmux() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get downloadSettings() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.transport.internet.StreamConfig, 13) as dependency_1.xray.transport.internet.StreamConfig;
        }
        set downloadSettings(value: dependency_1.xray.transport.internet.StreamConfig) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_downloadSettings() {
            return pb_1.Message.getField(this, 13) != null;
        }
        static fromObject(data: {
            host?: string;
            path?: string;
            mode?: string;
            headers?: {
                [key: string]: string;
            };
            xPaddingBytes?: ReturnType<typeof RangeConfig.prototype.toObject>;
            noGRPCHeader?: boolean;
            noSSEHeader?: boolean;
            scMaxEachPostBytes?: ReturnType<typeof RangeConfig.prototype.toObject>;
            scMinPostsIntervalMs?: ReturnType<typeof RangeConfig.prototype.toObject>;
            scMaxBufferedPosts?: number;
            scStreamUpServerSecs?: ReturnType<typeof RangeConfig.prototype.toObject>;
            xmux?: ReturnType<typeof XmuxConfig.prototype.toObject>;
            downloadSettings?: ReturnType<typeof dependency_1.xray.transport.internet.StreamConfig.prototype.toObject>;
        }): Config {
            const message = new Config({});
            if (data.host != null) {
                message.host = data.host;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (typeof data.headers == "object") {
                message.headers = new Map(Object.entries(data.headers));
            }
            if (data.xPaddingBytes != null) {
                message.xPaddingBytes = RangeConfig.fromObject(data.xPaddingBytes);
            }
            if (data.noGRPCHeader != null) {
                message.noGRPCHeader = data.noGRPCHeader;
            }
            if (data.noSSEHeader != null) {
                message.noSSEHeader = data.noSSEHeader;
            }
            if (data.scMaxEachPostBytes != null) {
                message.scMaxEachPostBytes = RangeConfig.fromObject(data.scMaxEachPostBytes);
            }
            if (data.scMinPostsIntervalMs != null) {
                message.scMinPostsIntervalMs = RangeConfig.fromObject(data.scMinPostsIntervalMs);
            }
            if (data.scMaxBufferedPosts != null) {
                message.scMaxBufferedPosts = data.scMaxBufferedPosts;
            }
            if (data.scStreamUpServerSecs != null) {
                message.scStreamUpServerSecs = RangeConfig.fromObject(data.scStreamUpServerSecs);
            }
            if (data.xmux != null) {
                message.xmux = XmuxConfig.fromObject(data.xmux);
            }
            if (data.downloadSettings != null) {
                message.downloadSettings = dependency_1.xray.transport.internet.StreamConfig.fromObject(data.downloadSettings);
            }
            return message;
        }
        toObject() {
            const data: {
                host?: string;
                path?: string;
                mode?: string;
                headers?: {
                    [key: string]: string;
                };
                xPaddingBytes?: ReturnType<typeof RangeConfig.prototype.toObject>;
                noGRPCHeader?: boolean;
                noSSEHeader?: boolean;
                scMaxEachPostBytes?: ReturnType<typeof RangeConfig.prototype.toObject>;
                scMinPostsIntervalMs?: ReturnType<typeof RangeConfig.prototype.toObject>;
                scMaxBufferedPosts?: number;
                scStreamUpServerSecs?: ReturnType<typeof RangeConfig.prototype.toObject>;
                xmux?: ReturnType<typeof XmuxConfig.prototype.toObject>;
                downloadSettings?: ReturnType<typeof dependency_1.xray.transport.internet.StreamConfig.prototype.toObject>;
            } = {};
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.headers != null) {
                data.headers = (Object.fromEntries)(this.headers);
            }
            if (this.xPaddingBytes != null) {
                data.xPaddingBytes = this.xPaddingBytes.toObject();
            }
            if (this.noGRPCHeader != null) {
                data.noGRPCHeader = this.noGRPCHeader;
            }
            if (this.noSSEHeader != null) {
                data.noSSEHeader = this.noSSEHeader;
            }
            if (this.scMaxEachPostBytes != null) {
                data.scMaxEachPostBytes = this.scMaxEachPostBytes.toObject();
            }
            if (this.scMinPostsIntervalMs != null) {
                data.scMinPostsIntervalMs = this.scMinPostsIntervalMs.toObject();
            }
            if (this.scMaxBufferedPosts != null) {
                data.scMaxBufferedPosts = this.scMaxBufferedPosts;
            }
            if (this.scStreamUpServerSecs != null) {
                data.scStreamUpServerSecs = this.scStreamUpServerSecs.toObject();
            }
            if (this.xmux != null) {
                data.xmux = this.xmux.toObject();
            }
            if (this.downloadSettings != null) {
                data.downloadSettings = this.downloadSettings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.host.length)
                writer.writeString(1, this.host);
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.mode.length)
                writer.writeString(3, this.mode);
            for (const [key, value] of this.headers) {
                writer.writeMessage(4, this.headers, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_xPaddingBytes)
                writer.writeMessage(5, this.xPaddingBytes, () => this.xPaddingBytes.serialize(writer));
            if (this.noGRPCHeader != false)
                writer.writeBool(6, this.noGRPCHeader);
            if (this.noSSEHeader != false)
                writer.writeBool(7, this.noSSEHeader);
            if (this.has_scMaxEachPostBytes)
                writer.writeMessage(8, this.scMaxEachPostBytes, () => this.scMaxEachPostBytes.serialize(writer));
            if (this.has_scMinPostsIntervalMs)
                writer.writeMessage(9, this.scMinPostsIntervalMs, () => this.scMinPostsIntervalMs.serialize(writer));
            if (this.scMaxBufferedPosts != 0)
                writer.writeInt64(10, this.scMaxBufferedPosts);
            if (this.has_scStreamUpServerSecs)
                writer.writeMessage(11, this.scStreamUpServerSecs, () => this.scStreamUpServerSecs.serialize(writer));
            if (this.has_xmux)
                writer.writeMessage(12, this.xmux, () => this.xmux.serialize(writer));
            if (this.has_downloadSettings)
                writer.writeMessage(13, this.downloadSettings, () => this.downloadSettings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.host = reader.readString();
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        message.mode = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                        break;
                    case 5:
                        reader.readMessage(message.xPaddingBytes, () => message.xPaddingBytes = RangeConfig.deserialize(reader));
                        break;
                    case 6:
                        message.noGRPCHeader = reader.readBool();
                        break;
                    case 7:
                        message.noSSEHeader = reader.readBool();
                        break;
                    case 8:
                        reader.readMessage(message.scMaxEachPostBytes, () => message.scMaxEachPostBytes = RangeConfig.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.scMinPostsIntervalMs, () => message.scMinPostsIntervalMs = RangeConfig.deserialize(reader));
                        break;
                    case 10:
                        message.scMaxBufferedPosts = reader.readInt64();
                        break;
                    case 11:
                        reader.readMessage(message.scStreamUpServerSecs, () => message.scStreamUpServerSecs = RangeConfig.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.xmux, () => message.xmux = XmuxConfig.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.downloadSettings, () => message.downloadSettings = dependency_1.xray.transport.internet.StreamConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
