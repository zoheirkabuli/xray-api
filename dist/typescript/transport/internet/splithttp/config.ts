// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: transport/internet/splithttp/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { StreamConfig } from "../config";

export const protobufPackage = "xray.transport.internet.splithttp";

export interface RangeConfig {
  from: number;
  to: number;
}

export interface XmuxConfig {
  maxConcurrency: RangeConfig | undefined;
  maxConnections: RangeConfig | undefined;
  cMaxReuseTimes: RangeConfig | undefined;
  hMaxRequestTimes: RangeConfig | undefined;
  hMaxReusableSecs: RangeConfig | undefined;
  hKeepAlivePeriod: number;
}

export interface Config {
  host: string;
  path: string;
  mode: string;
  headers: { [key: string]: string };
  xPaddingBytes: RangeConfig | undefined;
  noGRPCHeader: boolean;
  noSSEHeader: boolean;
  scMaxEachPostBytes: RangeConfig | undefined;
  scMinPostsIntervalMs: RangeConfig | undefined;
  scMaxBufferedPosts: number;
  scStreamUpServerSecs: RangeConfig | undefined;
  xmux: XmuxConfig | undefined;
  downloadSettings: StreamConfig | undefined;
}

export interface Config_HeadersEntry {
  key: string;
  value: string;
}

function createBaseRangeConfig(): RangeConfig {
  return { from: 0, to: 0 };
}

export const RangeConfig: MessageFns<RangeConfig> = {
  encode(message: RangeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.from !== 0) {
      writer.uint32(8).int32(message.from);
    }
    if (message.to !== 0) {
      writer.uint32(16).int32(message.to);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RangeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRangeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.from = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.to = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RangeConfig {
    return {
      from: isSet(object.from) ? globalThis.Number(object.from) : 0,
      to: isSet(object.to) ? globalThis.Number(object.to) : 0,
    };
  },

  toJSON(message: RangeConfig): unknown {
    const obj: any = {};
    if (message.from !== 0) {
      obj.from = Math.round(message.from);
    }
    if (message.to !== 0) {
      obj.to = Math.round(message.to);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RangeConfig>, I>>(base?: I): RangeConfig {
    return RangeConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RangeConfig>, I>>(object: I): RangeConfig {
    const message = createBaseRangeConfig();
    message.from = object.from ?? 0;
    message.to = object.to ?? 0;
    return message;
  },
};

function createBaseXmuxConfig(): XmuxConfig {
  return {
    maxConcurrency: undefined,
    maxConnections: undefined,
    cMaxReuseTimes: undefined,
    hMaxRequestTimes: undefined,
    hMaxReusableSecs: undefined,
    hKeepAlivePeriod: 0,
  };
}

export const XmuxConfig: MessageFns<XmuxConfig> = {
  encode(message: XmuxConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxConcurrency !== undefined) {
      RangeConfig.encode(message.maxConcurrency, writer.uint32(10).fork()).join();
    }
    if (message.maxConnections !== undefined) {
      RangeConfig.encode(message.maxConnections, writer.uint32(18).fork()).join();
    }
    if (message.cMaxReuseTimes !== undefined) {
      RangeConfig.encode(message.cMaxReuseTimes, writer.uint32(26).fork()).join();
    }
    if (message.hMaxRequestTimes !== undefined) {
      RangeConfig.encode(message.hMaxRequestTimes, writer.uint32(34).fork()).join();
    }
    if (message.hMaxReusableSecs !== undefined) {
      RangeConfig.encode(message.hMaxReusableSecs, writer.uint32(42).fork()).join();
    }
    if (message.hKeepAlivePeriod !== 0) {
      writer.uint32(48).int64(message.hKeepAlivePeriod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): XmuxConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseXmuxConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.maxConcurrency = RangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.maxConnections = RangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cMaxReuseTimes = RangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.hMaxRequestTimes = RangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.hMaxReusableSecs = RangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.hKeepAlivePeriod = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): XmuxConfig {
    return {
      maxConcurrency: isSet(object.maxConcurrency) ? RangeConfig.fromJSON(object.maxConcurrency) : undefined,
      maxConnections: isSet(object.maxConnections) ? RangeConfig.fromJSON(object.maxConnections) : undefined,
      cMaxReuseTimes: isSet(object.cMaxReuseTimes) ? RangeConfig.fromJSON(object.cMaxReuseTimes) : undefined,
      hMaxRequestTimes: isSet(object.hMaxRequestTimes) ? RangeConfig.fromJSON(object.hMaxRequestTimes) : undefined,
      hMaxReusableSecs: isSet(object.hMaxReusableSecs) ? RangeConfig.fromJSON(object.hMaxReusableSecs) : undefined,
      hKeepAlivePeriod: isSet(object.hKeepAlivePeriod) ? globalThis.Number(object.hKeepAlivePeriod) : 0,
    };
  },

  toJSON(message: XmuxConfig): unknown {
    const obj: any = {};
    if (message.maxConcurrency !== undefined) {
      obj.maxConcurrency = RangeConfig.toJSON(message.maxConcurrency);
    }
    if (message.maxConnections !== undefined) {
      obj.maxConnections = RangeConfig.toJSON(message.maxConnections);
    }
    if (message.cMaxReuseTimes !== undefined) {
      obj.cMaxReuseTimes = RangeConfig.toJSON(message.cMaxReuseTimes);
    }
    if (message.hMaxRequestTimes !== undefined) {
      obj.hMaxRequestTimes = RangeConfig.toJSON(message.hMaxRequestTimes);
    }
    if (message.hMaxReusableSecs !== undefined) {
      obj.hMaxReusableSecs = RangeConfig.toJSON(message.hMaxReusableSecs);
    }
    if (message.hKeepAlivePeriod !== 0) {
      obj.hKeepAlivePeriod = Math.round(message.hKeepAlivePeriod);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<XmuxConfig>, I>>(base?: I): XmuxConfig {
    return XmuxConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<XmuxConfig>, I>>(object: I): XmuxConfig {
    const message = createBaseXmuxConfig();
    message.maxConcurrency = (object.maxConcurrency !== undefined && object.maxConcurrency !== null)
      ? RangeConfig.fromPartial(object.maxConcurrency)
      : undefined;
    message.maxConnections = (object.maxConnections !== undefined && object.maxConnections !== null)
      ? RangeConfig.fromPartial(object.maxConnections)
      : undefined;
    message.cMaxReuseTimes = (object.cMaxReuseTimes !== undefined && object.cMaxReuseTimes !== null)
      ? RangeConfig.fromPartial(object.cMaxReuseTimes)
      : undefined;
    message.hMaxRequestTimes = (object.hMaxRequestTimes !== undefined && object.hMaxRequestTimes !== null)
      ? RangeConfig.fromPartial(object.hMaxRequestTimes)
      : undefined;
    message.hMaxReusableSecs = (object.hMaxReusableSecs !== undefined && object.hMaxReusableSecs !== null)
      ? RangeConfig.fromPartial(object.hMaxReusableSecs)
      : undefined;
    message.hKeepAlivePeriod = object.hKeepAlivePeriod ?? 0;
    return message;
  },
};

function createBaseConfig(): Config {
  return {
    host: "",
    path: "",
    mode: "",
    headers: {},
    xPaddingBytes: undefined,
    noGRPCHeader: false,
    noSSEHeader: false,
    scMaxEachPostBytes: undefined,
    scMinPostsIntervalMs: undefined,
    scMaxBufferedPosts: 0,
    scStreamUpServerSecs: undefined,
    xmux: undefined,
    downloadSettings: undefined,
  };
}

export const Config: MessageFns<Config> = {
  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.host !== "") {
      writer.uint32(10).string(message.host);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.mode !== "") {
      writer.uint32(26).string(message.mode);
    }
    Object.entries(message.headers).forEach(([key, value]) => {
      Config_HeadersEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.xPaddingBytes !== undefined) {
      RangeConfig.encode(message.xPaddingBytes, writer.uint32(42).fork()).join();
    }
    if (message.noGRPCHeader !== false) {
      writer.uint32(48).bool(message.noGRPCHeader);
    }
    if (message.noSSEHeader !== false) {
      writer.uint32(56).bool(message.noSSEHeader);
    }
    if (message.scMaxEachPostBytes !== undefined) {
      RangeConfig.encode(message.scMaxEachPostBytes, writer.uint32(66).fork()).join();
    }
    if (message.scMinPostsIntervalMs !== undefined) {
      RangeConfig.encode(message.scMinPostsIntervalMs, writer.uint32(74).fork()).join();
    }
    if (message.scMaxBufferedPosts !== 0) {
      writer.uint32(80).int64(message.scMaxBufferedPosts);
    }
    if (message.scStreamUpServerSecs !== undefined) {
      RangeConfig.encode(message.scStreamUpServerSecs, writer.uint32(90).fork()).join();
    }
    if (message.xmux !== undefined) {
      XmuxConfig.encode(message.xmux, writer.uint32(98).fork()).join();
    }
    if (message.downloadSettings !== undefined) {
      StreamConfig.encode(message.downloadSettings, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.host = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mode = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = Config_HeadersEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.headers[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.xPaddingBytes = RangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.noGRPCHeader = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.noSSEHeader = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.scMaxEachPostBytes = RangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.scMinPostsIntervalMs = RangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.scMaxBufferedPosts = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.scStreamUpServerSecs = RangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.xmux = XmuxConfig.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.downloadSettings = StreamConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      mode: isSet(object.mode) ? globalThis.String(object.mode) : "",
      headers: isObject(object.headers)
        ? Object.entries(object.headers).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      xPaddingBytes: isSet(object.xPaddingBytes) ? RangeConfig.fromJSON(object.xPaddingBytes) : undefined,
      noGRPCHeader: isSet(object.noGRPCHeader) ? globalThis.Boolean(object.noGRPCHeader) : false,
      noSSEHeader: isSet(object.noSSEHeader) ? globalThis.Boolean(object.noSSEHeader) : false,
      scMaxEachPostBytes: isSet(object.scMaxEachPostBytes)
        ? RangeConfig.fromJSON(object.scMaxEachPostBytes)
        : undefined,
      scMinPostsIntervalMs: isSet(object.scMinPostsIntervalMs)
        ? RangeConfig.fromJSON(object.scMinPostsIntervalMs)
        : undefined,
      scMaxBufferedPosts: isSet(object.scMaxBufferedPosts) ? globalThis.Number(object.scMaxBufferedPosts) : 0,
      scStreamUpServerSecs: isSet(object.scStreamUpServerSecs)
        ? RangeConfig.fromJSON(object.scStreamUpServerSecs)
        : undefined,
      xmux: isSet(object.xmux) ? XmuxConfig.fromJSON(object.xmux) : undefined,
      downloadSettings: isSet(object.downloadSettings) ? StreamConfig.fromJSON(object.downloadSettings) : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.mode !== "") {
      obj.mode = message.mode;
    }
    if (message.headers) {
      const entries = Object.entries(message.headers);
      if (entries.length > 0) {
        obj.headers = {};
        entries.forEach(([k, v]) => {
          obj.headers[k] = v;
        });
      }
    }
    if (message.xPaddingBytes !== undefined) {
      obj.xPaddingBytes = RangeConfig.toJSON(message.xPaddingBytes);
    }
    if (message.noGRPCHeader !== false) {
      obj.noGRPCHeader = message.noGRPCHeader;
    }
    if (message.noSSEHeader !== false) {
      obj.noSSEHeader = message.noSSEHeader;
    }
    if (message.scMaxEachPostBytes !== undefined) {
      obj.scMaxEachPostBytes = RangeConfig.toJSON(message.scMaxEachPostBytes);
    }
    if (message.scMinPostsIntervalMs !== undefined) {
      obj.scMinPostsIntervalMs = RangeConfig.toJSON(message.scMinPostsIntervalMs);
    }
    if (message.scMaxBufferedPosts !== 0) {
      obj.scMaxBufferedPosts = Math.round(message.scMaxBufferedPosts);
    }
    if (message.scStreamUpServerSecs !== undefined) {
      obj.scStreamUpServerSecs = RangeConfig.toJSON(message.scStreamUpServerSecs);
    }
    if (message.xmux !== undefined) {
      obj.xmux = XmuxConfig.toJSON(message.xmux);
    }
    if (message.downloadSettings !== undefined) {
      obj.downloadSettings = StreamConfig.toJSON(message.downloadSettings);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.host = object.host ?? "";
    message.path = object.path ?? "";
    message.mode = object.mode ?? "";
    message.headers = Object.entries(object.headers ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.xPaddingBytes = (object.xPaddingBytes !== undefined && object.xPaddingBytes !== null)
      ? RangeConfig.fromPartial(object.xPaddingBytes)
      : undefined;
    message.noGRPCHeader = object.noGRPCHeader ?? false;
    message.noSSEHeader = object.noSSEHeader ?? false;
    message.scMaxEachPostBytes = (object.scMaxEachPostBytes !== undefined && object.scMaxEachPostBytes !== null)
      ? RangeConfig.fromPartial(object.scMaxEachPostBytes)
      : undefined;
    message.scMinPostsIntervalMs = (object.scMinPostsIntervalMs !== undefined && object.scMinPostsIntervalMs !== null)
      ? RangeConfig.fromPartial(object.scMinPostsIntervalMs)
      : undefined;
    message.scMaxBufferedPosts = object.scMaxBufferedPosts ?? 0;
    message.scStreamUpServerSecs = (object.scStreamUpServerSecs !== undefined && object.scStreamUpServerSecs !== null)
      ? RangeConfig.fromPartial(object.scStreamUpServerSecs)
      : undefined;
    message.xmux = (object.xmux !== undefined && object.xmux !== null)
      ? XmuxConfig.fromPartial(object.xmux)
      : undefined;
    message.downloadSettings = (object.downloadSettings !== undefined && object.downloadSettings !== null)
      ? StreamConfig.fromPartial(object.downloadSettings)
      : undefined;
    return message;
  },
};

function createBaseConfig_HeadersEntry(): Config_HeadersEntry {
  return { key: "", value: "" };
}

export const Config_HeadersEntry: MessageFns<Config_HeadersEntry> = {
  encode(message: Config_HeadersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config_HeadersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig_HeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config_HeadersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Config_HeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config_HeadersEntry>, I>>(base?: I): Config_HeadersEntry {
    return Config_HeadersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config_HeadersEntry>, I>>(object: I): Config_HeadersEntry {
    const message = createBaseConfig_HeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
