/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: transport/internet/kcp/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../common/serial/typed_message";
import * as pb_1 from "google-protobuf";
export namespace xray.transport.internet.kcp {
    export class MTU extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: number;
        }): MTU {
            const message = new MTU({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: number;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != 0)
                writer.writeUint32(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MTU {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MTU();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MTU {
            return MTU.deserialize(bytes);
        }
    }
    export class TTI extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: number;
        }): TTI {
            const message = new TTI({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: number;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != 0)
                writer.writeUint32(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TTI {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TTI();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TTI {
            return TTI.deserialize(bytes);
        }
    }
    export class UplinkCapacity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: number;
        }): UplinkCapacity {
            const message = new UplinkCapacity({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: number;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != 0)
                writer.writeUint32(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UplinkCapacity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UplinkCapacity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UplinkCapacity {
            return UplinkCapacity.deserialize(bytes);
        }
    }
    export class DownlinkCapacity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: number;
        }): DownlinkCapacity {
            const message = new DownlinkCapacity({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: number;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != 0)
                writer.writeUint32(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownlinkCapacity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownlinkCapacity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DownlinkCapacity {
            return DownlinkCapacity.deserialize(bytes);
        }
    }
    export class WriteBuffer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            size?: number;
        }): WriteBuffer {
            const message = new WriteBuffer({});
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                size?: number;
            } = {};
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.size != 0)
                writer.writeUint32(1, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteBuffer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteBuffer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.size = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WriteBuffer {
            return WriteBuffer.deserialize(bytes);
        }
    }
    export class ReadBuffer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            size?: number;
        }): ReadBuffer {
            const message = new ReadBuffer({});
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                size?: number;
            } = {};
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.size != 0)
                writer.writeUint32(1, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadBuffer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadBuffer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.size = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadBuffer {
            return ReadBuffer.deserialize(bytes);
        }
    }
    export class ConnectionReuse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enable?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enable" in data && data.enable != undefined) {
                    this.enable = data.enable;
                }
            }
        }
        get enable() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set enable(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            enable?: boolean;
        }): ConnectionReuse {
            const message = new ConnectionReuse({});
            if (data.enable != null) {
                message.enable = data.enable;
            }
            return message;
        }
        toObject() {
            const data: {
                enable?: boolean;
            } = {};
            if (this.enable != null) {
                data.enable = this.enable;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enable != false)
                writer.writeBool(1, this.enable);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectionReuse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectionReuse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enable = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectionReuse {
            return ConnectionReuse.deserialize(bytes);
        }
    }
    export class EncryptionSeed extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            seed?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("seed" in data && data.seed != undefined) {
                    this.seed = data.seed;
                }
            }
        }
        get seed() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set seed(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            seed?: string;
        }): EncryptionSeed {
            const message = new EncryptionSeed({});
            if (data.seed != null) {
                message.seed = data.seed;
            }
            return message;
        }
        toObject() {
            const data: {
                seed?: string;
            } = {};
            if (this.seed != null) {
                data.seed = this.seed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.seed.length)
                writer.writeString(1, this.seed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EncryptionSeed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EncryptionSeed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.seed = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EncryptionSeed {
            return EncryptionSeed.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mtu?: MTU;
            tti?: TTI;
            uplink_capacity?: UplinkCapacity;
            downlink_capacity?: DownlinkCapacity;
            congestion?: boolean;
            write_buffer?: WriteBuffer;
            read_buffer?: ReadBuffer;
            header_config?: dependency_1.xray.common.serial.TypedMessage;
            seed?: EncryptionSeed;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mtu" in data && data.mtu != undefined) {
                    this.mtu = data.mtu;
                }
                if ("tti" in data && data.tti != undefined) {
                    this.tti = data.tti;
                }
                if ("uplink_capacity" in data && data.uplink_capacity != undefined) {
                    this.uplink_capacity = data.uplink_capacity;
                }
                if ("downlink_capacity" in data && data.downlink_capacity != undefined) {
                    this.downlink_capacity = data.downlink_capacity;
                }
                if ("congestion" in data && data.congestion != undefined) {
                    this.congestion = data.congestion;
                }
                if ("write_buffer" in data && data.write_buffer != undefined) {
                    this.write_buffer = data.write_buffer;
                }
                if ("read_buffer" in data && data.read_buffer != undefined) {
                    this.read_buffer = data.read_buffer;
                }
                if ("header_config" in data && data.header_config != undefined) {
                    this.header_config = data.header_config;
                }
                if ("seed" in data && data.seed != undefined) {
                    this.seed = data.seed;
                }
            }
        }
        get mtu() {
            return pb_1.Message.getWrapperField(this, MTU, 1) as MTU;
        }
        set mtu(value: MTU) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_mtu() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get tti() {
            return pb_1.Message.getWrapperField(this, TTI, 2) as TTI;
        }
        set tti(value: TTI) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_tti() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get uplink_capacity() {
            return pb_1.Message.getWrapperField(this, UplinkCapacity, 3) as UplinkCapacity;
        }
        set uplink_capacity(value: UplinkCapacity) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_uplink_capacity() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get downlink_capacity() {
            return pb_1.Message.getWrapperField(this, DownlinkCapacity, 4) as DownlinkCapacity;
        }
        set downlink_capacity(value: DownlinkCapacity) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_downlink_capacity() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get congestion() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set congestion(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get write_buffer() {
            return pb_1.Message.getWrapperField(this, WriteBuffer, 6) as WriteBuffer;
        }
        set write_buffer(value: WriteBuffer) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_write_buffer() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get read_buffer() {
            return pb_1.Message.getWrapperField(this, ReadBuffer, 7) as ReadBuffer;
        }
        set read_buffer(value: ReadBuffer) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_read_buffer() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get header_config() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 8) as dependency_1.xray.common.serial.TypedMessage;
        }
        set header_config(value: dependency_1.xray.common.serial.TypedMessage) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_header_config() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get seed() {
            return pb_1.Message.getWrapperField(this, EncryptionSeed, 10) as EncryptionSeed;
        }
        set seed(value: EncryptionSeed) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_seed() {
            return pb_1.Message.getField(this, 10) != null;
        }
        static fromObject(data: {
            mtu?: ReturnType<typeof MTU.prototype.toObject>;
            tti?: ReturnType<typeof TTI.prototype.toObject>;
            uplink_capacity?: ReturnType<typeof UplinkCapacity.prototype.toObject>;
            downlink_capacity?: ReturnType<typeof DownlinkCapacity.prototype.toObject>;
            congestion?: boolean;
            write_buffer?: ReturnType<typeof WriteBuffer.prototype.toObject>;
            read_buffer?: ReturnType<typeof ReadBuffer.prototype.toObject>;
            header_config?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
            seed?: ReturnType<typeof EncryptionSeed.prototype.toObject>;
        }): Config {
            const message = new Config({});
            if (data.mtu != null) {
                message.mtu = MTU.fromObject(data.mtu);
            }
            if (data.tti != null) {
                message.tti = TTI.fromObject(data.tti);
            }
            if (data.uplink_capacity != null) {
                message.uplink_capacity = UplinkCapacity.fromObject(data.uplink_capacity);
            }
            if (data.downlink_capacity != null) {
                message.downlink_capacity = DownlinkCapacity.fromObject(data.downlink_capacity);
            }
            if (data.congestion != null) {
                message.congestion = data.congestion;
            }
            if (data.write_buffer != null) {
                message.write_buffer = WriteBuffer.fromObject(data.write_buffer);
            }
            if (data.read_buffer != null) {
                message.read_buffer = ReadBuffer.fromObject(data.read_buffer);
            }
            if (data.header_config != null) {
                message.header_config = dependency_1.xray.common.serial.TypedMessage.fromObject(data.header_config);
            }
            if (data.seed != null) {
                message.seed = EncryptionSeed.fromObject(data.seed);
            }
            return message;
        }
        toObject() {
            const data: {
                mtu?: ReturnType<typeof MTU.prototype.toObject>;
                tti?: ReturnType<typeof TTI.prototype.toObject>;
                uplink_capacity?: ReturnType<typeof UplinkCapacity.prototype.toObject>;
                downlink_capacity?: ReturnType<typeof DownlinkCapacity.prototype.toObject>;
                congestion?: boolean;
                write_buffer?: ReturnType<typeof WriteBuffer.prototype.toObject>;
                read_buffer?: ReturnType<typeof ReadBuffer.prototype.toObject>;
                header_config?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
                seed?: ReturnType<typeof EncryptionSeed.prototype.toObject>;
            } = {};
            if (this.mtu != null) {
                data.mtu = this.mtu.toObject();
            }
            if (this.tti != null) {
                data.tti = this.tti.toObject();
            }
            if (this.uplink_capacity != null) {
                data.uplink_capacity = this.uplink_capacity.toObject();
            }
            if (this.downlink_capacity != null) {
                data.downlink_capacity = this.downlink_capacity.toObject();
            }
            if (this.congestion != null) {
                data.congestion = this.congestion;
            }
            if (this.write_buffer != null) {
                data.write_buffer = this.write_buffer.toObject();
            }
            if (this.read_buffer != null) {
                data.read_buffer = this.read_buffer.toObject();
            }
            if (this.header_config != null) {
                data.header_config = this.header_config.toObject();
            }
            if (this.seed != null) {
                data.seed = this.seed.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_mtu)
                writer.writeMessage(1, this.mtu, () => this.mtu.serialize(writer));
            if (this.has_tti)
                writer.writeMessage(2, this.tti, () => this.tti.serialize(writer));
            if (this.has_uplink_capacity)
                writer.writeMessage(3, this.uplink_capacity, () => this.uplink_capacity.serialize(writer));
            if (this.has_downlink_capacity)
                writer.writeMessage(4, this.downlink_capacity, () => this.downlink_capacity.serialize(writer));
            if (this.congestion != false)
                writer.writeBool(5, this.congestion);
            if (this.has_write_buffer)
                writer.writeMessage(6, this.write_buffer, () => this.write_buffer.serialize(writer));
            if (this.has_read_buffer)
                writer.writeMessage(7, this.read_buffer, () => this.read_buffer.serialize(writer));
            if (this.has_header_config)
                writer.writeMessage(8, this.header_config, () => this.header_config.serialize(writer));
            if (this.has_seed)
                writer.writeMessage(10, this.seed, () => this.seed.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.mtu, () => message.mtu = MTU.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.tti, () => message.tti = TTI.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.uplink_capacity, () => message.uplink_capacity = UplinkCapacity.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.downlink_capacity, () => message.downlink_capacity = DownlinkCapacity.deserialize(reader));
                        break;
                    case 5:
                        message.congestion = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.write_buffer, () => message.write_buffer = WriteBuffer.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.read_buffer, () => message.read_buffer = ReadBuffer.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.header_config, () => message.header_config = dependency_1.xray.common.serial.TypedMessage.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.seed, () => message.seed = EncryptionSeed.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
