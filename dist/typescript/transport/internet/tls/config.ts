/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: transport/internet/tls/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.transport.internet.tls {
    export class Certificate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            certificate?: Uint8Array;
            key?: Uint8Array;
            usage?: Certificate.Usage;
            ocsp_stapling?: number;
            certificate_path?: string;
            key_path?: string;
            One_time_loading?: boolean;
            build_chain?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("certificate" in data && data.certificate != undefined) {
                    this.certificate = data.certificate;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("usage" in data && data.usage != undefined) {
                    this.usage = data.usage;
                }
                if ("ocsp_stapling" in data && data.ocsp_stapling != undefined) {
                    this.ocsp_stapling = data.ocsp_stapling;
                }
                if ("certificate_path" in data && data.certificate_path != undefined) {
                    this.certificate_path = data.certificate_path;
                }
                if ("key_path" in data && data.key_path != undefined) {
                    this.key_path = data.key_path;
                }
                if ("One_time_loading" in data && data.One_time_loading != undefined) {
                    this.One_time_loading = data.One_time_loading;
                }
                if ("build_chain" in data && data.build_chain != undefined) {
                    this.build_chain = data.build_chain;
                }
            }
        }
        get certificate() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set certificate(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set key(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get usage() {
            return pb_1.Message.getFieldWithDefault(this, 3, Certificate.Usage.ENCIPHERMENT) as Certificate.Usage;
        }
        set usage(value: Certificate.Usage) {
            pb_1.Message.setField(this, 3, value);
        }
        get ocsp_stapling() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set ocsp_stapling(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get certificate_path() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set certificate_path(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get key_path() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set key_path(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get One_time_loading() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set One_time_loading(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get build_chain() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set build_chain(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            certificate?: Uint8Array;
            key?: Uint8Array;
            usage?: Certificate.Usage;
            ocsp_stapling?: number;
            certificate_path?: string;
            key_path?: string;
            One_time_loading?: boolean;
            build_chain?: boolean;
        }): Certificate {
            const message = new Certificate({});
            if (data.certificate != null) {
                message.certificate = data.certificate;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.usage != null) {
                message.usage = data.usage;
            }
            if (data.ocsp_stapling != null) {
                message.ocsp_stapling = data.ocsp_stapling;
            }
            if (data.certificate_path != null) {
                message.certificate_path = data.certificate_path;
            }
            if (data.key_path != null) {
                message.key_path = data.key_path;
            }
            if (data.One_time_loading != null) {
                message.One_time_loading = data.One_time_loading;
            }
            if (data.build_chain != null) {
                message.build_chain = data.build_chain;
            }
            return message;
        }
        toObject() {
            const data: {
                certificate?: Uint8Array;
                key?: Uint8Array;
                usage?: Certificate.Usage;
                ocsp_stapling?: number;
                certificate_path?: string;
                key_path?: string;
                One_time_loading?: boolean;
                build_chain?: boolean;
            } = {};
            if (this.certificate != null) {
                data.certificate = this.certificate;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.usage != null) {
                data.usage = this.usage;
            }
            if (this.ocsp_stapling != null) {
                data.ocsp_stapling = this.ocsp_stapling;
            }
            if (this.certificate_path != null) {
                data.certificate_path = this.certificate_path;
            }
            if (this.key_path != null) {
                data.key_path = this.key_path;
            }
            if (this.One_time_loading != null) {
                data.One_time_loading = this.One_time_loading;
            }
            if (this.build_chain != null) {
                data.build_chain = this.build_chain;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.certificate.length)
                writer.writeBytes(1, this.certificate);
            if (this.key.length)
                writer.writeBytes(2, this.key);
            if (this.usage != Certificate.Usage.ENCIPHERMENT)
                writer.writeEnum(3, this.usage);
            if (this.ocsp_stapling != 0)
                writer.writeUint64(4, this.ocsp_stapling);
            if (this.certificate_path.length)
                writer.writeString(5, this.certificate_path);
            if (this.key_path.length)
                writer.writeString(6, this.key_path);
            if (this.One_time_loading != false)
                writer.writeBool(7, this.One_time_loading);
            if (this.build_chain != false)
                writer.writeBool(8, this.build_chain);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Certificate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Certificate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.certificate = reader.readBytes();
                        break;
                    case 2:
                        message.key = reader.readBytes();
                        break;
                    case 3:
                        message.usage = reader.readEnum();
                        break;
                    case 4:
                        message.ocsp_stapling = reader.readUint64();
                        break;
                    case 5:
                        message.certificate_path = reader.readString();
                        break;
                    case 6:
                        message.key_path = reader.readString();
                        break;
                    case 7:
                        message.One_time_loading = reader.readBool();
                        break;
                    case 8:
                        message.build_chain = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Certificate {
            return Certificate.deserialize(bytes);
        }
    }
    export namespace Certificate {
        export enum Usage {
            ENCIPHERMENT = 0,
            AUTHORITY_VERIFY = 1,
            AUTHORITY_ISSUE = 2
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            allow_insecure?: boolean;
            certificate?: Certificate[];
            server_name?: string;
            next_protocol?: string[];
            enable_session_resumption?: boolean;
            disable_system_root?: boolean;
            min_version?: string;
            max_version?: string;
            cipher_suites?: string;
            fingerprint?: string;
            reject_unknown_sni?: boolean;
            pinned_peer_certificate_chain_sha256?: Uint8Array[];
            pinned_peer_certificate_public_key_sha256?: Uint8Array[];
            master_key_log?: string;
            curve_preferences?: string[];
            verify_peer_cert_in_names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 4, 13, 14, 16, 17], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("allow_insecure" in data && data.allow_insecure != undefined) {
                    this.allow_insecure = data.allow_insecure;
                }
                if ("certificate" in data && data.certificate != undefined) {
                    this.certificate = data.certificate;
                }
                if ("server_name" in data && data.server_name != undefined) {
                    this.server_name = data.server_name;
                }
                if ("next_protocol" in data && data.next_protocol != undefined) {
                    this.next_protocol = data.next_protocol;
                }
                if ("enable_session_resumption" in data && data.enable_session_resumption != undefined) {
                    this.enable_session_resumption = data.enable_session_resumption;
                }
                if ("disable_system_root" in data && data.disable_system_root != undefined) {
                    this.disable_system_root = data.disable_system_root;
                }
                if ("min_version" in data && data.min_version != undefined) {
                    this.min_version = data.min_version;
                }
                if ("max_version" in data && data.max_version != undefined) {
                    this.max_version = data.max_version;
                }
                if ("cipher_suites" in data && data.cipher_suites != undefined) {
                    this.cipher_suites = data.cipher_suites;
                }
                if ("fingerprint" in data && data.fingerprint != undefined) {
                    this.fingerprint = data.fingerprint;
                }
                if ("reject_unknown_sni" in data && data.reject_unknown_sni != undefined) {
                    this.reject_unknown_sni = data.reject_unknown_sni;
                }
                if ("pinned_peer_certificate_chain_sha256" in data && data.pinned_peer_certificate_chain_sha256 != undefined) {
                    this.pinned_peer_certificate_chain_sha256 = data.pinned_peer_certificate_chain_sha256;
                }
                if ("pinned_peer_certificate_public_key_sha256" in data && data.pinned_peer_certificate_public_key_sha256 != undefined) {
                    this.pinned_peer_certificate_public_key_sha256 = data.pinned_peer_certificate_public_key_sha256;
                }
                if ("master_key_log" in data && data.master_key_log != undefined) {
                    this.master_key_log = data.master_key_log;
                }
                if ("curve_preferences" in data && data.curve_preferences != undefined) {
                    this.curve_preferences = data.curve_preferences;
                }
                if ("verify_peer_cert_in_names" in data && data.verify_peer_cert_in_names != undefined) {
                    this.verify_peer_cert_in_names = data.verify_peer_cert_in_names;
                }
            }
        }
        get allow_insecure() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set allow_insecure(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get certificate() {
            return pb_1.Message.getRepeatedWrapperField(this, Certificate, 2) as Certificate[];
        }
        set certificate(value: Certificate[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get server_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set server_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get next_protocol() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set next_protocol(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get enable_session_resumption() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set enable_session_resumption(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get disable_system_root() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set disable_system_root(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get min_version() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set min_version(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get max_version() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set max_version(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get cipher_suites() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set cipher_suites(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get fingerprint() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set fingerprint(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get reject_unknown_sni() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set reject_unknown_sni(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get pinned_peer_certificate_chain_sha256() {
            return pb_1.Message.getFieldWithDefault(this, 13, []) as Uint8Array[];
        }
        set pinned_peer_certificate_chain_sha256(value: Uint8Array[]) {
            pb_1.Message.setField(this, 13, value);
        }
        get pinned_peer_certificate_public_key_sha256() {
            return pb_1.Message.getFieldWithDefault(this, 14, []) as Uint8Array[];
        }
        set pinned_peer_certificate_public_key_sha256(value: Uint8Array[]) {
            pb_1.Message.setField(this, 14, value);
        }
        get master_key_log() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set master_key_log(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get curve_preferences() {
            return pb_1.Message.getFieldWithDefault(this, 16, []) as string[];
        }
        set curve_preferences(value: string[]) {
            pb_1.Message.setField(this, 16, value);
        }
        get verify_peer_cert_in_names() {
            return pb_1.Message.getFieldWithDefault(this, 17, []) as string[];
        }
        set verify_peer_cert_in_names(value: string[]) {
            pb_1.Message.setField(this, 17, value);
        }
        static fromObject(data: {
            allow_insecure?: boolean;
            certificate?: ReturnType<typeof Certificate.prototype.toObject>[];
            server_name?: string;
            next_protocol?: string[];
            enable_session_resumption?: boolean;
            disable_system_root?: boolean;
            min_version?: string;
            max_version?: string;
            cipher_suites?: string;
            fingerprint?: string;
            reject_unknown_sni?: boolean;
            pinned_peer_certificate_chain_sha256?: Uint8Array[];
            pinned_peer_certificate_public_key_sha256?: Uint8Array[];
            master_key_log?: string;
            curve_preferences?: string[];
            verify_peer_cert_in_names?: string[];
        }): Config {
            const message = new Config({});
            if (data.allow_insecure != null) {
                message.allow_insecure = data.allow_insecure;
            }
            if (data.certificate != null) {
                message.certificate = data.certificate.map(item => Certificate.fromObject(item));
            }
            if (data.server_name != null) {
                message.server_name = data.server_name;
            }
            if (data.next_protocol != null) {
                message.next_protocol = data.next_protocol;
            }
            if (data.enable_session_resumption != null) {
                message.enable_session_resumption = data.enable_session_resumption;
            }
            if (data.disable_system_root != null) {
                message.disable_system_root = data.disable_system_root;
            }
            if (data.min_version != null) {
                message.min_version = data.min_version;
            }
            if (data.max_version != null) {
                message.max_version = data.max_version;
            }
            if (data.cipher_suites != null) {
                message.cipher_suites = data.cipher_suites;
            }
            if (data.fingerprint != null) {
                message.fingerprint = data.fingerprint;
            }
            if (data.reject_unknown_sni != null) {
                message.reject_unknown_sni = data.reject_unknown_sni;
            }
            if (data.pinned_peer_certificate_chain_sha256 != null) {
                message.pinned_peer_certificate_chain_sha256 = data.pinned_peer_certificate_chain_sha256;
            }
            if (data.pinned_peer_certificate_public_key_sha256 != null) {
                message.pinned_peer_certificate_public_key_sha256 = data.pinned_peer_certificate_public_key_sha256;
            }
            if (data.master_key_log != null) {
                message.master_key_log = data.master_key_log;
            }
            if (data.curve_preferences != null) {
                message.curve_preferences = data.curve_preferences;
            }
            if (data.verify_peer_cert_in_names != null) {
                message.verify_peer_cert_in_names = data.verify_peer_cert_in_names;
            }
            return message;
        }
        toObject() {
            const data: {
                allow_insecure?: boolean;
                certificate?: ReturnType<typeof Certificate.prototype.toObject>[];
                server_name?: string;
                next_protocol?: string[];
                enable_session_resumption?: boolean;
                disable_system_root?: boolean;
                min_version?: string;
                max_version?: string;
                cipher_suites?: string;
                fingerprint?: string;
                reject_unknown_sni?: boolean;
                pinned_peer_certificate_chain_sha256?: Uint8Array[];
                pinned_peer_certificate_public_key_sha256?: Uint8Array[];
                master_key_log?: string;
                curve_preferences?: string[];
                verify_peer_cert_in_names?: string[];
            } = {};
            if (this.allow_insecure != null) {
                data.allow_insecure = this.allow_insecure;
            }
            if (this.certificate != null) {
                data.certificate = this.certificate.map((item: Certificate) => item.toObject());
            }
            if (this.server_name != null) {
                data.server_name = this.server_name;
            }
            if (this.next_protocol != null) {
                data.next_protocol = this.next_protocol;
            }
            if (this.enable_session_resumption != null) {
                data.enable_session_resumption = this.enable_session_resumption;
            }
            if (this.disable_system_root != null) {
                data.disable_system_root = this.disable_system_root;
            }
            if (this.min_version != null) {
                data.min_version = this.min_version;
            }
            if (this.max_version != null) {
                data.max_version = this.max_version;
            }
            if (this.cipher_suites != null) {
                data.cipher_suites = this.cipher_suites;
            }
            if (this.fingerprint != null) {
                data.fingerprint = this.fingerprint;
            }
            if (this.reject_unknown_sni != null) {
                data.reject_unknown_sni = this.reject_unknown_sni;
            }
            if (this.pinned_peer_certificate_chain_sha256 != null) {
                data.pinned_peer_certificate_chain_sha256 = this.pinned_peer_certificate_chain_sha256;
            }
            if (this.pinned_peer_certificate_public_key_sha256 != null) {
                data.pinned_peer_certificate_public_key_sha256 = this.pinned_peer_certificate_public_key_sha256;
            }
            if (this.master_key_log != null) {
                data.master_key_log = this.master_key_log;
            }
            if (this.curve_preferences != null) {
                data.curve_preferences = this.curve_preferences;
            }
            if (this.verify_peer_cert_in_names != null) {
                data.verify_peer_cert_in_names = this.verify_peer_cert_in_names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.allow_insecure != false)
                writer.writeBool(1, this.allow_insecure);
            if (this.certificate.length)
                writer.writeRepeatedMessage(2, this.certificate, (item: Certificate) => item.serialize(writer));
            if (this.server_name.length)
                writer.writeString(3, this.server_name);
            if (this.next_protocol.length)
                writer.writeRepeatedString(4, this.next_protocol);
            if (this.enable_session_resumption != false)
                writer.writeBool(5, this.enable_session_resumption);
            if (this.disable_system_root != false)
                writer.writeBool(6, this.disable_system_root);
            if (this.min_version.length)
                writer.writeString(7, this.min_version);
            if (this.max_version.length)
                writer.writeString(8, this.max_version);
            if (this.cipher_suites.length)
                writer.writeString(9, this.cipher_suites);
            if (this.fingerprint.length)
                writer.writeString(11, this.fingerprint);
            if (this.reject_unknown_sni != false)
                writer.writeBool(12, this.reject_unknown_sni);
            if (this.pinned_peer_certificate_chain_sha256.length)
                writer.writeRepeatedBytes(13, this.pinned_peer_certificate_chain_sha256);
            if (this.pinned_peer_certificate_public_key_sha256.length)
                writer.writeRepeatedBytes(14, this.pinned_peer_certificate_public_key_sha256);
            if (this.master_key_log.length)
                writer.writeString(15, this.master_key_log);
            if (this.curve_preferences.length)
                writer.writeRepeatedString(16, this.curve_preferences);
            if (this.verify_peer_cert_in_names.length)
                writer.writeRepeatedString(17, this.verify_peer_cert_in_names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.allow_insecure = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.certificate, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Certificate.deserialize(reader), Certificate));
                        break;
                    case 3:
                        message.server_name = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.enable_session_resumption = reader.readBool();
                        break;
                    case 6:
                        message.disable_system_root = reader.readBool();
                        break;
                    case 7:
                        message.min_version = reader.readString();
                        break;
                    case 8:
                        message.max_version = reader.readString();
                        break;
                    case 9:
                        message.cipher_suites = reader.readString();
                        break;
                    case 11:
                        message.fingerprint = reader.readString();
                        break;
                    case 12:
                        message.reject_unknown_sni = reader.readBool();
                        break;
                    case 13:
                        pb_1.Message.addToRepeatedField(message, 13, reader.readBytes());
                        break;
                    case 14:
                        pb_1.Message.addToRepeatedField(message, 14, reader.readBytes());
                        break;
                    case 15:
                        message.master_key_log = reader.readString();
                        break;
                    case 16:
                        pb_1.Message.addToRepeatedField(message, 16, reader.readString());
                        break;
                    case 17:
                        pb_1.Message.addToRepeatedField(message, 17, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
