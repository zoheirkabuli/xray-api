// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: app/reverse/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "xray.app.reverse";

export interface Control {
  state: Control_State;
  random: Uint8Array;
}

export enum Control_State {
  ACTIVE = 0,
  DRAIN = 1,
  UNRECOGNIZED = -1,
}

export function control_StateFromJSON(object: any): Control_State {
  switch (object) {
    case 0:
    case "ACTIVE":
      return Control_State.ACTIVE;
    case 1:
    case "DRAIN":
      return Control_State.DRAIN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Control_State.UNRECOGNIZED;
  }
}

export function control_StateToJSON(object: Control_State): string {
  switch (object) {
    case Control_State.ACTIVE:
      return "ACTIVE";
    case Control_State.DRAIN:
      return "DRAIN";
    case Control_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BridgeConfig {
  tag: string;
  domain: string;
}

export interface PortalConfig {
  tag: string;
  domain: string;
}

export interface Config {
  bridgeConfig: BridgeConfig[];
  portalConfig: PortalConfig[];
}

function createBaseControl(): Control {
  return { state: 0, random: new Uint8Array(0) };
}

export const Control: MessageFns<Control> = {
  encode(message: Control, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.random.length !== 0) {
      writer.uint32(794).bytes(message.random);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Control {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseControl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.random = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Control {
    return {
      state: isSet(object.state) ? control_StateFromJSON(object.state) : 0,
      random: isSet(object.random) ? bytesFromBase64(object.random) : new Uint8Array(0),
    };
  },

  toJSON(message: Control): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = control_StateToJSON(message.state);
    }
    if (message.random.length !== 0) {
      obj.random = base64FromBytes(message.random);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Control>, I>>(base?: I): Control {
    return Control.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Control>, I>>(object: I): Control {
    const message = createBaseControl();
    message.state = object.state ?? 0;
    message.random = object.random ?? new Uint8Array(0);
    return message;
  },
};

function createBaseBridgeConfig(): BridgeConfig {
  return { tag: "", domain: "" };
}

export const BridgeConfig: MessageFns<BridgeConfig> = {
  encode(message: BridgeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== "") {
      writer.uint32(10).string(message.tag);
    }
    if (message.domain !== "") {
      writer.uint32(18).string(message.domain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BridgeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBridgeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BridgeConfig {
    return {
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
    };
  },

  toJSON(message: BridgeConfig): unknown {
    const obj: any = {};
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BridgeConfig>, I>>(base?: I): BridgeConfig {
    return BridgeConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BridgeConfig>, I>>(object: I): BridgeConfig {
    const message = createBaseBridgeConfig();
    message.tag = object.tag ?? "";
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBasePortalConfig(): PortalConfig {
  return { tag: "", domain: "" };
}

export const PortalConfig: MessageFns<PortalConfig> = {
  encode(message: PortalConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== "") {
      writer.uint32(10).string(message.tag);
    }
    if (message.domain !== "") {
      writer.uint32(18).string(message.domain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PortalConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePortalConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PortalConfig {
    return {
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
    };
  },

  toJSON(message: PortalConfig): unknown {
    const obj: any = {};
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PortalConfig>, I>>(base?: I): PortalConfig {
    return PortalConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PortalConfig>, I>>(object: I): PortalConfig {
    const message = createBasePortalConfig();
    message.tag = object.tag ?? "";
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseConfig(): Config {
  return { bridgeConfig: [], portalConfig: [] };
}

export const Config: MessageFns<Config> = {
  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.bridgeConfig) {
      BridgeConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.portalConfig) {
      PortalConfig.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bridgeConfig.push(BridgeConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.portalConfig.push(PortalConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      bridgeConfig: globalThis.Array.isArray(object?.bridgeConfig)
        ? object.bridgeConfig.map((e: any) => BridgeConfig.fromJSON(e))
        : [],
      portalConfig: globalThis.Array.isArray(object?.portalConfig)
        ? object.portalConfig.map((e: any) => PortalConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.bridgeConfig?.length) {
      obj.bridgeConfig = message.bridgeConfig.map((e) => BridgeConfig.toJSON(e));
    }
    if (message.portalConfig?.length) {
      obj.portalConfig = message.portalConfig.map((e) => PortalConfig.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.bridgeConfig = object.bridgeConfig?.map((e) => BridgeConfig.fromPartial(e)) || [];
    message.portalConfig = object.portalConfig?.map((e) => PortalConfig.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
