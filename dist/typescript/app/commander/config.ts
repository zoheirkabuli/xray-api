/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: app/commander/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/serial/typed_message";
import * as pb_1 from "google-protobuf";
export namespace xray.app.commander {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tag?: string;
            listen?: string;
            service?: dependency_1.xray.common.serial.TypedMessage[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
                if ("listen" in data && data.listen != undefined) {
                    this.listen = data.listen;
                }
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
            }
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get listen() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set listen(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get service() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 2) as dependency_1.xray.common.serial.TypedMessage[];
        }
        set service(value: dependency_1.xray.common.serial.TypedMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            tag?: string;
            listen?: string;
            service?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>[];
        }): Config {
            const message = new Config({});
            if (data.tag != null) {
                message.tag = data.tag;
            }
            if (data.listen != null) {
                message.listen = data.listen;
            }
            if (data.service != null) {
                message.service = data.service.map(item => dependency_1.xray.common.serial.TypedMessage.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                tag?: string;
                listen?: string;
                service?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>[];
            } = {};
            if (this.tag != null) {
                data.tag = this.tag;
            }
            if (this.listen != null) {
                data.listen = this.listen;
            }
            if (this.service != null) {
                data.service = this.service.map((item: dependency_1.xray.common.serial.TypedMessage) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tag.length)
                writer.writeString(1, this.tag);
            if (this.listen.length)
                writer.writeString(3, this.listen);
            if (this.service.length)
                writer.writeRepeatedMessage(2, this.service, (item: dependency_1.xray.common.serial.TypedMessage) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tag = reader.readString();
                        break;
                    case 3:
                        message.listen = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.service, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.xray.common.serial.TypedMessage.deserialize(reader), dependency_1.xray.common.serial.TypedMessage));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
    export class ReflectionConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReflectionConfig {
            const message = new ReflectionConfig({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReflectionConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReflectionConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReflectionConfig {
            return ReflectionConfig.deserialize(bytes);
        }
    }
}
