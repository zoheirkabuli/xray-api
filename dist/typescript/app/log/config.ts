/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: app/log/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../common/log/log";
import * as pb_1 from "google-protobuf";
export namespace xray.app.log {
    export enum LogType {
        None = 0,
        Console = 1,
        File = 2,
        Event = 3
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            error_log_type?: LogType;
            error_log_level?: dependency_1.xray.common.log.Severity;
            error_log_path?: string;
            access_log_type?: LogType;
            access_log_path?: string;
            enable_dns_log?: boolean;
            mask_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_log_type" in data && data.error_log_type != undefined) {
                    this.error_log_type = data.error_log_type;
                }
                if ("error_log_level" in data && data.error_log_level != undefined) {
                    this.error_log_level = data.error_log_level;
                }
                if ("error_log_path" in data && data.error_log_path != undefined) {
                    this.error_log_path = data.error_log_path;
                }
                if ("access_log_type" in data && data.access_log_type != undefined) {
                    this.access_log_type = data.access_log_type;
                }
                if ("access_log_path" in data && data.access_log_path != undefined) {
                    this.access_log_path = data.access_log_path;
                }
                if ("enable_dns_log" in data && data.enable_dns_log != undefined) {
                    this.enable_dns_log = data.enable_dns_log;
                }
                if ("mask_address" in data && data.mask_address != undefined) {
                    this.mask_address = data.mask_address;
                }
            }
        }
        get error_log_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, LogType.None) as LogType;
        }
        set error_log_type(value: LogType) {
            pb_1.Message.setField(this, 1, value);
        }
        get error_log_level() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.xray.common.log.Severity.Unknown) as dependency_1.xray.common.log.Severity;
        }
        set error_log_level(value: dependency_1.xray.common.log.Severity) {
            pb_1.Message.setField(this, 2, value);
        }
        get error_log_path() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error_log_path(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get access_log_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, LogType.None) as LogType;
        }
        set access_log_type(value: LogType) {
            pb_1.Message.setField(this, 4, value);
        }
        get access_log_path() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set access_log_path(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get enable_dns_log() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set enable_dns_log(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get mask_address() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set mask_address(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            error_log_type?: LogType;
            error_log_level?: dependency_1.xray.common.log.Severity;
            error_log_path?: string;
            access_log_type?: LogType;
            access_log_path?: string;
            enable_dns_log?: boolean;
            mask_address?: string;
        }): Config {
            const message = new Config({});
            if (data.error_log_type != null) {
                message.error_log_type = data.error_log_type;
            }
            if (data.error_log_level != null) {
                message.error_log_level = data.error_log_level;
            }
            if (data.error_log_path != null) {
                message.error_log_path = data.error_log_path;
            }
            if (data.access_log_type != null) {
                message.access_log_type = data.access_log_type;
            }
            if (data.access_log_path != null) {
                message.access_log_path = data.access_log_path;
            }
            if (data.enable_dns_log != null) {
                message.enable_dns_log = data.enable_dns_log;
            }
            if (data.mask_address != null) {
                message.mask_address = data.mask_address;
            }
            return message;
        }
        toObject() {
            const data: {
                error_log_type?: LogType;
                error_log_level?: dependency_1.xray.common.log.Severity;
                error_log_path?: string;
                access_log_type?: LogType;
                access_log_path?: string;
                enable_dns_log?: boolean;
                mask_address?: string;
            } = {};
            if (this.error_log_type != null) {
                data.error_log_type = this.error_log_type;
            }
            if (this.error_log_level != null) {
                data.error_log_level = this.error_log_level;
            }
            if (this.error_log_path != null) {
                data.error_log_path = this.error_log_path;
            }
            if (this.access_log_type != null) {
                data.access_log_type = this.access_log_type;
            }
            if (this.access_log_path != null) {
                data.access_log_path = this.access_log_path;
            }
            if (this.enable_dns_log != null) {
                data.enable_dns_log = this.enable_dns_log;
            }
            if (this.mask_address != null) {
                data.mask_address = this.mask_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_log_type != LogType.None)
                writer.writeEnum(1, this.error_log_type);
            if (this.error_log_level != dependency_1.xray.common.log.Severity.Unknown)
                writer.writeEnum(2, this.error_log_level);
            if (this.error_log_path.length)
                writer.writeString(3, this.error_log_path);
            if (this.access_log_type != LogType.None)
                writer.writeEnum(4, this.access_log_type);
            if (this.access_log_path.length)
                writer.writeString(5, this.access_log_path);
            if (this.enable_dns_log != false)
                writer.writeBool(6, this.enable_dns_log);
            if (this.mask_address.length)
                writer.writeString(7, this.mask_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_log_type = reader.readEnum();
                        break;
                    case 2:
                        message.error_log_level = reader.readEnum();
                        break;
                    case 3:
                        message.error_log_path = reader.readString();
                        break;
                    case 4:
                        message.access_log_type = reader.readEnum();
                        break;
                    case 5:
                        message.access_log_path = reader.readString();
                        break;
                    case 6:
                        message.enable_dns_log = reader.readBool();
                        break;
                    case 7:
                        message.mask_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
