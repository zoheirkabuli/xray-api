/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: app/stats/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.app.stats {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Config {
            const message = new Config({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
    export class ChannelConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Blocking?: boolean;
            SubscriberLimit?: number;
            BufferSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Blocking" in data && data.Blocking != undefined) {
                    this.Blocking = data.Blocking;
                }
                if ("SubscriberLimit" in data && data.SubscriberLimit != undefined) {
                    this.SubscriberLimit = data.SubscriberLimit;
                }
                if ("BufferSize" in data && data.BufferSize != undefined) {
                    this.BufferSize = data.BufferSize;
                }
            }
        }
        get Blocking() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set Blocking(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get SubscriberLimit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set SubscriberLimit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get BufferSize() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set BufferSize(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            Blocking?: boolean;
            SubscriberLimit?: number;
            BufferSize?: number;
        }): ChannelConfig {
            const message = new ChannelConfig({});
            if (data.Blocking != null) {
                message.Blocking = data.Blocking;
            }
            if (data.SubscriberLimit != null) {
                message.SubscriberLimit = data.SubscriberLimit;
            }
            if (data.BufferSize != null) {
                message.BufferSize = data.BufferSize;
            }
            return message;
        }
        toObject() {
            const data: {
                Blocking?: boolean;
                SubscriberLimit?: number;
                BufferSize?: number;
            } = {};
            if (this.Blocking != null) {
                data.Blocking = this.Blocking;
            }
            if (this.SubscriberLimit != null) {
                data.SubscriberLimit = this.SubscriberLimit;
            }
            if (this.BufferSize != null) {
                data.BufferSize = this.BufferSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Blocking != false)
                writer.writeBool(1, this.Blocking);
            if (this.SubscriberLimit != 0)
                writer.writeInt32(2, this.SubscriberLimit);
            if (this.BufferSize != 0)
                writer.writeInt32(3, this.BufferSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChannelConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChannelConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Blocking = reader.readBool();
                        break;
                    case 2:
                        message.SubscriberLimit = reader.readInt32();
                        break;
                    case 3:
                        message.BufferSize = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChannelConfig {
            return ChannelConfig.deserialize(bytes);
        }
    }
}
