/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: app/stats/command/command.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace xray.app.stats.command {
    export class GetStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            reset?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("reset" in data && data.reset != undefined) {
                    this.reset = data.reset;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get reset() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set reset(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            reset?: boolean;
        }): GetStatsRequest {
            const message = new GetStatsRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.reset != null) {
                message.reset = data.reset;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                reset?: boolean;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.reset != null) {
                data.reset = this.reset;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.reset != false)
                writer.writeBool(2, this.reset);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.reset = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStatsRequest {
            return GetStatsRequest.deserialize(bytes);
        }
    }
    export class Stat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            value?: number;
        }): Stat {
            const message = new Stat({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                value?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.value != 0)
                writer.writeInt64(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Stat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Stat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Stat {
            return Stat.deserialize(bytes);
        }
    }
    export class GetStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stat?: Stat;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stat" in data && data.stat != undefined) {
                    this.stat = data.stat;
                }
            }
        }
        get stat() {
            return pb_1.Message.getWrapperField(this, Stat, 1) as Stat;
        }
        set stat(value: Stat) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_stat() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            stat?: ReturnType<typeof Stat.prototype.toObject>;
        }): GetStatsResponse {
            const message = new GetStatsResponse({});
            if (data.stat != null) {
                message.stat = Stat.fromObject(data.stat);
            }
            return message;
        }
        toObject() {
            const data: {
                stat?: ReturnType<typeof Stat.prototype.toObject>;
            } = {};
            if (this.stat != null) {
                data.stat = this.stat.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stat)
                writer.writeMessage(1, this.stat, () => this.stat.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stat, () => message.stat = Stat.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStatsResponse {
            return GetStatsResponse.deserialize(bytes);
        }
    }
    export class QueryStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pattern?: string;
            reset?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pattern" in data && data.pattern != undefined) {
                    this.pattern = data.pattern;
                }
                if ("reset" in data && data.reset != undefined) {
                    this.reset = data.reset;
                }
            }
        }
        get pattern() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set pattern(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get reset() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set reset(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            pattern?: string;
            reset?: boolean;
        }): QueryStatsRequest {
            const message = new QueryStatsRequest({});
            if (data.pattern != null) {
                message.pattern = data.pattern;
            }
            if (data.reset != null) {
                message.reset = data.reset;
            }
            return message;
        }
        toObject() {
            const data: {
                pattern?: string;
                reset?: boolean;
            } = {};
            if (this.pattern != null) {
                data.pattern = this.pattern;
            }
            if (this.reset != null) {
                data.reset = this.reset;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pattern.length)
                writer.writeString(1, this.pattern);
            if (this.reset != false)
                writer.writeBool(2, this.reset);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pattern = reader.readString();
                        break;
                    case 2:
                        message.reset = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryStatsRequest {
            return QueryStatsRequest.deserialize(bytes);
        }
    }
    export class QueryStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stat?: Stat[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stat" in data && data.stat != undefined) {
                    this.stat = data.stat;
                }
            }
        }
        get stat() {
            return pb_1.Message.getRepeatedWrapperField(this, Stat, 1) as Stat[];
        }
        set stat(value: Stat[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            stat?: ReturnType<typeof Stat.prototype.toObject>[];
        }): QueryStatsResponse {
            const message = new QueryStatsResponse({});
            if (data.stat != null) {
                message.stat = data.stat.map(item => Stat.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                stat?: ReturnType<typeof Stat.prototype.toObject>[];
            } = {};
            if (this.stat != null) {
                data.stat = this.stat.map((item: Stat) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stat.length)
                writer.writeRepeatedMessage(1, this.stat, (item: Stat) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stat, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Stat.deserialize(reader), Stat));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryStatsResponse {
            return QueryStatsResponse.deserialize(bytes);
        }
    }
    export class SysStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SysStatsRequest {
            const message = new SysStatsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SysStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SysStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SysStatsRequest {
            return SysStatsRequest.deserialize(bytes);
        }
    }
    export class SysStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            NumGoroutine?: number;
            NumGC?: number;
            Alloc?: number;
            TotalAlloc?: number;
            Sys?: number;
            Mallocs?: number;
            Frees?: number;
            LiveObjects?: number;
            PauseTotalNs?: number;
            Uptime?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("NumGoroutine" in data && data.NumGoroutine != undefined) {
                    this.NumGoroutine = data.NumGoroutine;
                }
                if ("NumGC" in data && data.NumGC != undefined) {
                    this.NumGC = data.NumGC;
                }
                if ("Alloc" in data && data.Alloc != undefined) {
                    this.Alloc = data.Alloc;
                }
                if ("TotalAlloc" in data && data.TotalAlloc != undefined) {
                    this.TotalAlloc = data.TotalAlloc;
                }
                if ("Sys" in data && data.Sys != undefined) {
                    this.Sys = data.Sys;
                }
                if ("Mallocs" in data && data.Mallocs != undefined) {
                    this.Mallocs = data.Mallocs;
                }
                if ("Frees" in data && data.Frees != undefined) {
                    this.Frees = data.Frees;
                }
                if ("LiveObjects" in data && data.LiveObjects != undefined) {
                    this.LiveObjects = data.LiveObjects;
                }
                if ("PauseTotalNs" in data && data.PauseTotalNs != undefined) {
                    this.PauseTotalNs = data.PauseTotalNs;
                }
                if ("Uptime" in data && data.Uptime != undefined) {
                    this.Uptime = data.Uptime;
                }
            }
        }
        get NumGoroutine() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set NumGoroutine(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get NumGC() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set NumGC(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get Alloc() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set Alloc(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get TotalAlloc() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set TotalAlloc(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get Sys() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set Sys(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get Mallocs() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set Mallocs(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get Frees() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set Frees(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get LiveObjects() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set LiveObjects(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get PauseTotalNs() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set PauseTotalNs(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get Uptime() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set Uptime(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            NumGoroutine?: number;
            NumGC?: number;
            Alloc?: number;
            TotalAlloc?: number;
            Sys?: number;
            Mallocs?: number;
            Frees?: number;
            LiveObjects?: number;
            PauseTotalNs?: number;
            Uptime?: number;
        }): SysStatsResponse {
            const message = new SysStatsResponse({});
            if (data.NumGoroutine != null) {
                message.NumGoroutine = data.NumGoroutine;
            }
            if (data.NumGC != null) {
                message.NumGC = data.NumGC;
            }
            if (data.Alloc != null) {
                message.Alloc = data.Alloc;
            }
            if (data.TotalAlloc != null) {
                message.TotalAlloc = data.TotalAlloc;
            }
            if (data.Sys != null) {
                message.Sys = data.Sys;
            }
            if (data.Mallocs != null) {
                message.Mallocs = data.Mallocs;
            }
            if (data.Frees != null) {
                message.Frees = data.Frees;
            }
            if (data.LiveObjects != null) {
                message.LiveObjects = data.LiveObjects;
            }
            if (data.PauseTotalNs != null) {
                message.PauseTotalNs = data.PauseTotalNs;
            }
            if (data.Uptime != null) {
                message.Uptime = data.Uptime;
            }
            return message;
        }
        toObject() {
            const data: {
                NumGoroutine?: number;
                NumGC?: number;
                Alloc?: number;
                TotalAlloc?: number;
                Sys?: number;
                Mallocs?: number;
                Frees?: number;
                LiveObjects?: number;
                PauseTotalNs?: number;
                Uptime?: number;
            } = {};
            if (this.NumGoroutine != null) {
                data.NumGoroutine = this.NumGoroutine;
            }
            if (this.NumGC != null) {
                data.NumGC = this.NumGC;
            }
            if (this.Alloc != null) {
                data.Alloc = this.Alloc;
            }
            if (this.TotalAlloc != null) {
                data.TotalAlloc = this.TotalAlloc;
            }
            if (this.Sys != null) {
                data.Sys = this.Sys;
            }
            if (this.Mallocs != null) {
                data.Mallocs = this.Mallocs;
            }
            if (this.Frees != null) {
                data.Frees = this.Frees;
            }
            if (this.LiveObjects != null) {
                data.LiveObjects = this.LiveObjects;
            }
            if (this.PauseTotalNs != null) {
                data.PauseTotalNs = this.PauseTotalNs;
            }
            if (this.Uptime != null) {
                data.Uptime = this.Uptime;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.NumGoroutine != 0)
                writer.writeUint32(1, this.NumGoroutine);
            if (this.NumGC != 0)
                writer.writeUint32(2, this.NumGC);
            if (this.Alloc != 0)
                writer.writeUint64(3, this.Alloc);
            if (this.TotalAlloc != 0)
                writer.writeUint64(4, this.TotalAlloc);
            if (this.Sys != 0)
                writer.writeUint64(5, this.Sys);
            if (this.Mallocs != 0)
                writer.writeUint64(6, this.Mallocs);
            if (this.Frees != 0)
                writer.writeUint64(7, this.Frees);
            if (this.LiveObjects != 0)
                writer.writeUint64(8, this.LiveObjects);
            if (this.PauseTotalNs != 0)
                writer.writeUint64(9, this.PauseTotalNs);
            if (this.Uptime != 0)
                writer.writeUint32(10, this.Uptime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SysStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SysStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.NumGoroutine = reader.readUint32();
                        break;
                    case 2:
                        message.NumGC = reader.readUint32();
                        break;
                    case 3:
                        message.Alloc = reader.readUint64();
                        break;
                    case 4:
                        message.TotalAlloc = reader.readUint64();
                        break;
                    case 5:
                        message.Sys = reader.readUint64();
                        break;
                    case 6:
                        message.Mallocs = reader.readUint64();
                        break;
                    case 7:
                        message.Frees = reader.readUint64();
                        break;
                    case 8:
                        message.LiveObjects = reader.readUint64();
                        break;
                    case 9:
                        message.PauseTotalNs = reader.readUint64();
                        break;
                    case 10:
                        message.Uptime = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SysStatsResponse {
            return SysStatsResponse.deserialize(bytes);
        }
    }
    export class GetStatsOnlineIpListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            ips?: Map<string, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("ips" in data && data.ips != undefined) {
                    this.ips = data.ips;
                }
            }
            if (!this.ips)
                this.ips = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ips() {
            return pb_1.Message.getField(this, 2) as any as Map<string, number>;
        }
        set ips(value: Map<string, number>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            name?: string;
            ips?: {
                [key: string]: number;
            };
        }): GetStatsOnlineIpListResponse {
            const message = new GetStatsOnlineIpListResponse({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (typeof data.ips == "object") {
                message.ips = new Map(Object.entries(data.ips));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                ips?: {
                    [key: string]: number;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.ips != null) {
                data.ips = (Object.fromEntries)(this.ips);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            for (const [key, value] of this.ips) {
                writer.writeMessage(2, this.ips, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStatsOnlineIpListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStatsOnlineIpListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.ips as any, reader, reader.readString, reader.readInt64));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStatsOnlineIpListResponse {
            return GetStatsOnlineIpListResponse.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Config {
            const message = new Config({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedStatsServiceService {
        static definition = {
            GetStats: {
                path: "/xray.app.stats.command.StatsService/GetStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetStatsResponse.deserialize(new Uint8Array(bytes))
            },
            GetStatsOnline: {
                path: "/xray.app.stats.command.StatsService/GetStatsOnline",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetStatsResponse.deserialize(new Uint8Array(bytes))
            },
            QueryStats: {
                path: "/xray.app.stats.command.StatsService/QueryStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryStatsResponse.deserialize(new Uint8Array(bytes))
            },
            GetSysStats: {
                path: "/xray.app.stats.command.StatsService/GetSysStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SysStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SysStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SysStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SysStatsResponse.deserialize(new Uint8Array(bytes))
            },
            GetStatsOnlineIpList: {
                path: "/xray.app.stats.command.StatsService/GetStatsOnlineIpList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetStatsOnlineIpListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetStatsOnlineIpListResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetStats(call: grpc_1.ServerUnaryCall<GetStatsRequest, GetStatsResponse>, callback: grpc_1.sendUnaryData<GetStatsResponse>): void;
        abstract GetStatsOnline(call: grpc_1.ServerUnaryCall<GetStatsRequest, GetStatsResponse>, callback: grpc_1.sendUnaryData<GetStatsResponse>): void;
        abstract QueryStats(call: grpc_1.ServerUnaryCall<QueryStatsRequest, QueryStatsResponse>, callback: grpc_1.sendUnaryData<QueryStatsResponse>): void;
        abstract GetSysStats(call: grpc_1.ServerUnaryCall<SysStatsRequest, SysStatsResponse>, callback: grpc_1.sendUnaryData<SysStatsResponse>): void;
        abstract GetStatsOnlineIpList(call: grpc_1.ServerUnaryCall<GetStatsRequest, GetStatsOnlineIpListResponse>, callback: grpc_1.sendUnaryData<GetStatsOnlineIpListResponse>): void;
    }
    export class StatsServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedStatsServiceService.definition, "StatsService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetStats: GrpcUnaryServiceInterface<GetStatsRequest, GetStatsResponse> = (message: GetStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetStatsResponse>, callback?: grpc_1.requestCallback<GetStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetStats(message, metadata, options, callback);
        };
        GetStatsOnline: GrpcUnaryServiceInterface<GetStatsRequest, GetStatsResponse> = (message: GetStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetStatsResponse>, callback?: grpc_1.requestCallback<GetStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetStatsOnline(message, metadata, options, callback);
        };
        QueryStats: GrpcUnaryServiceInterface<QueryStatsRequest, QueryStatsResponse> = (message: QueryStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryStatsResponse>, callback?: grpc_1.requestCallback<QueryStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryStats(message, metadata, options, callback);
        };
        GetSysStats: GrpcUnaryServiceInterface<SysStatsRequest, SysStatsResponse> = (message: SysStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SysStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SysStatsResponse>, callback?: grpc_1.requestCallback<SysStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetSysStats(message, metadata, options, callback);
        };
        GetStatsOnlineIpList: GrpcUnaryServiceInterface<GetStatsRequest, GetStatsOnlineIpListResponse> = (message: GetStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetStatsOnlineIpListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetStatsOnlineIpListResponse>, callback?: grpc_1.requestCallback<GetStatsOnlineIpListResponse>): grpc_1.ClientUnaryCall => {
            return super.GetStatsOnlineIpList(message, metadata, options, callback);
        };
    }
}
