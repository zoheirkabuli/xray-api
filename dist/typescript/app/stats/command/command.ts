// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: app/stats/command/command.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "xray.app.stats.command";

export interface GetStatsRequest {
  /** Name of the stat counter. */
  name: string;
  /** Whether or not to reset the counter to fetching its value. */
  reset: boolean;
}

export interface Stat {
  name: string;
  value: number;
}

export interface GetStatsResponse {
  stat: Stat | undefined;
}

export interface QueryStatsRequest {
  pattern: string;
  reset: boolean;
}

export interface QueryStatsResponse {
  stat: Stat[];
}

export interface SysStatsRequest {
}

export interface SysStatsResponse {
  NumGoroutine: number;
  NumGC: number;
  Alloc: number;
  TotalAlloc: number;
  Sys: number;
  Mallocs: number;
  Frees: number;
  LiveObjects: number;
  PauseTotalNs: number;
  Uptime: number;
}

export interface GetStatsOnlineIpListResponse {
  name: string;
  ips: { [key: string]: number };
}

export interface GetStatsOnlineIpListResponse_IpsEntry {
  key: string;
  value: number;
}

export interface Config {
}

function createBaseGetStatsRequest(): GetStatsRequest {
  return { name: "", reset: false };
}

export const GetStatsRequest: MessageFns<GetStatsRequest> = {
  encode(message: GetStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.reset !== false) {
      writer.uint32(16).bool(message.reset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.reset = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStatsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      reset: isSet(object.reset) ? globalThis.Boolean(object.reset) : false,
    };
  },

  toJSON(message: GetStatsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.reset !== false) {
      obj.reset = message.reset;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStatsRequest>, I>>(base?: I): GetStatsRequest {
    return GetStatsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStatsRequest>, I>>(object: I): GetStatsRequest {
    const message = createBaseGetStatsRequest();
    message.name = object.name ?? "";
    message.reset = object.reset ?? false;
    return message;
  },
};

function createBaseStat(): Stat {
  return { name: "", value: 0 };
}

export const Stat: MessageFns<Stat> = {
  encode(message: Stat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== 0) {
      writer.uint32(16).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Stat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Stat {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Stat): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Stat>, I>>(base?: I): Stat {
    return Stat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stat>, I>>(object: I): Stat {
    const message = createBaseStat();
    message.name = object.name ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseGetStatsResponse(): GetStatsResponse {
  return { stat: undefined };
}

export const GetStatsResponse: MessageFns<GetStatsResponse> = {
  encode(message: GetStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat !== undefined) {
      Stat.encode(message.stat, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat = Stat.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStatsResponse {
    return { stat: isSet(object.stat) ? Stat.fromJSON(object.stat) : undefined };
  },

  toJSON(message: GetStatsResponse): unknown {
    const obj: any = {};
    if (message.stat !== undefined) {
      obj.stat = Stat.toJSON(message.stat);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStatsResponse>, I>>(base?: I): GetStatsResponse {
    return GetStatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStatsResponse>, I>>(object: I): GetStatsResponse {
    const message = createBaseGetStatsResponse();
    message.stat = (object.stat !== undefined && object.stat !== null) ? Stat.fromPartial(object.stat) : undefined;
    return message;
  },
};

function createBaseQueryStatsRequest(): QueryStatsRequest {
  return { pattern: "", reset: false };
}

export const QueryStatsRequest: MessageFns<QueryStatsRequest> = {
  encode(message: QueryStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pattern !== "") {
      writer.uint32(10).string(message.pattern);
    }
    if (message.reset !== false) {
      writer.uint32(16).bool(message.reset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pattern = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.reset = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStatsRequest {
    return {
      pattern: isSet(object.pattern) ? globalThis.String(object.pattern) : "",
      reset: isSet(object.reset) ? globalThis.Boolean(object.reset) : false,
    };
  },

  toJSON(message: QueryStatsRequest): unknown {
    const obj: any = {};
    if (message.pattern !== "") {
      obj.pattern = message.pattern;
    }
    if (message.reset !== false) {
      obj.reset = message.reset;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryStatsRequest>, I>>(base?: I): QueryStatsRequest {
    return QueryStatsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryStatsRequest>, I>>(object: I): QueryStatsRequest {
    const message = createBaseQueryStatsRequest();
    message.pattern = object.pattern ?? "";
    message.reset = object.reset ?? false;
    return message;
  },
};

function createBaseQueryStatsResponse(): QueryStatsResponse {
  return { stat: [] };
}

export const QueryStatsResponse: MessageFns<QueryStatsResponse> = {
  encode(message: QueryStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.stat) {
      Stat.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat.push(Stat.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStatsResponse {
    return { stat: globalThis.Array.isArray(object?.stat) ? object.stat.map((e: any) => Stat.fromJSON(e)) : [] };
  },

  toJSON(message: QueryStatsResponse): unknown {
    const obj: any = {};
    if (message.stat?.length) {
      obj.stat = message.stat.map((e) => Stat.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryStatsResponse>, I>>(base?: I): QueryStatsResponse {
    return QueryStatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryStatsResponse>, I>>(object: I): QueryStatsResponse {
    const message = createBaseQueryStatsResponse();
    message.stat = object.stat?.map((e) => Stat.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSysStatsRequest(): SysStatsRequest {
  return {};
}

export const SysStatsRequest: MessageFns<SysStatsRequest> = {
  encode(_: SysStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SysStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSysStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SysStatsRequest {
    return {};
  },

  toJSON(_: SysStatsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SysStatsRequest>, I>>(base?: I): SysStatsRequest {
    return SysStatsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SysStatsRequest>, I>>(_: I): SysStatsRequest {
    const message = createBaseSysStatsRequest();
    return message;
  },
};

function createBaseSysStatsResponse(): SysStatsResponse {
  return {
    NumGoroutine: 0,
    NumGC: 0,
    Alloc: 0,
    TotalAlloc: 0,
    Sys: 0,
    Mallocs: 0,
    Frees: 0,
    LiveObjects: 0,
    PauseTotalNs: 0,
    Uptime: 0,
  };
}

export const SysStatsResponse: MessageFns<SysStatsResponse> = {
  encode(message: SysStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.NumGoroutine !== 0) {
      writer.uint32(8).uint32(message.NumGoroutine);
    }
    if (message.NumGC !== 0) {
      writer.uint32(16).uint32(message.NumGC);
    }
    if (message.Alloc !== 0) {
      writer.uint32(24).uint64(message.Alloc);
    }
    if (message.TotalAlloc !== 0) {
      writer.uint32(32).uint64(message.TotalAlloc);
    }
    if (message.Sys !== 0) {
      writer.uint32(40).uint64(message.Sys);
    }
    if (message.Mallocs !== 0) {
      writer.uint32(48).uint64(message.Mallocs);
    }
    if (message.Frees !== 0) {
      writer.uint32(56).uint64(message.Frees);
    }
    if (message.LiveObjects !== 0) {
      writer.uint32(64).uint64(message.LiveObjects);
    }
    if (message.PauseTotalNs !== 0) {
      writer.uint32(72).uint64(message.PauseTotalNs);
    }
    if (message.Uptime !== 0) {
      writer.uint32(80).uint32(message.Uptime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SysStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSysStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.NumGoroutine = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.NumGC = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.Alloc = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.TotalAlloc = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.Sys = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.Mallocs = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.Frees = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.LiveObjects = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.PauseTotalNs = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.Uptime = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SysStatsResponse {
    return {
      NumGoroutine: isSet(object.NumGoroutine) ? globalThis.Number(object.NumGoroutine) : 0,
      NumGC: isSet(object.NumGC) ? globalThis.Number(object.NumGC) : 0,
      Alloc: isSet(object.Alloc) ? globalThis.Number(object.Alloc) : 0,
      TotalAlloc: isSet(object.TotalAlloc) ? globalThis.Number(object.TotalAlloc) : 0,
      Sys: isSet(object.Sys) ? globalThis.Number(object.Sys) : 0,
      Mallocs: isSet(object.Mallocs) ? globalThis.Number(object.Mallocs) : 0,
      Frees: isSet(object.Frees) ? globalThis.Number(object.Frees) : 0,
      LiveObjects: isSet(object.LiveObjects) ? globalThis.Number(object.LiveObjects) : 0,
      PauseTotalNs: isSet(object.PauseTotalNs) ? globalThis.Number(object.PauseTotalNs) : 0,
      Uptime: isSet(object.Uptime) ? globalThis.Number(object.Uptime) : 0,
    };
  },

  toJSON(message: SysStatsResponse): unknown {
    const obj: any = {};
    if (message.NumGoroutine !== 0) {
      obj.NumGoroutine = Math.round(message.NumGoroutine);
    }
    if (message.NumGC !== 0) {
      obj.NumGC = Math.round(message.NumGC);
    }
    if (message.Alloc !== 0) {
      obj.Alloc = Math.round(message.Alloc);
    }
    if (message.TotalAlloc !== 0) {
      obj.TotalAlloc = Math.round(message.TotalAlloc);
    }
    if (message.Sys !== 0) {
      obj.Sys = Math.round(message.Sys);
    }
    if (message.Mallocs !== 0) {
      obj.Mallocs = Math.round(message.Mallocs);
    }
    if (message.Frees !== 0) {
      obj.Frees = Math.round(message.Frees);
    }
    if (message.LiveObjects !== 0) {
      obj.LiveObjects = Math.round(message.LiveObjects);
    }
    if (message.PauseTotalNs !== 0) {
      obj.PauseTotalNs = Math.round(message.PauseTotalNs);
    }
    if (message.Uptime !== 0) {
      obj.Uptime = Math.round(message.Uptime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SysStatsResponse>, I>>(base?: I): SysStatsResponse {
    return SysStatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SysStatsResponse>, I>>(object: I): SysStatsResponse {
    const message = createBaseSysStatsResponse();
    message.NumGoroutine = object.NumGoroutine ?? 0;
    message.NumGC = object.NumGC ?? 0;
    message.Alloc = object.Alloc ?? 0;
    message.TotalAlloc = object.TotalAlloc ?? 0;
    message.Sys = object.Sys ?? 0;
    message.Mallocs = object.Mallocs ?? 0;
    message.Frees = object.Frees ?? 0;
    message.LiveObjects = object.LiveObjects ?? 0;
    message.PauseTotalNs = object.PauseTotalNs ?? 0;
    message.Uptime = object.Uptime ?? 0;
    return message;
  },
};

function createBaseGetStatsOnlineIpListResponse(): GetStatsOnlineIpListResponse {
  return { name: "", ips: {} };
}

export const GetStatsOnlineIpListResponse: MessageFns<GetStatsOnlineIpListResponse> = {
  encode(message: GetStatsOnlineIpListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.ips).forEach(([key, value]) => {
      GetStatsOnlineIpListResponse_IpsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStatsOnlineIpListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStatsOnlineIpListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = GetStatsOnlineIpListResponse_IpsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.ips[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStatsOnlineIpListResponse {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ips: isObject(object.ips)
        ? Object.entries(object.ips).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: GetStatsOnlineIpListResponse): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ips) {
      const entries = Object.entries(message.ips);
      if (entries.length > 0) {
        obj.ips = {};
        entries.forEach(([k, v]) => {
          obj.ips[k] = Math.round(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStatsOnlineIpListResponse>, I>>(base?: I): GetStatsOnlineIpListResponse {
    return GetStatsOnlineIpListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStatsOnlineIpListResponse>, I>>(object: I): GetStatsOnlineIpListResponse {
    const message = createBaseGetStatsOnlineIpListResponse();
    message.name = object.name ?? "";
    message.ips = Object.entries(object.ips ?? {}).reduce<{ [key: string]: number }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Number(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseGetStatsOnlineIpListResponse_IpsEntry(): GetStatsOnlineIpListResponse_IpsEntry {
  return { key: "", value: 0 };
}

export const GetStatsOnlineIpListResponse_IpsEntry: MessageFns<GetStatsOnlineIpListResponse_IpsEntry> = {
  encode(message: GetStatsOnlineIpListResponse_IpsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStatsOnlineIpListResponse_IpsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStatsOnlineIpListResponse_IpsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStatsOnlineIpListResponse_IpsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: GetStatsOnlineIpListResponse_IpsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStatsOnlineIpListResponse_IpsEntry>, I>>(
    base?: I,
  ): GetStatsOnlineIpListResponse_IpsEntry {
    return GetStatsOnlineIpListResponse_IpsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStatsOnlineIpListResponse_IpsEntry>, I>>(
    object: I,
  ): GetStatsOnlineIpListResponse_IpsEntry {
    const message = createBaseGetStatsOnlineIpListResponse_IpsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseConfig(): Config {
  return {};
}

export const Config: MessageFns<Config> = {
  encode(_: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Config {
    return {};
  },

  toJSON(_: Config): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(_: I): Config {
    const message = createBaseConfig();
    return message;
  },
};

export interface StatsService {
  GetStats(request: GetStatsRequest): Promise<GetStatsResponse>;
  GetStatsOnline(request: GetStatsRequest): Promise<GetStatsResponse>;
  QueryStats(request: QueryStatsRequest): Promise<QueryStatsResponse>;
  GetSysStats(request: SysStatsRequest): Promise<SysStatsResponse>;
  GetStatsOnlineIpList(request: GetStatsRequest): Promise<GetStatsOnlineIpListResponse>;
}

export const StatsServiceServiceName = "xray.app.stats.command.StatsService";
export class StatsServiceClientImpl implements StatsService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || StatsServiceServiceName;
    this.rpc = rpc;
    this.GetStats = this.GetStats.bind(this);
    this.GetStatsOnline = this.GetStatsOnline.bind(this);
    this.QueryStats = this.QueryStats.bind(this);
    this.GetSysStats = this.GetSysStats.bind(this);
    this.GetStatsOnlineIpList = this.GetStatsOnlineIpList.bind(this);
  }
  GetStats(request: GetStatsRequest): Promise<GetStatsResponse> {
    const data = GetStatsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStats", data);
    return promise.then((data) => GetStatsResponse.decode(new BinaryReader(data)));
  }

  GetStatsOnline(request: GetStatsRequest): Promise<GetStatsResponse> {
    const data = GetStatsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStatsOnline", data);
    return promise.then((data) => GetStatsResponse.decode(new BinaryReader(data)));
  }

  QueryStats(request: QueryStatsRequest): Promise<QueryStatsResponse> {
    const data = QueryStatsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QueryStats", data);
    return promise.then((data) => QueryStatsResponse.decode(new BinaryReader(data)));
  }

  GetSysStats(request: SysStatsRequest): Promise<SysStatsResponse> {
    const data = SysStatsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSysStats", data);
    return promise.then((data) => SysStatsResponse.decode(new BinaryReader(data)));
  }

  GetStatsOnlineIpList(request: GetStatsRequest): Promise<GetStatsOnlineIpListResponse> {
    const data = GetStatsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStatsOnlineIpList", data);
    return promise.then((data) => GetStatsOnlineIpListResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
