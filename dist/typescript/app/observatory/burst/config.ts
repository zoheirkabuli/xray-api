/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: app/observatory/burst/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.core.app.observatory.burst {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            subject_selector?: string[];
            ping_config?: HealthPingConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subject_selector" in data && data.subject_selector != undefined) {
                    this.subject_selector = data.subject_selector;
                }
                if ("ping_config" in data && data.ping_config != undefined) {
                    this.ping_config = data.ping_config;
                }
            }
        }
        get subject_selector() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set subject_selector(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get ping_config() {
            return pb_1.Message.getWrapperField(this, HealthPingConfig, 3) as HealthPingConfig;
        }
        set ping_config(value: HealthPingConfig) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_ping_config() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            subject_selector?: string[];
            ping_config?: ReturnType<typeof HealthPingConfig.prototype.toObject>;
        }): Config {
            const message = new Config({});
            if (data.subject_selector != null) {
                message.subject_selector = data.subject_selector;
            }
            if (data.ping_config != null) {
                message.ping_config = HealthPingConfig.fromObject(data.ping_config);
            }
            return message;
        }
        toObject() {
            const data: {
                subject_selector?: string[];
                ping_config?: ReturnType<typeof HealthPingConfig.prototype.toObject>;
            } = {};
            if (this.subject_selector != null) {
                data.subject_selector = this.subject_selector;
            }
            if (this.ping_config != null) {
                data.ping_config = this.ping_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subject_selector.length)
                writer.writeRepeatedString(2, this.subject_selector);
            if (this.has_ping_config)
                writer.writeMessage(3, this.ping_config, () => this.ping_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.ping_config, () => message.ping_config = HealthPingConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
    export class HealthPingConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            destination?: string;
            connectivity?: string;
            interval?: number;
            samplingCount?: number;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("destination" in data && data.destination != undefined) {
                    this.destination = data.destination;
                }
                if ("connectivity" in data && data.connectivity != undefined) {
                    this.connectivity = data.connectivity;
                }
                if ("interval" in data && data.interval != undefined) {
                    this.interval = data.interval;
                }
                if ("samplingCount" in data && data.samplingCount != undefined) {
                    this.samplingCount = data.samplingCount;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get destination() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set destination(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get connectivity() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set connectivity(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get interval() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set interval(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get samplingCount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set samplingCount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            destination?: string;
            connectivity?: string;
            interval?: number;
            samplingCount?: number;
            timeout?: number;
        }): HealthPingConfig {
            const message = new HealthPingConfig({});
            if (data.destination != null) {
                message.destination = data.destination;
            }
            if (data.connectivity != null) {
                message.connectivity = data.connectivity;
            }
            if (data.interval != null) {
                message.interval = data.interval;
            }
            if (data.samplingCount != null) {
                message.samplingCount = data.samplingCount;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                destination?: string;
                connectivity?: string;
                interval?: number;
                samplingCount?: number;
                timeout?: number;
            } = {};
            if (this.destination != null) {
                data.destination = this.destination;
            }
            if (this.connectivity != null) {
                data.connectivity = this.connectivity;
            }
            if (this.interval != null) {
                data.interval = this.interval;
            }
            if (this.samplingCount != null) {
                data.samplingCount = this.samplingCount;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.destination.length)
                writer.writeString(1, this.destination);
            if (this.connectivity.length)
                writer.writeString(2, this.connectivity);
            if (this.interval != 0)
                writer.writeInt64(3, this.interval);
            if (this.samplingCount != 0)
                writer.writeInt32(4, this.samplingCount);
            if (this.timeout != 0)
                writer.writeInt64(5, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HealthPingConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HealthPingConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.destination = reader.readString();
                        break;
                    case 2:
                        message.connectivity = reader.readString();
                        break;
                    case 3:
                        message.interval = reader.readInt64();
                        break;
                    case 4:
                        message.samplingCount = reader.readInt32();
                        break;
                    case 5:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HealthPingConfig {
            return HealthPingConfig.deserialize(bytes);
        }
    }
}
