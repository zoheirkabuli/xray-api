// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: app/observatory/burst/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "xray.core.app.observatory.burst";

export interface Config {
  /** @Document The selectors for outbound under observation */
  subjectSelector: string[];
  pingConfig: HealthPingConfig | undefined;
}

export interface HealthPingConfig {
  /**
   * destination url, need 204 for success return
   * default https://connectivitycheck.gstatic.com/generate_204
   */
  destination: string;
  /** connectivity check url */
  connectivity: string;
  /** health check interval, int64 values of time.Duration */
  interval: number;
  /** sampling count is the amount of recent ping results which are kept for calculation */
  samplingCount: number;
  /** ping timeout, int64 values of time.Duration */
  timeout: number;
}

function createBaseConfig(): Config {
  return { subjectSelector: [], pingConfig: undefined };
}

export const Config: MessageFns<Config> = {
  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.subjectSelector) {
      writer.uint32(18).string(v!);
    }
    if (message.pingConfig !== undefined) {
      HealthPingConfig.encode(message.pingConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.subjectSelector.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pingConfig = HealthPingConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      subjectSelector: globalThis.Array.isArray(object?.subjectSelector)
        ? object.subjectSelector.map((e: any) => globalThis.String(e))
        : [],
      pingConfig: isSet(object.pingConfig) ? HealthPingConfig.fromJSON(object.pingConfig) : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.subjectSelector?.length) {
      obj.subjectSelector = message.subjectSelector;
    }
    if (message.pingConfig !== undefined) {
      obj.pingConfig = HealthPingConfig.toJSON(message.pingConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.subjectSelector = object.subjectSelector?.map((e) => e) || [];
    message.pingConfig = (object.pingConfig !== undefined && object.pingConfig !== null)
      ? HealthPingConfig.fromPartial(object.pingConfig)
      : undefined;
    return message;
  },
};

function createBaseHealthPingConfig(): HealthPingConfig {
  return { destination: "", connectivity: "", interval: 0, samplingCount: 0, timeout: 0 };
}

export const HealthPingConfig: MessageFns<HealthPingConfig> = {
  encode(message: HealthPingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destination !== "") {
      writer.uint32(10).string(message.destination);
    }
    if (message.connectivity !== "") {
      writer.uint32(18).string(message.connectivity);
    }
    if (message.interval !== 0) {
      writer.uint32(24).int64(message.interval);
    }
    if (message.samplingCount !== 0) {
      writer.uint32(32).int32(message.samplingCount);
    }
    if (message.timeout !== 0) {
      writer.uint32(40).int64(message.timeout);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthPingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthPingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destination = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.connectivity = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.interval = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.samplingCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.timeout = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthPingConfig {
    return {
      destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
      connectivity: isSet(object.connectivity) ? globalThis.String(object.connectivity) : "",
      interval: isSet(object.interval) ? globalThis.Number(object.interval) : 0,
      samplingCount: isSet(object.samplingCount) ? globalThis.Number(object.samplingCount) : 0,
      timeout: isSet(object.timeout) ? globalThis.Number(object.timeout) : 0,
    };
  },

  toJSON(message: HealthPingConfig): unknown {
    const obj: any = {};
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    if (message.connectivity !== "") {
      obj.connectivity = message.connectivity;
    }
    if (message.interval !== 0) {
      obj.interval = Math.round(message.interval);
    }
    if (message.samplingCount !== 0) {
      obj.samplingCount = Math.round(message.samplingCount);
    }
    if (message.timeout !== 0) {
      obj.timeout = Math.round(message.timeout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthPingConfig>, I>>(base?: I): HealthPingConfig {
    return HealthPingConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthPingConfig>, I>>(object: I): HealthPingConfig {
    const message = createBaseHealthPingConfig();
    message.destination = object.destination ?? "";
    message.connectivity = object.connectivity ?? "";
    message.interval = object.interval ?? 0;
    message.samplingCount = object.samplingCount ?? 0;
    message.timeout = object.timeout ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
