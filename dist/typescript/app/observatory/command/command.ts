// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: app/observatory/command/command.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObservationResult } from "../config";

export const protobufPackage = "xray.core.app.observatory.command";

export interface GetOutboundStatusRequest {
}

export interface GetOutboundStatusResponse {
  status: ObservationResult | undefined;
}

export interface Config {
}

function createBaseGetOutboundStatusRequest(): GetOutboundStatusRequest {
  return {};
}

export const GetOutboundStatusRequest: MessageFns<GetOutboundStatusRequest> = {
  encode(_: GetOutboundStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOutboundStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOutboundStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetOutboundStatusRequest {
    return {};
  },

  toJSON(_: GetOutboundStatusRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOutboundStatusRequest>, I>>(base?: I): GetOutboundStatusRequest {
    return GetOutboundStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOutboundStatusRequest>, I>>(_: I): GetOutboundStatusRequest {
    const message = createBaseGetOutboundStatusRequest();
    return message;
  },
};

function createBaseGetOutboundStatusResponse(): GetOutboundStatusResponse {
  return { status: undefined };
}

export const GetOutboundStatusResponse: MessageFns<GetOutboundStatusResponse> = {
  encode(message: GetOutboundStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ObservationResult.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOutboundStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOutboundStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ObservationResult.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOutboundStatusResponse {
    return { status: isSet(object.status) ? ObservationResult.fromJSON(object.status) : undefined };
  },

  toJSON(message: GetOutboundStatusResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ObservationResult.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOutboundStatusResponse>, I>>(base?: I): GetOutboundStatusResponse {
    return GetOutboundStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOutboundStatusResponse>, I>>(object: I): GetOutboundStatusResponse {
    const message = createBaseGetOutboundStatusResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? ObservationResult.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseConfig(): Config {
  return {};
}

export const Config: MessageFns<Config> = {
  encode(_: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Config {
    return {};
  },

  toJSON(_: Config): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(_: I): Config {
    const message = createBaseConfig();
    return message;
  },
};

export interface ObservatoryService {
  GetOutboundStatus(request: GetOutboundStatusRequest): Promise<GetOutboundStatusResponse>;
}

export const ObservatoryServiceServiceName = "xray.core.app.observatory.command.ObservatoryService";
export class ObservatoryServiceClientImpl implements ObservatoryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ObservatoryServiceServiceName;
    this.rpc = rpc;
    this.GetOutboundStatus = this.GetOutboundStatus.bind(this);
  }
  GetOutboundStatus(request: GetOutboundStatusRequest): Promise<GetOutboundStatusResponse> {
    const data = GetOutboundStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOutboundStatus", data);
    return promise.then((data) => GetOutboundStatusResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
