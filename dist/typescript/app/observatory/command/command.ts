/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: app/observatory/command/command.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../config";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace xray.core.app.observatory.command {
    export class GetOutboundStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetOutboundStatusRequest {
            const message = new GetOutboundStatusRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetOutboundStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetOutboundStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetOutboundStatusRequest {
            return GetOutboundStatusRequest.deserialize(bytes);
        }
    }
    export class GetOutboundStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.xray.core.app.observatory.ObservationResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.core.app.observatory.ObservationResult, 1) as dependency_1.xray.core.app.observatory.ObservationResult;
        }
        set status(value: dependency_1.xray.core.app.observatory.ObservationResult) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            status?: ReturnType<typeof dependency_1.xray.core.app.observatory.ObservationResult.prototype.toObject>;
        }): GetOutboundStatusResponse {
            const message = new GetOutboundStatusResponse({});
            if (data.status != null) {
                message.status = dependency_1.xray.core.app.observatory.ObservationResult.fromObject(data.status);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: ReturnType<typeof dependency_1.xray.core.app.observatory.ObservationResult.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_status)
                writer.writeMessage(1, this.status, () => this.status.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetOutboundStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetOutboundStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.status, () => message.status = dependency_1.xray.core.app.observatory.ObservationResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetOutboundStatusResponse {
            return GetOutboundStatusResponse.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Config {
            const message = new Config({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedObservatoryServiceService {
        static definition = {
            GetOutboundStatus: {
                path: "/xray.core.app.observatory.command.ObservatoryService/GetOutboundStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetOutboundStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetOutboundStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetOutboundStatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetOutboundStatusResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetOutboundStatus(call: grpc_1.ServerUnaryCall<GetOutboundStatusRequest, GetOutboundStatusResponse>, callback: grpc_1.sendUnaryData<GetOutboundStatusResponse>): void;
    }
    export class ObservatoryServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedObservatoryServiceService.definition, "ObservatoryService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetOutboundStatus: GrpcUnaryServiceInterface<GetOutboundStatusRequest, GetOutboundStatusResponse> = (message: GetOutboundStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetOutboundStatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetOutboundStatusResponse>, callback?: grpc_1.requestCallback<GetOutboundStatusResponse>): grpc_1.ClientUnaryCall => {
            return super.GetOutboundStatus(message, metadata, options, callback);
        };
    }
}
