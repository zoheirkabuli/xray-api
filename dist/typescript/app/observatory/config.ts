/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: app/observatory/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.core.app.observatory {
    export class ObservationResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: OutboundStatus[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getRepeatedWrapperField(this, OutboundStatus, 1) as OutboundStatus[];
        }
        set status(value: OutboundStatus[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            status?: ReturnType<typeof OutboundStatus.prototype.toObject>[];
        }): ObservationResult {
            const message = new ObservationResult({});
            if (data.status != null) {
                message.status = data.status.map(item => OutboundStatus.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: ReturnType<typeof OutboundStatus.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status.map((item: OutboundStatus) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeRepeatedMessage(1, this.status, (item: OutboundStatus) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ObservationResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ObservationResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.status, () => pb_1.Message.addToRepeatedWrapperField(message, 1, OutboundStatus.deserialize(reader), OutboundStatus));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ObservationResult {
            return ObservationResult.deserialize(bytes);
        }
    }
    export class HealthPingMeasurementResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            all?: number;
            fail?: number;
            deviation?: number;
            average?: number;
            max?: number;
            min?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("all" in data && data.all != undefined) {
                    this.all = data.all;
                }
                if ("fail" in data && data.fail != undefined) {
                    this.fail = data.fail;
                }
                if ("deviation" in data && data.deviation != undefined) {
                    this.deviation = data.deviation;
                }
                if ("average" in data && data.average != undefined) {
                    this.average = data.average;
                }
                if ("max" in data && data.max != undefined) {
                    this.max = data.max;
                }
                if ("min" in data && data.min != undefined) {
                    this.min = data.min;
                }
            }
        }
        get all() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set all(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get fail() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set fail(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get deviation() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set deviation(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get average() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set average(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get max() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get min() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set min(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            all?: number;
            fail?: number;
            deviation?: number;
            average?: number;
            max?: number;
            min?: number;
        }): HealthPingMeasurementResult {
            const message = new HealthPingMeasurementResult({});
            if (data.all != null) {
                message.all = data.all;
            }
            if (data.fail != null) {
                message.fail = data.fail;
            }
            if (data.deviation != null) {
                message.deviation = data.deviation;
            }
            if (data.average != null) {
                message.average = data.average;
            }
            if (data.max != null) {
                message.max = data.max;
            }
            if (data.min != null) {
                message.min = data.min;
            }
            return message;
        }
        toObject() {
            const data: {
                all?: number;
                fail?: number;
                deviation?: number;
                average?: number;
                max?: number;
                min?: number;
            } = {};
            if (this.all != null) {
                data.all = this.all;
            }
            if (this.fail != null) {
                data.fail = this.fail;
            }
            if (this.deviation != null) {
                data.deviation = this.deviation;
            }
            if (this.average != null) {
                data.average = this.average;
            }
            if (this.max != null) {
                data.max = this.max;
            }
            if (this.min != null) {
                data.min = this.min;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.all != 0)
                writer.writeInt64(1, this.all);
            if (this.fail != 0)
                writer.writeInt64(2, this.fail);
            if (this.deviation != 0)
                writer.writeInt64(3, this.deviation);
            if (this.average != 0)
                writer.writeInt64(4, this.average);
            if (this.max != 0)
                writer.writeInt64(5, this.max);
            if (this.min != 0)
                writer.writeInt64(6, this.min);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HealthPingMeasurementResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HealthPingMeasurementResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.all = reader.readInt64();
                        break;
                    case 2:
                        message.fail = reader.readInt64();
                        break;
                    case 3:
                        message.deviation = reader.readInt64();
                        break;
                    case 4:
                        message.average = reader.readInt64();
                        break;
                    case 5:
                        message.max = reader.readInt64();
                        break;
                    case 6:
                        message.min = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HealthPingMeasurementResult {
            return HealthPingMeasurementResult.deserialize(bytes);
        }
    }
    export class OutboundStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            alive?: boolean;
            delay?: number;
            last_error_reason?: string;
            outbound_tag?: string;
            last_seen_time?: number;
            last_try_time?: number;
            health_ping?: HealthPingMeasurementResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("alive" in data && data.alive != undefined) {
                    this.alive = data.alive;
                }
                if ("delay" in data && data.delay != undefined) {
                    this.delay = data.delay;
                }
                if ("last_error_reason" in data && data.last_error_reason != undefined) {
                    this.last_error_reason = data.last_error_reason;
                }
                if ("outbound_tag" in data && data.outbound_tag != undefined) {
                    this.outbound_tag = data.outbound_tag;
                }
                if ("last_seen_time" in data && data.last_seen_time != undefined) {
                    this.last_seen_time = data.last_seen_time;
                }
                if ("last_try_time" in data && data.last_try_time != undefined) {
                    this.last_try_time = data.last_try_time;
                }
                if ("health_ping" in data && data.health_ping != undefined) {
                    this.health_ping = data.health_ping;
                }
            }
        }
        get alive() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set alive(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get delay() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set delay(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_error_reason() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set last_error_reason(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get outbound_tag() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set outbound_tag(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get last_seen_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set last_seen_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get last_try_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set last_try_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get health_ping() {
            return pb_1.Message.getWrapperField(this, HealthPingMeasurementResult, 7) as HealthPingMeasurementResult;
        }
        set health_ping(value: HealthPingMeasurementResult) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_health_ping() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            alive?: boolean;
            delay?: number;
            last_error_reason?: string;
            outbound_tag?: string;
            last_seen_time?: number;
            last_try_time?: number;
            health_ping?: ReturnType<typeof HealthPingMeasurementResult.prototype.toObject>;
        }): OutboundStatus {
            const message = new OutboundStatus({});
            if (data.alive != null) {
                message.alive = data.alive;
            }
            if (data.delay != null) {
                message.delay = data.delay;
            }
            if (data.last_error_reason != null) {
                message.last_error_reason = data.last_error_reason;
            }
            if (data.outbound_tag != null) {
                message.outbound_tag = data.outbound_tag;
            }
            if (data.last_seen_time != null) {
                message.last_seen_time = data.last_seen_time;
            }
            if (data.last_try_time != null) {
                message.last_try_time = data.last_try_time;
            }
            if (data.health_ping != null) {
                message.health_ping = HealthPingMeasurementResult.fromObject(data.health_ping);
            }
            return message;
        }
        toObject() {
            const data: {
                alive?: boolean;
                delay?: number;
                last_error_reason?: string;
                outbound_tag?: string;
                last_seen_time?: number;
                last_try_time?: number;
                health_ping?: ReturnType<typeof HealthPingMeasurementResult.prototype.toObject>;
            } = {};
            if (this.alive != null) {
                data.alive = this.alive;
            }
            if (this.delay != null) {
                data.delay = this.delay;
            }
            if (this.last_error_reason != null) {
                data.last_error_reason = this.last_error_reason;
            }
            if (this.outbound_tag != null) {
                data.outbound_tag = this.outbound_tag;
            }
            if (this.last_seen_time != null) {
                data.last_seen_time = this.last_seen_time;
            }
            if (this.last_try_time != null) {
                data.last_try_time = this.last_try_time;
            }
            if (this.health_ping != null) {
                data.health_ping = this.health_ping.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.alive != false)
                writer.writeBool(1, this.alive);
            if (this.delay != 0)
                writer.writeInt64(2, this.delay);
            if (this.last_error_reason.length)
                writer.writeString(3, this.last_error_reason);
            if (this.outbound_tag.length)
                writer.writeString(4, this.outbound_tag);
            if (this.last_seen_time != 0)
                writer.writeInt64(5, this.last_seen_time);
            if (this.last_try_time != 0)
                writer.writeInt64(6, this.last_try_time);
            if (this.has_health_ping)
                writer.writeMessage(7, this.health_ping, () => this.health_ping.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OutboundStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OutboundStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.alive = reader.readBool();
                        break;
                    case 2:
                        message.delay = reader.readInt64();
                        break;
                    case 3:
                        message.last_error_reason = reader.readString();
                        break;
                    case 4:
                        message.outbound_tag = reader.readString();
                        break;
                    case 5:
                        message.last_seen_time = reader.readInt64();
                        break;
                    case 6:
                        message.last_try_time = reader.readInt64();
                        break;
                    case 7:
                        reader.readMessage(message.health_ping, () => message.health_ping = HealthPingMeasurementResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OutboundStatus {
            return OutboundStatus.deserialize(bytes);
        }
    }
    export class ProbeResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            alive?: boolean;
            delay?: number;
            last_error_reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("alive" in data && data.alive != undefined) {
                    this.alive = data.alive;
                }
                if ("delay" in data && data.delay != undefined) {
                    this.delay = data.delay;
                }
                if ("last_error_reason" in data && data.last_error_reason != undefined) {
                    this.last_error_reason = data.last_error_reason;
                }
            }
        }
        get alive() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set alive(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get delay() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set delay(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_error_reason() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set last_error_reason(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            alive?: boolean;
            delay?: number;
            last_error_reason?: string;
        }): ProbeResult {
            const message = new ProbeResult({});
            if (data.alive != null) {
                message.alive = data.alive;
            }
            if (data.delay != null) {
                message.delay = data.delay;
            }
            if (data.last_error_reason != null) {
                message.last_error_reason = data.last_error_reason;
            }
            return message;
        }
        toObject() {
            const data: {
                alive?: boolean;
                delay?: number;
                last_error_reason?: string;
            } = {};
            if (this.alive != null) {
                data.alive = this.alive;
            }
            if (this.delay != null) {
                data.delay = this.delay;
            }
            if (this.last_error_reason != null) {
                data.last_error_reason = this.last_error_reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.alive != false)
                writer.writeBool(1, this.alive);
            if (this.delay != 0)
                writer.writeInt64(2, this.delay);
            if (this.last_error_reason.length)
                writer.writeString(3, this.last_error_reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProbeResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProbeResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.alive = reader.readBool();
                        break;
                    case 2:
                        message.delay = reader.readInt64();
                        break;
                    case 3:
                        message.last_error_reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProbeResult {
            return ProbeResult.deserialize(bytes);
        }
    }
    export class Intensity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            probe_interval?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("probe_interval" in data && data.probe_interval != undefined) {
                    this.probe_interval = data.probe_interval;
                }
            }
        }
        get probe_interval() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set probe_interval(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            probe_interval?: number;
        }): Intensity {
            const message = new Intensity({});
            if (data.probe_interval != null) {
                message.probe_interval = data.probe_interval;
            }
            return message;
        }
        toObject() {
            const data: {
                probe_interval?: number;
            } = {};
            if (this.probe_interval != null) {
                data.probe_interval = this.probe_interval;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.probe_interval != 0)
                writer.writeUint32(1, this.probe_interval);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Intensity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Intensity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.probe_interval = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Intensity {
            return Intensity.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            subject_selector?: string[];
            probe_url?: string;
            probe_interval?: number;
            enable_concurrency?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subject_selector" in data && data.subject_selector != undefined) {
                    this.subject_selector = data.subject_selector;
                }
                if ("probe_url" in data && data.probe_url != undefined) {
                    this.probe_url = data.probe_url;
                }
                if ("probe_interval" in data && data.probe_interval != undefined) {
                    this.probe_interval = data.probe_interval;
                }
                if ("enable_concurrency" in data && data.enable_concurrency != undefined) {
                    this.enable_concurrency = data.enable_concurrency;
                }
            }
        }
        get subject_selector() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set subject_selector(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get probe_url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set probe_url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get probe_interval() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set probe_interval(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get enable_concurrency() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set enable_concurrency(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            subject_selector?: string[];
            probe_url?: string;
            probe_interval?: number;
            enable_concurrency?: boolean;
        }): Config {
            const message = new Config({});
            if (data.subject_selector != null) {
                message.subject_selector = data.subject_selector;
            }
            if (data.probe_url != null) {
                message.probe_url = data.probe_url;
            }
            if (data.probe_interval != null) {
                message.probe_interval = data.probe_interval;
            }
            if (data.enable_concurrency != null) {
                message.enable_concurrency = data.enable_concurrency;
            }
            return message;
        }
        toObject() {
            const data: {
                subject_selector?: string[];
                probe_url?: string;
                probe_interval?: number;
                enable_concurrency?: boolean;
            } = {};
            if (this.subject_selector != null) {
                data.subject_selector = this.subject_selector;
            }
            if (this.probe_url != null) {
                data.probe_url = this.probe_url;
            }
            if (this.probe_interval != null) {
                data.probe_interval = this.probe_interval;
            }
            if (this.enable_concurrency != null) {
                data.enable_concurrency = this.enable_concurrency;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subject_selector.length)
                writer.writeRepeatedString(2, this.subject_selector);
            if (this.probe_url.length)
                writer.writeString(3, this.probe_url);
            if (this.probe_interval != 0)
                writer.writeInt64(4, this.probe_interval);
            if (this.enable_concurrency != false)
                writer.writeBool(5, this.enable_concurrency);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.probe_url = reader.readString();
                        break;
                    case 4:
                        message.probe_interval = reader.readInt64();
                        break;
                    case 5:
                        message.enable_concurrency = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
