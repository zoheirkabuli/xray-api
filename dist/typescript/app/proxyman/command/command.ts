/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: app/proxyman/command/command.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../common/protocol/user";
import * as dependency_2 from "./../../../common/serial/typed_message";
import * as dependency_3 from "./../../../core/config";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace xray.app.proxyman.command {
    export class AddUserOperation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: dependency_1.xray.common.protocol.User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.protocol.User, 1) as dependency_1.xray.common.protocol.User;
        }
        set user(value: dependency_1.xray.common.protocol.User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof dependency_1.xray.common.protocol.User.prototype.toObject>;
        }): AddUserOperation {
            const message = new AddUserOperation({});
            if (data.user != null) {
                message.user = dependency_1.xray.common.protocol.User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof dependency_1.xray.common.protocol.User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddUserOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddUserOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = dependency_1.xray.common.protocol.User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddUserOperation {
            return AddUserOperation.deserialize(bytes);
        }
    }
    export class RemoveUserOperation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): RemoveUserOperation {
            const message = new RemoveUserOperation({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveUserOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveUserOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveUserOperation {
            return RemoveUserOperation.deserialize(bytes);
        }
    }
    export class AddInboundRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inbound?: dependency_3.xray.core.InboundHandlerConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inbound" in data && data.inbound != undefined) {
                    this.inbound = data.inbound;
                }
            }
        }
        get inbound() {
            return pb_1.Message.getWrapperField(this, dependency_3.xray.core.InboundHandlerConfig, 1) as dependency_3.xray.core.InboundHandlerConfig;
        }
        set inbound(value: dependency_3.xray.core.InboundHandlerConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_inbound() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            inbound?: ReturnType<typeof dependency_3.xray.core.InboundHandlerConfig.prototype.toObject>;
        }): AddInboundRequest {
            const message = new AddInboundRequest({});
            if (data.inbound != null) {
                message.inbound = dependency_3.xray.core.InboundHandlerConfig.fromObject(data.inbound);
            }
            return message;
        }
        toObject() {
            const data: {
                inbound?: ReturnType<typeof dependency_3.xray.core.InboundHandlerConfig.prototype.toObject>;
            } = {};
            if (this.inbound != null) {
                data.inbound = this.inbound.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_inbound)
                writer.writeMessage(1, this.inbound, () => this.inbound.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddInboundRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddInboundRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inbound, () => message.inbound = dependency_3.xray.core.InboundHandlerConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddInboundRequest {
            return AddInboundRequest.deserialize(bytes);
        }
    }
    export class AddInboundResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AddInboundResponse {
            const message = new AddInboundResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddInboundResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddInboundResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddInboundResponse {
            return AddInboundResponse.deserialize(bytes);
        }
    }
    export class RemoveInboundRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tag?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
            }
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            tag?: string;
        }): RemoveInboundRequest {
            const message = new RemoveInboundRequest({});
            if (data.tag != null) {
                message.tag = data.tag;
            }
            return message;
        }
        toObject() {
            const data: {
                tag?: string;
            } = {};
            if (this.tag != null) {
                data.tag = this.tag;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tag.length)
                writer.writeString(1, this.tag);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveInboundRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveInboundRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tag = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveInboundRequest {
            return RemoveInboundRequest.deserialize(bytes);
        }
    }
    export class RemoveInboundResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): RemoveInboundResponse {
            const message = new RemoveInboundResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveInboundResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveInboundResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveInboundResponse {
            return RemoveInboundResponse.deserialize(bytes);
        }
    }
    export class AlterInboundRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tag?: string;
            operation?: dependency_2.xray.common.serial.TypedMessage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_2.xray.common.serial.TypedMessage, 2) as dependency_2.xray.common.serial.TypedMessage;
        }
        set operation(value: dependency_2.xray.common.serial.TypedMessage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            tag?: string;
            operation?: ReturnType<typeof dependency_2.xray.common.serial.TypedMessage.prototype.toObject>;
        }): AlterInboundRequest {
            const message = new AlterInboundRequest({});
            if (data.tag != null) {
                message.tag = data.tag;
            }
            if (data.operation != null) {
                message.operation = dependency_2.xray.common.serial.TypedMessage.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                tag?: string;
                operation?: ReturnType<typeof dependency_2.xray.common.serial.TypedMessage.prototype.toObject>;
            } = {};
            if (this.tag != null) {
                data.tag = this.tag;
            }
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tag.length)
                writer.writeString(1, this.tag);
            if (this.has_operation)
                writer.writeMessage(2, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterInboundRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterInboundRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tag = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.operation, () => message.operation = dependency_2.xray.common.serial.TypedMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterInboundRequest {
            return AlterInboundRequest.deserialize(bytes);
        }
    }
    export class AlterInboundResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AlterInboundResponse {
            const message = new AlterInboundResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterInboundResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterInboundResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterInboundResponse {
            return AlterInboundResponse.deserialize(bytes);
        }
    }
    export class GetInboundUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tag?: string;
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tag?: string;
            email?: string;
        }): GetInboundUserRequest {
            const message = new GetInboundUserRequest({});
            if (data.tag != null) {
                message.tag = data.tag;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                tag?: string;
                email?: string;
            } = {};
            if (this.tag != null) {
                data.tag = this.tag;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tag.length)
                writer.writeString(1, this.tag);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInboundUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInboundUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tag = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInboundUserRequest {
            return GetInboundUserRequest.deserialize(bytes);
        }
    }
    export class GetInboundUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: dependency_1.xray.common.protocol.User[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.xray.common.protocol.User, 1) as dependency_1.xray.common.protocol.User[];
        }
        set users(value: dependency_1.xray.common.protocol.User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof dependency_1.xray.common.protocol.User.prototype.toObject>[];
        }): GetInboundUserResponse {
            const message = new GetInboundUserResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => dependency_1.xray.common.protocol.User.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof dependency_1.xray.common.protocol.User.prototype.toObject>[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: dependency_1.xray.common.protocol.User) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: dependency_1.xray.common.protocol.User) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInboundUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInboundUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.xray.common.protocol.User.deserialize(reader), dependency_1.xray.common.protocol.User));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInboundUserResponse {
            return GetInboundUserResponse.deserialize(bytes);
        }
    }
    export class GetInboundUsersCountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            count?: number;
        }): GetInboundUsersCountResponse {
            const message = new GetInboundUsersCountResponse({});
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                count?: number;
            } = {};
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.count != 0)
                writer.writeInt64(1, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInboundUsersCountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInboundUsersCountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.count = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInboundUsersCountResponse {
            return GetInboundUsersCountResponse.deserialize(bytes);
        }
    }
    export class AddOutboundRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            outbound?: dependency_3.xray.core.OutboundHandlerConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("outbound" in data && data.outbound != undefined) {
                    this.outbound = data.outbound;
                }
            }
        }
        get outbound() {
            return pb_1.Message.getWrapperField(this, dependency_3.xray.core.OutboundHandlerConfig, 1) as dependency_3.xray.core.OutboundHandlerConfig;
        }
        set outbound(value: dependency_3.xray.core.OutboundHandlerConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_outbound() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            outbound?: ReturnType<typeof dependency_3.xray.core.OutboundHandlerConfig.prototype.toObject>;
        }): AddOutboundRequest {
            const message = new AddOutboundRequest({});
            if (data.outbound != null) {
                message.outbound = dependency_3.xray.core.OutboundHandlerConfig.fromObject(data.outbound);
            }
            return message;
        }
        toObject() {
            const data: {
                outbound?: ReturnType<typeof dependency_3.xray.core.OutboundHandlerConfig.prototype.toObject>;
            } = {};
            if (this.outbound != null) {
                data.outbound = this.outbound.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_outbound)
                writer.writeMessage(1, this.outbound, () => this.outbound.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddOutboundRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddOutboundRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.outbound, () => message.outbound = dependency_3.xray.core.OutboundHandlerConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddOutboundRequest {
            return AddOutboundRequest.deserialize(bytes);
        }
    }
    export class AddOutboundResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AddOutboundResponse {
            const message = new AddOutboundResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddOutboundResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddOutboundResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddOutboundResponse {
            return AddOutboundResponse.deserialize(bytes);
        }
    }
    export class RemoveOutboundRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tag?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
            }
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            tag?: string;
        }): RemoveOutboundRequest {
            const message = new RemoveOutboundRequest({});
            if (data.tag != null) {
                message.tag = data.tag;
            }
            return message;
        }
        toObject() {
            const data: {
                tag?: string;
            } = {};
            if (this.tag != null) {
                data.tag = this.tag;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tag.length)
                writer.writeString(1, this.tag);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveOutboundRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveOutboundRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tag = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveOutboundRequest {
            return RemoveOutboundRequest.deserialize(bytes);
        }
    }
    export class RemoveOutboundResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): RemoveOutboundResponse {
            const message = new RemoveOutboundResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveOutboundResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveOutboundResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveOutboundResponse {
            return RemoveOutboundResponse.deserialize(bytes);
        }
    }
    export class AlterOutboundRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tag?: string;
            operation?: dependency_2.xray.common.serial.TypedMessage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_2.xray.common.serial.TypedMessage, 2) as dependency_2.xray.common.serial.TypedMessage;
        }
        set operation(value: dependency_2.xray.common.serial.TypedMessage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            tag?: string;
            operation?: ReturnType<typeof dependency_2.xray.common.serial.TypedMessage.prototype.toObject>;
        }): AlterOutboundRequest {
            const message = new AlterOutboundRequest({});
            if (data.tag != null) {
                message.tag = data.tag;
            }
            if (data.operation != null) {
                message.operation = dependency_2.xray.common.serial.TypedMessage.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                tag?: string;
                operation?: ReturnType<typeof dependency_2.xray.common.serial.TypedMessage.prototype.toObject>;
            } = {};
            if (this.tag != null) {
                data.tag = this.tag;
            }
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tag.length)
                writer.writeString(1, this.tag);
            if (this.has_operation)
                writer.writeMessage(2, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterOutboundRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterOutboundRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tag = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.operation, () => message.operation = dependency_2.xray.common.serial.TypedMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterOutboundRequest {
            return AlterOutboundRequest.deserialize(bytes);
        }
    }
    export class AlterOutboundResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AlterOutboundResponse {
            const message = new AlterOutboundResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterOutboundResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterOutboundResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterOutboundResponse {
            return AlterOutboundResponse.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Config {
            const message = new Config({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedHandlerServiceService {
        static definition = {
            AddInbound: {
                path: "/xray.app.proxyman.command.HandlerService/AddInbound",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddInboundRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddInboundRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddInboundResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddInboundResponse.deserialize(new Uint8Array(bytes))
            },
            RemoveInbound: {
                path: "/xray.app.proxyman.command.HandlerService/RemoveInbound",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RemoveInboundRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RemoveInboundRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RemoveInboundResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RemoveInboundResponse.deserialize(new Uint8Array(bytes))
            },
            AlterInbound: {
                path: "/xray.app.proxyman.command.HandlerService/AlterInbound",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AlterInboundRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AlterInboundRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AlterInboundResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AlterInboundResponse.deserialize(new Uint8Array(bytes))
            },
            GetInboundUsers: {
                path: "/xray.app.proxyman.command.HandlerService/GetInboundUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetInboundUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetInboundUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetInboundUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetInboundUserResponse.deserialize(new Uint8Array(bytes))
            },
            GetInboundUsersCount: {
                path: "/xray.app.proxyman.command.HandlerService/GetInboundUsersCount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetInboundUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetInboundUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetInboundUsersCountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetInboundUsersCountResponse.deserialize(new Uint8Array(bytes))
            },
            AddOutbound: {
                path: "/xray.app.proxyman.command.HandlerService/AddOutbound",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddOutboundRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddOutboundRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddOutboundResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddOutboundResponse.deserialize(new Uint8Array(bytes))
            },
            RemoveOutbound: {
                path: "/xray.app.proxyman.command.HandlerService/RemoveOutbound",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RemoveOutboundRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RemoveOutboundRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RemoveOutboundResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RemoveOutboundResponse.deserialize(new Uint8Array(bytes))
            },
            AlterOutbound: {
                path: "/xray.app.proxyman.command.HandlerService/AlterOutbound",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AlterOutboundRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AlterOutboundRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AlterOutboundResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AlterOutboundResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract AddInbound(call: grpc_1.ServerUnaryCall<AddInboundRequest, AddInboundResponse>, callback: grpc_1.sendUnaryData<AddInboundResponse>): void;
        abstract RemoveInbound(call: grpc_1.ServerUnaryCall<RemoveInboundRequest, RemoveInboundResponse>, callback: grpc_1.sendUnaryData<RemoveInboundResponse>): void;
        abstract AlterInbound(call: grpc_1.ServerUnaryCall<AlterInboundRequest, AlterInboundResponse>, callback: grpc_1.sendUnaryData<AlterInboundResponse>): void;
        abstract GetInboundUsers(call: grpc_1.ServerUnaryCall<GetInboundUserRequest, GetInboundUserResponse>, callback: grpc_1.sendUnaryData<GetInboundUserResponse>): void;
        abstract GetInboundUsersCount(call: grpc_1.ServerUnaryCall<GetInboundUserRequest, GetInboundUsersCountResponse>, callback: grpc_1.sendUnaryData<GetInboundUsersCountResponse>): void;
        abstract AddOutbound(call: grpc_1.ServerUnaryCall<AddOutboundRequest, AddOutboundResponse>, callback: grpc_1.sendUnaryData<AddOutboundResponse>): void;
        abstract RemoveOutbound(call: grpc_1.ServerUnaryCall<RemoveOutboundRequest, RemoveOutboundResponse>, callback: grpc_1.sendUnaryData<RemoveOutboundResponse>): void;
        abstract AlterOutbound(call: grpc_1.ServerUnaryCall<AlterOutboundRequest, AlterOutboundResponse>, callback: grpc_1.sendUnaryData<AlterOutboundResponse>): void;
    }
    export class HandlerServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedHandlerServiceService.definition, "HandlerService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        AddInbound: GrpcUnaryServiceInterface<AddInboundRequest, AddInboundResponse> = (message: AddInboundRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddInboundResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddInboundResponse>, callback?: grpc_1.requestCallback<AddInboundResponse>): grpc_1.ClientUnaryCall => {
            return super.AddInbound(message, metadata, options, callback);
        };
        RemoveInbound: GrpcUnaryServiceInterface<RemoveInboundRequest, RemoveInboundResponse> = (message: RemoveInboundRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RemoveInboundResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RemoveInboundResponse>, callback?: grpc_1.requestCallback<RemoveInboundResponse>): grpc_1.ClientUnaryCall => {
            return super.RemoveInbound(message, metadata, options, callback);
        };
        AlterInbound: GrpcUnaryServiceInterface<AlterInboundRequest, AlterInboundResponse> = (message: AlterInboundRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AlterInboundResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AlterInboundResponse>, callback?: grpc_1.requestCallback<AlterInboundResponse>): grpc_1.ClientUnaryCall => {
            return super.AlterInbound(message, metadata, options, callback);
        };
        GetInboundUsers: GrpcUnaryServiceInterface<GetInboundUserRequest, GetInboundUserResponse> = (message: GetInboundUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetInboundUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetInboundUserResponse>, callback?: grpc_1.requestCallback<GetInboundUserResponse>): grpc_1.ClientUnaryCall => {
            return super.GetInboundUsers(message, metadata, options, callback);
        };
        GetInboundUsersCount: GrpcUnaryServiceInterface<GetInboundUserRequest, GetInboundUsersCountResponse> = (message: GetInboundUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetInboundUsersCountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetInboundUsersCountResponse>, callback?: grpc_1.requestCallback<GetInboundUsersCountResponse>): grpc_1.ClientUnaryCall => {
            return super.GetInboundUsersCount(message, metadata, options, callback);
        };
        AddOutbound: GrpcUnaryServiceInterface<AddOutboundRequest, AddOutboundResponse> = (message: AddOutboundRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddOutboundResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddOutboundResponse>, callback?: grpc_1.requestCallback<AddOutboundResponse>): grpc_1.ClientUnaryCall => {
            return super.AddOutbound(message, metadata, options, callback);
        };
        RemoveOutbound: GrpcUnaryServiceInterface<RemoveOutboundRequest, RemoveOutboundResponse> = (message: RemoveOutboundRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RemoveOutboundResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RemoveOutboundResponse>, callback?: grpc_1.requestCallback<RemoveOutboundResponse>): grpc_1.ClientUnaryCall => {
            return super.RemoveOutbound(message, metadata, options, callback);
        };
        AlterOutbound: GrpcUnaryServiceInterface<AlterOutboundRequest, AlterOutboundResponse> = (message: AlterOutboundRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AlterOutboundResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AlterOutboundResponse>, callback?: grpc_1.requestCallback<AlterOutboundResponse>): grpc_1.ClientUnaryCall => {
            return super.AlterOutbound(message, metadata, options, callback);
        };
    }
}
