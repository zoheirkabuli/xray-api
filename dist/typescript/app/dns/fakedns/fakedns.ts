/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: app/dns/fakedns/fakedns.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.app.dns.fakedns {
    export class FakeDnsPool extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ip_pool?: string;
            lruSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ip_pool" in data && data.ip_pool != undefined) {
                    this.ip_pool = data.ip_pool;
                }
                if ("lruSize" in data && data.lruSize != undefined) {
                    this.lruSize = data.lruSize;
                }
            }
        }
        get ip_pool() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ip_pool(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get lruSize() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lruSize(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ip_pool?: string;
            lruSize?: number;
        }): FakeDnsPool {
            const message = new FakeDnsPool({});
            if (data.ip_pool != null) {
                message.ip_pool = data.ip_pool;
            }
            if (data.lruSize != null) {
                message.lruSize = data.lruSize;
            }
            return message;
        }
        toObject() {
            const data: {
                ip_pool?: string;
                lruSize?: number;
            } = {};
            if (this.ip_pool != null) {
                data.ip_pool = this.ip_pool;
            }
            if (this.lruSize != null) {
                data.lruSize = this.lruSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ip_pool.length)
                writer.writeString(1, this.ip_pool);
            if (this.lruSize != 0)
                writer.writeInt64(2, this.lruSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FakeDnsPool {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FakeDnsPool();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ip_pool = reader.readString();
                        break;
                    case 2:
                        message.lruSize = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FakeDnsPool {
            return FakeDnsPool.deserialize(bytes);
        }
    }
    export class FakeDnsPoolMulti extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pools?: FakeDnsPool[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pools" in data && data.pools != undefined) {
                    this.pools = data.pools;
                }
            }
        }
        get pools() {
            return pb_1.Message.getRepeatedWrapperField(this, FakeDnsPool, 1) as FakeDnsPool[];
        }
        set pools(value: FakeDnsPool[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            pools?: ReturnType<typeof FakeDnsPool.prototype.toObject>[];
        }): FakeDnsPoolMulti {
            const message = new FakeDnsPoolMulti({});
            if (data.pools != null) {
                message.pools = data.pools.map(item => FakeDnsPool.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                pools?: ReturnType<typeof FakeDnsPool.prototype.toObject>[];
            } = {};
            if (this.pools != null) {
                data.pools = this.pools.map((item: FakeDnsPool) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pools.length)
                writer.writeRepeatedMessage(1, this.pools, (item: FakeDnsPool) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FakeDnsPoolMulti {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FakeDnsPoolMulti();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pools, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FakeDnsPool.deserialize(reader), FakeDnsPool));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FakeDnsPoolMulti {
            return FakeDnsPoolMulti.deserialize(bytes);
        }
    }
}
