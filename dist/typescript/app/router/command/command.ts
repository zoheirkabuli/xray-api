// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: app/router/command/command.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { Network, networkFromJSON, networkToJSON } from "../../../common/net/network";
import { TypedMessage } from "../../../common/serial/typed_message";

export const protobufPackage = "xray.app.router.command";

/**
 * RoutingContext is the context with information relative to routing process.
 * It conforms to the structure of xray.features.routing.Context and
 * xray.features.routing.Route.
 */
export interface RoutingContext {
  InboundTag: string;
  Network: Network;
  SourceIPs: Uint8Array[];
  TargetIPs: Uint8Array[];
  SourcePort: number;
  TargetPort: number;
  TargetDomain: string;
  Protocol: string;
  User: string;
  Attributes: { [key: string]: string };
  OutboundGroupTags: string[];
  OutboundTag: string;
}

export interface RoutingContext_AttributesEntry {
  key: string;
  value: string;
}

/**
 * SubscribeRoutingStatsRequest subscribes to routing statistics channel if
 * opened by xray-core.
 * * FieldSelectors selects a subset of fields in routing statistics to return.
 * Valid selectors:
 *  - inbound: Selects connection's inbound tag.
 *  - network: Selects connection's network.
 *  - ip: Equivalent as "ip_source" and "ip_target", selects both source and
 *  target IP.
 *  - port: Equivalent as "port_source" and "port_target", selects both source
 *  and target port.
 *  - domain: Selects target domain.
 *  - protocol: Select connection's protocol.
 *  - user: Select connection's inbound user email.
 *  - attributes: Select connection's additional attributes.
 *  - outbound: Equivalent as "outbound" and "outbound_group", select both
 *  outbound tag and outbound group tags.
 * * If FieldSelectors is left empty, all fields will be returned.
 */
export interface SubscribeRoutingStatsRequest {
  FieldSelectors: string[];
}

/**
 * TestRouteRequest manually tests a routing result according to the routing
 * context message.
 * * RoutingContext is the routing message without outbound information.
 * * FieldSelectors selects the fields to return in the routing result. All
 * fields are returned if left empty.
 * * PublishResult broadcasts the routing result to routing statistics channel
 * if set true.
 */
export interface TestRouteRequest {
  RoutingContext: RoutingContext | undefined;
  FieldSelectors: string[];
  PublishResult: boolean;
}

export interface PrincipleTargetInfo {
  tag: string[];
}

export interface OverrideInfo {
  target: string;
}

export interface BalancerMsg {
  override: OverrideInfo | undefined;
  principleTarget: PrincipleTargetInfo | undefined;
}

export interface GetBalancerInfoRequest {
  tag: string;
}

export interface GetBalancerInfoResponse {
  balancer: BalancerMsg | undefined;
}

export interface OverrideBalancerTargetRequest {
  balancerTag: string;
  target: string;
}

export interface OverrideBalancerTargetResponse {
}

export interface AddRuleRequest {
  config: TypedMessage | undefined;
  shouldAppend: boolean;
}

export interface AddRuleResponse {
}

export interface RemoveRuleRequest {
  ruleTag: string;
}

export interface RemoveRuleResponse {
}

export interface Config {
}

function createBaseRoutingContext(): RoutingContext {
  return {
    InboundTag: "",
    Network: 0,
    SourceIPs: [],
    TargetIPs: [],
    SourcePort: 0,
    TargetPort: 0,
    TargetDomain: "",
    Protocol: "",
    User: "",
    Attributes: {},
    OutboundGroupTags: [],
    OutboundTag: "",
  };
}

export const RoutingContext: MessageFns<RoutingContext> = {
  encode(message: RoutingContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.InboundTag !== "") {
      writer.uint32(10).string(message.InboundTag);
    }
    if (message.Network !== 0) {
      writer.uint32(16).int32(message.Network);
    }
    for (const v of message.SourceIPs) {
      writer.uint32(26).bytes(v!);
    }
    for (const v of message.TargetIPs) {
      writer.uint32(34).bytes(v!);
    }
    if (message.SourcePort !== 0) {
      writer.uint32(40).uint32(message.SourcePort);
    }
    if (message.TargetPort !== 0) {
      writer.uint32(48).uint32(message.TargetPort);
    }
    if (message.TargetDomain !== "") {
      writer.uint32(58).string(message.TargetDomain);
    }
    if (message.Protocol !== "") {
      writer.uint32(66).string(message.Protocol);
    }
    if (message.User !== "") {
      writer.uint32(74).string(message.User);
    }
    Object.entries(message.Attributes).forEach(([key, value]) => {
      RoutingContext_AttributesEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    for (const v of message.OutboundGroupTags) {
      writer.uint32(90).string(v!);
    }
    if (message.OutboundTag !== "") {
      writer.uint32(98).string(message.OutboundTag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoutingContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoutingContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.InboundTag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.Network = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.SourceIPs.push(reader.bytes());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.TargetIPs.push(reader.bytes());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.SourcePort = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.TargetPort = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.TargetDomain = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.Protocol = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.User = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          const entry10 = RoutingContext_AttributesEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.Attributes[entry10.key] = entry10.value;
          }
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.OutboundGroupTags.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.OutboundTag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoutingContext {
    return {
      InboundTag: isSet(object.InboundTag) ? globalThis.String(object.InboundTag) : "",
      Network: isSet(object.Network) ? networkFromJSON(object.Network) : 0,
      SourceIPs: globalThis.Array.isArray(object?.SourceIPs)
        ? object.SourceIPs.map((e: any) => bytesFromBase64(e))
        : [],
      TargetIPs: globalThis.Array.isArray(object?.TargetIPs)
        ? object.TargetIPs.map((e: any) => bytesFromBase64(e))
        : [],
      SourcePort: isSet(object.SourcePort) ? globalThis.Number(object.SourcePort) : 0,
      TargetPort: isSet(object.TargetPort) ? globalThis.Number(object.TargetPort) : 0,
      TargetDomain: isSet(object.TargetDomain) ? globalThis.String(object.TargetDomain) : "",
      Protocol: isSet(object.Protocol) ? globalThis.String(object.Protocol) : "",
      User: isSet(object.User) ? globalThis.String(object.User) : "",
      Attributes: isObject(object.Attributes)
        ? Object.entries(object.Attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      OutboundGroupTags: globalThis.Array.isArray(object?.OutboundGroupTags)
        ? object.OutboundGroupTags.map((e: any) => globalThis.String(e))
        : [],
      OutboundTag: isSet(object.OutboundTag) ? globalThis.String(object.OutboundTag) : "",
    };
  },

  toJSON(message: RoutingContext): unknown {
    const obj: any = {};
    if (message.InboundTag !== "") {
      obj.InboundTag = message.InboundTag;
    }
    if (message.Network !== 0) {
      obj.Network = networkToJSON(message.Network);
    }
    if (message.SourceIPs?.length) {
      obj.SourceIPs = message.SourceIPs.map((e) => base64FromBytes(e));
    }
    if (message.TargetIPs?.length) {
      obj.TargetIPs = message.TargetIPs.map((e) => base64FromBytes(e));
    }
    if (message.SourcePort !== 0) {
      obj.SourcePort = Math.round(message.SourcePort);
    }
    if (message.TargetPort !== 0) {
      obj.TargetPort = Math.round(message.TargetPort);
    }
    if (message.TargetDomain !== "") {
      obj.TargetDomain = message.TargetDomain;
    }
    if (message.Protocol !== "") {
      obj.Protocol = message.Protocol;
    }
    if (message.User !== "") {
      obj.User = message.User;
    }
    if (message.Attributes) {
      const entries = Object.entries(message.Attributes);
      if (entries.length > 0) {
        obj.Attributes = {};
        entries.forEach(([k, v]) => {
          obj.Attributes[k] = v;
        });
      }
    }
    if (message.OutboundGroupTags?.length) {
      obj.OutboundGroupTags = message.OutboundGroupTags;
    }
    if (message.OutboundTag !== "") {
      obj.OutboundTag = message.OutboundTag;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoutingContext>, I>>(base?: I): RoutingContext {
    return RoutingContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoutingContext>, I>>(object: I): RoutingContext {
    const message = createBaseRoutingContext();
    message.InboundTag = object.InboundTag ?? "";
    message.Network = object.Network ?? 0;
    message.SourceIPs = object.SourceIPs?.map((e) => e) || [];
    message.TargetIPs = object.TargetIPs?.map((e) => e) || [];
    message.SourcePort = object.SourcePort ?? 0;
    message.TargetPort = object.TargetPort ?? 0;
    message.TargetDomain = object.TargetDomain ?? "";
    message.Protocol = object.Protocol ?? "";
    message.User = object.User ?? "";
    message.Attributes = Object.entries(object.Attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.OutboundGroupTags = object.OutboundGroupTags?.map((e) => e) || [];
    message.OutboundTag = object.OutboundTag ?? "";
    return message;
  },
};

function createBaseRoutingContext_AttributesEntry(): RoutingContext_AttributesEntry {
  return { key: "", value: "" };
}

export const RoutingContext_AttributesEntry: MessageFns<RoutingContext_AttributesEntry> = {
  encode(message: RoutingContext_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoutingContext_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoutingContext_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoutingContext_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RoutingContext_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoutingContext_AttributesEntry>, I>>(base?: I): RoutingContext_AttributesEntry {
    return RoutingContext_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoutingContext_AttributesEntry>, I>>(
    object: I,
  ): RoutingContext_AttributesEntry {
    const message = createBaseRoutingContext_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSubscribeRoutingStatsRequest(): SubscribeRoutingStatsRequest {
  return { FieldSelectors: [] };
}

export const SubscribeRoutingStatsRequest: MessageFns<SubscribeRoutingStatsRequest> = {
  encode(message: SubscribeRoutingStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.FieldSelectors) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeRoutingStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRoutingStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.FieldSelectors.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeRoutingStatsRequest {
    return {
      FieldSelectors: globalThis.Array.isArray(object?.FieldSelectors)
        ? object.FieldSelectors.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SubscribeRoutingStatsRequest): unknown {
    const obj: any = {};
    if (message.FieldSelectors?.length) {
      obj.FieldSelectors = message.FieldSelectors;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeRoutingStatsRequest>, I>>(base?: I): SubscribeRoutingStatsRequest {
    return SubscribeRoutingStatsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeRoutingStatsRequest>, I>>(object: I): SubscribeRoutingStatsRequest {
    const message = createBaseSubscribeRoutingStatsRequest();
    message.FieldSelectors = object.FieldSelectors?.map((e) => e) || [];
    return message;
  },
};

function createBaseTestRouteRequest(): TestRouteRequest {
  return { RoutingContext: undefined, FieldSelectors: [], PublishResult: false };
}

export const TestRouteRequest: MessageFns<TestRouteRequest> = {
  encode(message: TestRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.RoutingContext !== undefined) {
      RoutingContext.encode(message.RoutingContext, writer.uint32(10).fork()).join();
    }
    for (const v of message.FieldSelectors) {
      writer.uint32(18).string(v!);
    }
    if (message.PublishResult !== false) {
      writer.uint32(24).bool(message.PublishResult);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.RoutingContext = RoutingContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.FieldSelectors.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.PublishResult = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestRouteRequest {
    return {
      RoutingContext: isSet(object.RoutingContext) ? RoutingContext.fromJSON(object.RoutingContext) : undefined,
      FieldSelectors: globalThis.Array.isArray(object?.FieldSelectors)
        ? object.FieldSelectors.map((e: any) => globalThis.String(e))
        : [],
      PublishResult: isSet(object.PublishResult) ? globalThis.Boolean(object.PublishResult) : false,
    };
  },

  toJSON(message: TestRouteRequest): unknown {
    const obj: any = {};
    if (message.RoutingContext !== undefined) {
      obj.RoutingContext = RoutingContext.toJSON(message.RoutingContext);
    }
    if (message.FieldSelectors?.length) {
      obj.FieldSelectors = message.FieldSelectors;
    }
    if (message.PublishResult !== false) {
      obj.PublishResult = message.PublishResult;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestRouteRequest>, I>>(base?: I): TestRouteRequest {
    return TestRouteRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestRouteRequest>, I>>(object: I): TestRouteRequest {
    const message = createBaseTestRouteRequest();
    message.RoutingContext = (object.RoutingContext !== undefined && object.RoutingContext !== null)
      ? RoutingContext.fromPartial(object.RoutingContext)
      : undefined;
    message.FieldSelectors = object.FieldSelectors?.map((e) => e) || [];
    message.PublishResult = object.PublishResult ?? false;
    return message;
  },
};

function createBasePrincipleTargetInfo(): PrincipleTargetInfo {
  return { tag: [] };
}

export const PrincipleTargetInfo: MessageFns<PrincipleTargetInfo> = {
  encode(message: PrincipleTargetInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tag) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrincipleTargetInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrincipleTargetInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tag.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrincipleTargetInfo {
    return { tag: globalThis.Array.isArray(object?.tag) ? object.tag.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: PrincipleTargetInfo): unknown {
    const obj: any = {};
    if (message.tag?.length) {
      obj.tag = message.tag;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrincipleTargetInfo>, I>>(base?: I): PrincipleTargetInfo {
    return PrincipleTargetInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrincipleTargetInfo>, I>>(object: I): PrincipleTargetInfo {
    const message = createBasePrincipleTargetInfo();
    message.tag = object.tag?.map((e) => e) || [];
    return message;
  },
};

function createBaseOverrideInfo(): OverrideInfo {
  return { target: "" };
}

export const OverrideInfo: MessageFns<OverrideInfo> = {
  encode(message: OverrideInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.target !== "") {
      writer.uint32(18).string(message.target);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OverrideInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOverrideInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.target = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OverrideInfo {
    return { target: isSet(object.target) ? globalThis.String(object.target) : "" };
  },

  toJSON(message: OverrideInfo): unknown {
    const obj: any = {};
    if (message.target !== "") {
      obj.target = message.target;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OverrideInfo>, I>>(base?: I): OverrideInfo {
    return OverrideInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OverrideInfo>, I>>(object: I): OverrideInfo {
    const message = createBaseOverrideInfo();
    message.target = object.target ?? "";
    return message;
  },
};

function createBaseBalancerMsg(): BalancerMsg {
  return { override: undefined, principleTarget: undefined };
}

export const BalancerMsg: MessageFns<BalancerMsg> = {
  encode(message: BalancerMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.override !== undefined) {
      OverrideInfo.encode(message.override, writer.uint32(42).fork()).join();
    }
    if (message.principleTarget !== undefined) {
      PrincipleTargetInfo.encode(message.principleTarget, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BalancerMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalancerMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.override = OverrideInfo.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.principleTarget = PrincipleTargetInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BalancerMsg {
    return {
      override: isSet(object.override) ? OverrideInfo.fromJSON(object.override) : undefined,
      principleTarget: isSet(object.principleTarget) ? PrincipleTargetInfo.fromJSON(object.principleTarget) : undefined,
    };
  },

  toJSON(message: BalancerMsg): unknown {
    const obj: any = {};
    if (message.override !== undefined) {
      obj.override = OverrideInfo.toJSON(message.override);
    }
    if (message.principleTarget !== undefined) {
      obj.principleTarget = PrincipleTargetInfo.toJSON(message.principleTarget);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BalancerMsg>, I>>(base?: I): BalancerMsg {
    return BalancerMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BalancerMsg>, I>>(object: I): BalancerMsg {
    const message = createBaseBalancerMsg();
    message.override = (object.override !== undefined && object.override !== null)
      ? OverrideInfo.fromPartial(object.override)
      : undefined;
    message.principleTarget = (object.principleTarget !== undefined && object.principleTarget !== null)
      ? PrincipleTargetInfo.fromPartial(object.principleTarget)
      : undefined;
    return message;
  },
};

function createBaseGetBalancerInfoRequest(): GetBalancerInfoRequest {
  return { tag: "" };
}

export const GetBalancerInfoRequest: MessageFns<GetBalancerInfoRequest> = {
  encode(message: GetBalancerInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== "") {
      writer.uint32(10).string(message.tag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBalancerInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBalancerInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBalancerInfoRequest {
    return { tag: isSet(object.tag) ? globalThis.String(object.tag) : "" };
  },

  toJSON(message: GetBalancerInfoRequest): unknown {
    const obj: any = {};
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBalancerInfoRequest>, I>>(base?: I): GetBalancerInfoRequest {
    return GetBalancerInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBalancerInfoRequest>, I>>(object: I): GetBalancerInfoRequest {
    const message = createBaseGetBalancerInfoRequest();
    message.tag = object.tag ?? "";
    return message;
  },
};

function createBaseGetBalancerInfoResponse(): GetBalancerInfoResponse {
  return { balancer: undefined };
}

export const GetBalancerInfoResponse: MessageFns<GetBalancerInfoResponse> = {
  encode(message: GetBalancerInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.balancer !== undefined) {
      BalancerMsg.encode(message.balancer, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBalancerInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBalancerInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.balancer = BalancerMsg.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBalancerInfoResponse {
    return { balancer: isSet(object.balancer) ? BalancerMsg.fromJSON(object.balancer) : undefined };
  },

  toJSON(message: GetBalancerInfoResponse): unknown {
    const obj: any = {};
    if (message.balancer !== undefined) {
      obj.balancer = BalancerMsg.toJSON(message.balancer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBalancerInfoResponse>, I>>(base?: I): GetBalancerInfoResponse {
    return GetBalancerInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBalancerInfoResponse>, I>>(object: I): GetBalancerInfoResponse {
    const message = createBaseGetBalancerInfoResponse();
    message.balancer = (object.balancer !== undefined && object.balancer !== null)
      ? BalancerMsg.fromPartial(object.balancer)
      : undefined;
    return message;
  },
};

function createBaseOverrideBalancerTargetRequest(): OverrideBalancerTargetRequest {
  return { balancerTag: "", target: "" };
}

export const OverrideBalancerTargetRequest: MessageFns<OverrideBalancerTargetRequest> = {
  encode(message: OverrideBalancerTargetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.balancerTag !== "") {
      writer.uint32(10).string(message.balancerTag);
    }
    if (message.target !== "") {
      writer.uint32(18).string(message.target);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OverrideBalancerTargetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOverrideBalancerTargetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.balancerTag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.target = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OverrideBalancerTargetRequest {
    return {
      balancerTag: isSet(object.balancerTag) ? globalThis.String(object.balancerTag) : "",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
    };
  },

  toJSON(message: OverrideBalancerTargetRequest): unknown {
    const obj: any = {};
    if (message.balancerTag !== "") {
      obj.balancerTag = message.balancerTag;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OverrideBalancerTargetRequest>, I>>(base?: I): OverrideBalancerTargetRequest {
    return OverrideBalancerTargetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OverrideBalancerTargetRequest>, I>>(
    object: I,
  ): OverrideBalancerTargetRequest {
    const message = createBaseOverrideBalancerTargetRequest();
    message.balancerTag = object.balancerTag ?? "";
    message.target = object.target ?? "";
    return message;
  },
};

function createBaseOverrideBalancerTargetResponse(): OverrideBalancerTargetResponse {
  return {};
}

export const OverrideBalancerTargetResponse: MessageFns<OverrideBalancerTargetResponse> = {
  encode(_: OverrideBalancerTargetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OverrideBalancerTargetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOverrideBalancerTargetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OverrideBalancerTargetResponse {
    return {};
  },

  toJSON(_: OverrideBalancerTargetResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<OverrideBalancerTargetResponse>, I>>(base?: I): OverrideBalancerTargetResponse {
    return OverrideBalancerTargetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OverrideBalancerTargetResponse>, I>>(_: I): OverrideBalancerTargetResponse {
    const message = createBaseOverrideBalancerTargetResponse();
    return message;
  },
};

function createBaseAddRuleRequest(): AddRuleRequest {
  return { config: undefined, shouldAppend: false };
}

export const AddRuleRequest: MessageFns<AddRuleRequest> = {
  encode(message: AddRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      TypedMessage.encode(message.config, writer.uint32(10).fork()).join();
    }
    if (message.shouldAppend !== false) {
      writer.uint32(16).bool(message.shouldAppend);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = TypedMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.shouldAppend = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddRuleRequest {
    return {
      config: isSet(object.config) ? TypedMessage.fromJSON(object.config) : undefined,
      shouldAppend: isSet(object.shouldAppend) ? globalThis.Boolean(object.shouldAppend) : false,
    };
  },

  toJSON(message: AddRuleRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = TypedMessage.toJSON(message.config);
    }
    if (message.shouldAppend !== false) {
      obj.shouldAppend = message.shouldAppend;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddRuleRequest>, I>>(base?: I): AddRuleRequest {
    return AddRuleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddRuleRequest>, I>>(object: I): AddRuleRequest {
    const message = createBaseAddRuleRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? TypedMessage.fromPartial(object.config)
      : undefined;
    message.shouldAppend = object.shouldAppend ?? false;
    return message;
  },
};

function createBaseAddRuleResponse(): AddRuleResponse {
  return {};
}

export const AddRuleResponse: MessageFns<AddRuleResponse> = {
  encode(_: AddRuleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddRuleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddRuleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddRuleResponse {
    return {};
  },

  toJSON(_: AddRuleResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AddRuleResponse>, I>>(base?: I): AddRuleResponse {
    return AddRuleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddRuleResponse>, I>>(_: I): AddRuleResponse {
    const message = createBaseAddRuleResponse();
    return message;
  },
};

function createBaseRemoveRuleRequest(): RemoveRuleRequest {
  return { ruleTag: "" };
}

export const RemoveRuleRequest: MessageFns<RemoveRuleRequest> = {
  encode(message: RemoveRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ruleTag !== "") {
      writer.uint32(10).string(message.ruleTag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ruleTag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveRuleRequest {
    return { ruleTag: isSet(object.ruleTag) ? globalThis.String(object.ruleTag) : "" };
  },

  toJSON(message: RemoveRuleRequest): unknown {
    const obj: any = {};
    if (message.ruleTag !== "") {
      obj.ruleTag = message.ruleTag;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveRuleRequest>, I>>(base?: I): RemoveRuleRequest {
    return RemoveRuleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveRuleRequest>, I>>(object: I): RemoveRuleRequest {
    const message = createBaseRemoveRuleRequest();
    message.ruleTag = object.ruleTag ?? "";
    return message;
  },
};

function createBaseRemoveRuleResponse(): RemoveRuleResponse {
  return {};
}

export const RemoveRuleResponse: MessageFns<RemoveRuleResponse> = {
  encode(_: RemoveRuleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveRuleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveRuleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveRuleResponse {
    return {};
  },

  toJSON(_: RemoveRuleResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveRuleResponse>, I>>(base?: I): RemoveRuleResponse {
    return RemoveRuleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveRuleResponse>, I>>(_: I): RemoveRuleResponse {
    const message = createBaseRemoveRuleResponse();
    return message;
  },
};

function createBaseConfig(): Config {
  return {};
}

export const Config: MessageFns<Config> = {
  encode(_: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Config {
    return {};
  },

  toJSON(_: Config): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(_: I): Config {
    const message = createBaseConfig();
    return message;
  },
};

export interface RoutingService {
  SubscribeRoutingStats(request: SubscribeRoutingStatsRequest): Observable<RoutingContext>;
  TestRoute(request: TestRouteRequest): Promise<RoutingContext>;
  GetBalancerInfo(request: GetBalancerInfoRequest): Promise<GetBalancerInfoResponse>;
  OverrideBalancerTarget(request: OverrideBalancerTargetRequest): Promise<OverrideBalancerTargetResponse>;
  AddRule(request: AddRuleRequest): Promise<AddRuleResponse>;
  RemoveRule(request: RemoveRuleRequest): Promise<RemoveRuleResponse>;
}

export const RoutingServiceServiceName = "xray.app.router.command.RoutingService";
export class RoutingServiceClientImpl implements RoutingService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || RoutingServiceServiceName;
    this.rpc = rpc;
    this.SubscribeRoutingStats = this.SubscribeRoutingStats.bind(this);
    this.TestRoute = this.TestRoute.bind(this);
    this.GetBalancerInfo = this.GetBalancerInfo.bind(this);
    this.OverrideBalancerTarget = this.OverrideBalancerTarget.bind(this);
    this.AddRule = this.AddRule.bind(this);
    this.RemoveRule = this.RemoveRule.bind(this);
  }
  SubscribeRoutingStats(request: SubscribeRoutingStatsRequest): Observable<RoutingContext> {
    const data = SubscribeRoutingStatsRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "SubscribeRoutingStats", data);
    return result.pipe(map((data) => RoutingContext.decode(new BinaryReader(data))));
  }

  TestRoute(request: TestRouteRequest): Promise<RoutingContext> {
    const data = TestRouteRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TestRoute", data);
    return promise.then((data) => RoutingContext.decode(new BinaryReader(data)));
  }

  GetBalancerInfo(request: GetBalancerInfoRequest): Promise<GetBalancerInfoResponse> {
    const data = GetBalancerInfoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBalancerInfo", data);
    return promise.then((data) => GetBalancerInfoResponse.decode(new BinaryReader(data)));
  }

  OverrideBalancerTarget(request: OverrideBalancerTargetRequest): Promise<OverrideBalancerTargetResponse> {
    const data = OverrideBalancerTargetRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OverrideBalancerTarget", data);
    return promise.then((data) => OverrideBalancerTargetResponse.decode(new BinaryReader(data)));
  }

  AddRule(request: AddRuleRequest): Promise<AddRuleResponse> {
    const data = AddRuleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddRule", data);
    return promise.then((data) => AddRuleResponse.decode(new BinaryReader(data)));
  }

  RemoveRule(request: RemoveRuleRequest): Promise<RemoveRuleResponse> {
    const data = RemoveRuleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveRule", data);
    return promise.then((data) => RemoveRuleResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
