/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: app/policy/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.app.policy {
    export class Second extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: number;
        }): Second {
            const message = new Second({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: number;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != 0)
                writer.writeUint32(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Second {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Second();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Second {
            return Second.deserialize(bytes);
        }
    }
    export class Policy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timeout?: Policy.Timeout;
            stats?: Policy.Stats;
            buffer?: Policy.Buffer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
                if ("stats" in data && data.stats != undefined) {
                    this.stats = data.stats;
                }
                if ("buffer" in data && data.buffer != undefined) {
                    this.buffer = data.buffer;
                }
            }
        }
        get timeout() {
            return pb_1.Message.getWrapperField(this, Policy.Timeout, 1) as Policy.Timeout;
        }
        set timeout(value: Policy.Timeout) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_timeout() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get stats() {
            return pb_1.Message.getWrapperField(this, Policy.Stats, 2) as Policy.Stats;
        }
        set stats(value: Policy.Stats) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_stats() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get buffer() {
            return pb_1.Message.getWrapperField(this, Policy.Buffer, 3) as Policy.Buffer;
        }
        set buffer(value: Policy.Buffer) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_buffer() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            timeout?: ReturnType<typeof Policy.Timeout.prototype.toObject>;
            stats?: ReturnType<typeof Policy.Stats.prototype.toObject>;
            buffer?: ReturnType<typeof Policy.Buffer.prototype.toObject>;
        }): Policy {
            const message = new Policy({});
            if (data.timeout != null) {
                message.timeout = Policy.Timeout.fromObject(data.timeout);
            }
            if (data.stats != null) {
                message.stats = Policy.Stats.fromObject(data.stats);
            }
            if (data.buffer != null) {
                message.buffer = Policy.Buffer.fromObject(data.buffer);
            }
            return message;
        }
        toObject() {
            const data: {
                timeout?: ReturnType<typeof Policy.Timeout.prototype.toObject>;
                stats?: ReturnType<typeof Policy.Stats.prototype.toObject>;
                buffer?: ReturnType<typeof Policy.Buffer.prototype.toObject>;
            } = {};
            if (this.timeout != null) {
                data.timeout = this.timeout.toObject();
            }
            if (this.stats != null) {
                data.stats = this.stats.toObject();
            }
            if (this.buffer != null) {
                data.buffer = this.buffer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_timeout)
                writer.writeMessage(1, this.timeout, () => this.timeout.serialize(writer));
            if (this.has_stats)
                writer.writeMessage(2, this.stats, () => this.stats.serialize(writer));
            if (this.has_buffer)
                writer.writeMessage(3, this.buffer, () => this.buffer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Policy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Policy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timeout, () => message.timeout = Policy.Timeout.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.stats, () => message.stats = Policy.Stats.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.buffer, () => message.buffer = Policy.Buffer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Policy {
            return Policy.deserialize(bytes);
        }
    }
    export namespace Policy {
        export class Timeout extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                handshake?: Second;
                connection_idle?: Second;
                uplink_only?: Second;
                downlink_only?: Second;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("handshake" in data && data.handshake != undefined) {
                        this.handshake = data.handshake;
                    }
                    if ("connection_idle" in data && data.connection_idle != undefined) {
                        this.connection_idle = data.connection_idle;
                    }
                    if ("uplink_only" in data && data.uplink_only != undefined) {
                        this.uplink_only = data.uplink_only;
                    }
                    if ("downlink_only" in data && data.downlink_only != undefined) {
                        this.downlink_only = data.downlink_only;
                    }
                }
            }
            get handshake() {
                return pb_1.Message.getWrapperField(this, Second, 1) as Second;
            }
            set handshake(value: Second) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_handshake() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get connection_idle() {
                return pb_1.Message.getWrapperField(this, Second, 2) as Second;
            }
            set connection_idle(value: Second) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_connection_idle() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get uplink_only() {
                return pb_1.Message.getWrapperField(this, Second, 3) as Second;
            }
            set uplink_only(value: Second) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_uplink_only() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get downlink_only() {
                return pb_1.Message.getWrapperField(this, Second, 4) as Second;
            }
            set downlink_only(value: Second) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_downlink_only() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                handshake?: ReturnType<typeof Second.prototype.toObject>;
                connection_idle?: ReturnType<typeof Second.prototype.toObject>;
                uplink_only?: ReturnType<typeof Second.prototype.toObject>;
                downlink_only?: ReturnType<typeof Second.prototype.toObject>;
            }): Timeout {
                const message = new Timeout({});
                if (data.handshake != null) {
                    message.handshake = Second.fromObject(data.handshake);
                }
                if (data.connection_idle != null) {
                    message.connection_idle = Second.fromObject(data.connection_idle);
                }
                if (data.uplink_only != null) {
                    message.uplink_only = Second.fromObject(data.uplink_only);
                }
                if (data.downlink_only != null) {
                    message.downlink_only = Second.fromObject(data.downlink_only);
                }
                return message;
            }
            toObject() {
                const data: {
                    handshake?: ReturnType<typeof Second.prototype.toObject>;
                    connection_idle?: ReturnType<typeof Second.prototype.toObject>;
                    uplink_only?: ReturnType<typeof Second.prototype.toObject>;
                    downlink_only?: ReturnType<typeof Second.prototype.toObject>;
                } = {};
                if (this.handshake != null) {
                    data.handshake = this.handshake.toObject();
                }
                if (this.connection_idle != null) {
                    data.connection_idle = this.connection_idle.toObject();
                }
                if (this.uplink_only != null) {
                    data.uplink_only = this.uplink_only.toObject();
                }
                if (this.downlink_only != null) {
                    data.downlink_only = this.downlink_only.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_handshake)
                    writer.writeMessage(1, this.handshake, () => this.handshake.serialize(writer));
                if (this.has_connection_idle)
                    writer.writeMessage(2, this.connection_idle, () => this.connection_idle.serialize(writer));
                if (this.has_uplink_only)
                    writer.writeMessage(3, this.uplink_only, () => this.uplink_only.serialize(writer));
                if (this.has_downlink_only)
                    writer.writeMessage(4, this.downlink_only, () => this.downlink_only.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Timeout {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Timeout();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.handshake, () => message.handshake = Second.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.connection_idle, () => message.connection_idle = Second.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.uplink_only, () => message.uplink_only = Second.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.downlink_only, () => message.downlink_only = Second.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Timeout {
                return Timeout.deserialize(bytes);
            }
        }
        export class Stats extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                user_uplink?: boolean;
                user_downlink?: boolean;
                user_online?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("user_uplink" in data && data.user_uplink != undefined) {
                        this.user_uplink = data.user_uplink;
                    }
                    if ("user_downlink" in data && data.user_downlink != undefined) {
                        this.user_downlink = data.user_downlink;
                    }
                    if ("user_online" in data && data.user_online != undefined) {
                        this.user_online = data.user_online;
                    }
                }
            }
            get user_uplink() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set user_uplink(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get user_downlink() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set user_downlink(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get user_online() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set user_online(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                user_uplink?: boolean;
                user_downlink?: boolean;
                user_online?: boolean;
            }): Stats {
                const message = new Stats({});
                if (data.user_uplink != null) {
                    message.user_uplink = data.user_uplink;
                }
                if (data.user_downlink != null) {
                    message.user_downlink = data.user_downlink;
                }
                if (data.user_online != null) {
                    message.user_online = data.user_online;
                }
                return message;
            }
            toObject() {
                const data: {
                    user_uplink?: boolean;
                    user_downlink?: boolean;
                    user_online?: boolean;
                } = {};
                if (this.user_uplink != null) {
                    data.user_uplink = this.user_uplink;
                }
                if (this.user_downlink != null) {
                    data.user_downlink = this.user_downlink;
                }
                if (this.user_online != null) {
                    data.user_online = this.user_online;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.user_uplink != false)
                    writer.writeBool(1, this.user_uplink);
                if (this.user_downlink != false)
                    writer.writeBool(2, this.user_downlink);
                if (this.user_online != false)
                    writer.writeBool(3, this.user_online);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Stats {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Stats();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.user_uplink = reader.readBool();
                            break;
                        case 2:
                            message.user_downlink = reader.readBool();
                            break;
                        case 3:
                            message.user_online = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Stats {
                return Stats.deserialize(bytes);
            }
        }
        export class Buffer extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                connection?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("connection" in data && data.connection != undefined) {
                        this.connection = data.connection;
                    }
                }
            }
            get connection() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set connection(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                connection?: number;
            }): Buffer {
                const message = new Buffer({});
                if (data.connection != null) {
                    message.connection = data.connection;
                }
                return message;
            }
            toObject() {
                const data: {
                    connection?: number;
                } = {};
                if (this.connection != null) {
                    data.connection = this.connection;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.connection != 0)
                    writer.writeInt32(1, this.connection);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Buffer {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Buffer();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.connection = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Buffer {
                return Buffer.deserialize(bytes);
            }
        }
    }
    export class SystemPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stats?: SystemPolicy.Stats;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stats" in data && data.stats != undefined) {
                    this.stats = data.stats;
                }
            }
        }
        get stats() {
            return pb_1.Message.getWrapperField(this, SystemPolicy.Stats, 1) as SystemPolicy.Stats;
        }
        set stats(value: SystemPolicy.Stats) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_stats() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            stats?: ReturnType<typeof SystemPolicy.Stats.prototype.toObject>;
        }): SystemPolicy {
            const message = new SystemPolicy({});
            if (data.stats != null) {
                message.stats = SystemPolicy.Stats.fromObject(data.stats);
            }
            return message;
        }
        toObject() {
            const data: {
                stats?: ReturnType<typeof SystemPolicy.Stats.prototype.toObject>;
            } = {};
            if (this.stats != null) {
                data.stats = this.stats.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stats)
                writer.writeMessage(1, this.stats, () => this.stats.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SystemPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SystemPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stats, () => message.stats = SystemPolicy.Stats.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SystemPolicy {
            return SystemPolicy.deserialize(bytes);
        }
    }
    export namespace SystemPolicy {
        export class Stats extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                inbound_uplink?: boolean;
                inbound_downlink?: boolean;
                outbound_uplink?: boolean;
                outbound_downlink?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("inbound_uplink" in data && data.inbound_uplink != undefined) {
                        this.inbound_uplink = data.inbound_uplink;
                    }
                    if ("inbound_downlink" in data && data.inbound_downlink != undefined) {
                        this.inbound_downlink = data.inbound_downlink;
                    }
                    if ("outbound_uplink" in data && data.outbound_uplink != undefined) {
                        this.outbound_uplink = data.outbound_uplink;
                    }
                    if ("outbound_downlink" in data && data.outbound_downlink != undefined) {
                        this.outbound_downlink = data.outbound_downlink;
                    }
                }
            }
            get inbound_uplink() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set inbound_uplink(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get inbound_downlink() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set inbound_downlink(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get outbound_uplink() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set outbound_uplink(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            get outbound_downlink() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set outbound_downlink(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                inbound_uplink?: boolean;
                inbound_downlink?: boolean;
                outbound_uplink?: boolean;
                outbound_downlink?: boolean;
            }): Stats {
                const message = new Stats({});
                if (data.inbound_uplink != null) {
                    message.inbound_uplink = data.inbound_uplink;
                }
                if (data.inbound_downlink != null) {
                    message.inbound_downlink = data.inbound_downlink;
                }
                if (data.outbound_uplink != null) {
                    message.outbound_uplink = data.outbound_uplink;
                }
                if (data.outbound_downlink != null) {
                    message.outbound_downlink = data.outbound_downlink;
                }
                return message;
            }
            toObject() {
                const data: {
                    inbound_uplink?: boolean;
                    inbound_downlink?: boolean;
                    outbound_uplink?: boolean;
                    outbound_downlink?: boolean;
                } = {};
                if (this.inbound_uplink != null) {
                    data.inbound_uplink = this.inbound_uplink;
                }
                if (this.inbound_downlink != null) {
                    data.inbound_downlink = this.inbound_downlink;
                }
                if (this.outbound_uplink != null) {
                    data.outbound_uplink = this.outbound_uplink;
                }
                if (this.outbound_downlink != null) {
                    data.outbound_downlink = this.outbound_downlink;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.inbound_uplink != false)
                    writer.writeBool(1, this.inbound_uplink);
                if (this.inbound_downlink != false)
                    writer.writeBool(2, this.inbound_downlink);
                if (this.outbound_uplink != false)
                    writer.writeBool(3, this.outbound_uplink);
                if (this.outbound_downlink != false)
                    writer.writeBool(4, this.outbound_downlink);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Stats {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Stats();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.inbound_uplink = reader.readBool();
                            break;
                        case 2:
                            message.inbound_downlink = reader.readBool();
                            break;
                        case 3:
                            message.outbound_uplink = reader.readBool();
                            break;
                        case 4:
                            message.outbound_downlink = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Stats {
                return Stats.deserialize(bytes);
            }
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            level?: Map<number, Policy>;
            system?: SystemPolicy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("system" in data && data.system != undefined) {
                    this.system = data.system;
                }
            }
            if (!this.level)
                this.level = new Map();
        }
        get level() {
            return pb_1.Message.getField(this, 1) as any as Map<number, Policy>;
        }
        set level(value: Map<number, Policy>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        get system() {
            return pb_1.Message.getWrapperField(this, SystemPolicy, 2) as SystemPolicy;
        }
        set system(value: SystemPolicy) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_system() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            level?: {
                [key: number]: ReturnType<typeof Policy.prototype.toObject>;
            };
            system?: ReturnType<typeof SystemPolicy.prototype.toObject>;
        }): Config {
            const message = new Config({});
            if (typeof data.level == "object") {
                message.level = new Map(Object.entries(data.level).map(([key, value]) => [Number(key), Policy.fromObject(value)]));
            }
            if (data.system != null) {
                message.system = SystemPolicy.fromObject(data.system);
            }
            return message;
        }
        toObject() {
            const data: {
                level?: {
                    [key: number]: ReturnType<typeof Policy.prototype.toObject>;
                };
                system?: ReturnType<typeof SystemPolicy.prototype.toObject>;
            } = {};
            if (this.level != null) {
                data.level = (Object.fromEntries)((Array.from)(this.level).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.system != null) {
                data.system = this.system.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.level) {
                writer.writeMessage(1, this.level, () => {
                    writer.writeUint32(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.has_system)
                writer.writeMessage(2, this.system, () => this.system.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.level as any, reader, reader.readUint32, () => {
                            let value;
                            reader.readMessage(message, () => value = Policy.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 2:
                        reader.readMessage(message.system, () => message.system = SystemPolicy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
