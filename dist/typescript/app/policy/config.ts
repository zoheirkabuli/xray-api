// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: app/policy/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "xray.app.policy";

export interface Second {
  value: number;
}

export interface Policy {
  timeout: Policy_Timeout | undefined;
  stats: Policy_Stats | undefined;
  buffer: Policy_Buffer | undefined;
}

/** Timeout is a message for timeout settings in various stages, in seconds. */
export interface Policy_Timeout {
  handshake: Second | undefined;
  connectionIdle: Second | undefined;
  uplinkOnly: Second | undefined;
  downlinkOnly: Second | undefined;
}

export interface Policy_Stats {
  userUplink: boolean;
  userDownlink: boolean;
  userOnline: boolean;
}

export interface Policy_Buffer {
  /** Buffer size per connection, in bytes. -1 for unlimited buffer. */
  connection: number;
}

export interface SystemPolicy {
  stats: SystemPolicy_Stats | undefined;
}

export interface SystemPolicy_Stats {
  inboundUplink: boolean;
  inboundDownlink: boolean;
  outboundUplink: boolean;
  outboundDownlink: boolean;
}

export interface Config {
  level: { [key: number]: Policy };
  system: SystemPolicy | undefined;
}

export interface Config_LevelEntry {
  key: number;
  value: Policy | undefined;
}

function createBaseSecond(): Second {
  return { value: 0 };
}

export const Second: MessageFns<Second> = {
  encode(message: Second, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).uint32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Second {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecond();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Second {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: Second): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Second>, I>>(base?: I): Second {
    return Second.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Second>, I>>(object: I): Second {
    const message = createBaseSecond();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBasePolicy(): Policy {
  return { timeout: undefined, stats: undefined, buffer: undefined };
}

export const Policy: MessageFns<Policy> = {
  encode(message: Policy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeout !== undefined) {
      Policy_Timeout.encode(message.timeout, writer.uint32(10).fork()).join();
    }
    if (message.stats !== undefined) {
      Policy_Stats.encode(message.stats, writer.uint32(18).fork()).join();
    }
    if (message.buffer !== undefined) {
      Policy_Buffer.encode(message.buffer, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timeout = Policy_Timeout.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stats = Policy_Stats.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.buffer = Policy_Buffer.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy {
    return {
      timeout: isSet(object.timeout) ? Policy_Timeout.fromJSON(object.timeout) : undefined,
      stats: isSet(object.stats) ? Policy_Stats.fromJSON(object.stats) : undefined,
      buffer: isSet(object.buffer) ? Policy_Buffer.fromJSON(object.buffer) : undefined,
    };
  },

  toJSON(message: Policy): unknown {
    const obj: any = {};
    if (message.timeout !== undefined) {
      obj.timeout = Policy_Timeout.toJSON(message.timeout);
    }
    if (message.stats !== undefined) {
      obj.stats = Policy_Stats.toJSON(message.stats);
    }
    if (message.buffer !== undefined) {
      obj.buffer = Policy_Buffer.toJSON(message.buffer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Policy>, I>>(base?: I): Policy {
    return Policy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Policy>, I>>(object: I): Policy {
    const message = createBasePolicy();
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Policy_Timeout.fromPartial(object.timeout)
      : undefined;
    message.stats = (object.stats !== undefined && object.stats !== null)
      ? Policy_Stats.fromPartial(object.stats)
      : undefined;
    message.buffer = (object.buffer !== undefined && object.buffer !== null)
      ? Policy_Buffer.fromPartial(object.buffer)
      : undefined;
    return message;
  },
};

function createBasePolicy_Timeout(): Policy_Timeout {
  return { handshake: undefined, connectionIdle: undefined, uplinkOnly: undefined, downlinkOnly: undefined };
}

export const Policy_Timeout: MessageFns<Policy_Timeout> = {
  encode(message: Policy_Timeout, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.handshake !== undefined) {
      Second.encode(message.handshake, writer.uint32(10).fork()).join();
    }
    if (message.connectionIdle !== undefined) {
      Second.encode(message.connectionIdle, writer.uint32(18).fork()).join();
    }
    if (message.uplinkOnly !== undefined) {
      Second.encode(message.uplinkOnly, writer.uint32(26).fork()).join();
    }
    if (message.downlinkOnly !== undefined) {
      Second.encode(message.downlinkOnly, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy_Timeout {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy_Timeout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.handshake = Second.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.connectionIdle = Second.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uplinkOnly = Second.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.downlinkOnly = Second.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy_Timeout {
    return {
      handshake: isSet(object.handshake) ? Second.fromJSON(object.handshake) : undefined,
      connectionIdle: isSet(object.connectionIdle) ? Second.fromJSON(object.connectionIdle) : undefined,
      uplinkOnly: isSet(object.uplinkOnly) ? Second.fromJSON(object.uplinkOnly) : undefined,
      downlinkOnly: isSet(object.downlinkOnly) ? Second.fromJSON(object.downlinkOnly) : undefined,
    };
  },

  toJSON(message: Policy_Timeout): unknown {
    const obj: any = {};
    if (message.handshake !== undefined) {
      obj.handshake = Second.toJSON(message.handshake);
    }
    if (message.connectionIdle !== undefined) {
      obj.connectionIdle = Second.toJSON(message.connectionIdle);
    }
    if (message.uplinkOnly !== undefined) {
      obj.uplinkOnly = Second.toJSON(message.uplinkOnly);
    }
    if (message.downlinkOnly !== undefined) {
      obj.downlinkOnly = Second.toJSON(message.downlinkOnly);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Policy_Timeout>, I>>(base?: I): Policy_Timeout {
    return Policy_Timeout.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Policy_Timeout>, I>>(object: I): Policy_Timeout {
    const message = createBasePolicy_Timeout();
    message.handshake = (object.handshake !== undefined && object.handshake !== null)
      ? Second.fromPartial(object.handshake)
      : undefined;
    message.connectionIdle = (object.connectionIdle !== undefined && object.connectionIdle !== null)
      ? Second.fromPartial(object.connectionIdle)
      : undefined;
    message.uplinkOnly = (object.uplinkOnly !== undefined && object.uplinkOnly !== null)
      ? Second.fromPartial(object.uplinkOnly)
      : undefined;
    message.downlinkOnly = (object.downlinkOnly !== undefined && object.downlinkOnly !== null)
      ? Second.fromPartial(object.downlinkOnly)
      : undefined;
    return message;
  },
};

function createBasePolicy_Stats(): Policy_Stats {
  return { userUplink: false, userDownlink: false, userOnline: false };
}

export const Policy_Stats: MessageFns<Policy_Stats> = {
  encode(message: Policy_Stats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userUplink !== false) {
      writer.uint32(8).bool(message.userUplink);
    }
    if (message.userDownlink !== false) {
      writer.uint32(16).bool(message.userDownlink);
    }
    if (message.userOnline !== false) {
      writer.uint32(24).bool(message.userOnline);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy_Stats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy_Stats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userUplink = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userDownlink = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userOnline = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy_Stats {
    return {
      userUplink: isSet(object.userUplink) ? globalThis.Boolean(object.userUplink) : false,
      userDownlink: isSet(object.userDownlink) ? globalThis.Boolean(object.userDownlink) : false,
      userOnline: isSet(object.userOnline) ? globalThis.Boolean(object.userOnline) : false,
    };
  },

  toJSON(message: Policy_Stats): unknown {
    const obj: any = {};
    if (message.userUplink !== false) {
      obj.userUplink = message.userUplink;
    }
    if (message.userDownlink !== false) {
      obj.userDownlink = message.userDownlink;
    }
    if (message.userOnline !== false) {
      obj.userOnline = message.userOnline;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Policy_Stats>, I>>(base?: I): Policy_Stats {
    return Policy_Stats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Policy_Stats>, I>>(object: I): Policy_Stats {
    const message = createBasePolicy_Stats();
    message.userUplink = object.userUplink ?? false;
    message.userDownlink = object.userDownlink ?? false;
    message.userOnline = object.userOnline ?? false;
    return message;
  },
};

function createBasePolicy_Buffer(): Policy_Buffer {
  return { connection: 0 };
}

export const Policy_Buffer: MessageFns<Policy_Buffer> = {
  encode(message: Policy_Buffer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connection !== 0) {
      writer.uint32(8).int32(message.connection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy_Buffer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy_Buffer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.connection = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy_Buffer {
    return { connection: isSet(object.connection) ? globalThis.Number(object.connection) : 0 };
  },

  toJSON(message: Policy_Buffer): unknown {
    const obj: any = {};
    if (message.connection !== 0) {
      obj.connection = Math.round(message.connection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Policy_Buffer>, I>>(base?: I): Policy_Buffer {
    return Policy_Buffer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Policy_Buffer>, I>>(object: I): Policy_Buffer {
    const message = createBasePolicy_Buffer();
    message.connection = object.connection ?? 0;
    return message;
  },
};

function createBaseSystemPolicy(): SystemPolicy {
  return { stats: undefined };
}

export const SystemPolicy: MessageFns<SystemPolicy> = {
  encode(message: SystemPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stats !== undefined) {
      SystemPolicy_Stats.encode(message.stats, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SystemPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stats = SystemPolicy_Stats.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemPolicy {
    return { stats: isSet(object.stats) ? SystemPolicy_Stats.fromJSON(object.stats) : undefined };
  },

  toJSON(message: SystemPolicy): unknown {
    const obj: any = {};
    if (message.stats !== undefined) {
      obj.stats = SystemPolicy_Stats.toJSON(message.stats);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SystemPolicy>, I>>(base?: I): SystemPolicy {
    return SystemPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SystemPolicy>, I>>(object: I): SystemPolicy {
    const message = createBaseSystemPolicy();
    message.stats = (object.stats !== undefined && object.stats !== null)
      ? SystemPolicy_Stats.fromPartial(object.stats)
      : undefined;
    return message;
  },
};

function createBaseSystemPolicy_Stats(): SystemPolicy_Stats {
  return { inboundUplink: false, inboundDownlink: false, outboundUplink: false, outboundDownlink: false };
}

export const SystemPolicy_Stats: MessageFns<SystemPolicy_Stats> = {
  encode(message: SystemPolicy_Stats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inboundUplink !== false) {
      writer.uint32(8).bool(message.inboundUplink);
    }
    if (message.inboundDownlink !== false) {
      writer.uint32(16).bool(message.inboundDownlink);
    }
    if (message.outboundUplink !== false) {
      writer.uint32(24).bool(message.outboundUplink);
    }
    if (message.outboundDownlink !== false) {
      writer.uint32(32).bool(message.outboundDownlink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SystemPolicy_Stats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemPolicy_Stats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.inboundUplink = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.inboundDownlink = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.outboundUplink = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.outboundDownlink = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemPolicy_Stats {
    return {
      inboundUplink: isSet(object.inboundUplink) ? globalThis.Boolean(object.inboundUplink) : false,
      inboundDownlink: isSet(object.inboundDownlink) ? globalThis.Boolean(object.inboundDownlink) : false,
      outboundUplink: isSet(object.outboundUplink) ? globalThis.Boolean(object.outboundUplink) : false,
      outboundDownlink: isSet(object.outboundDownlink) ? globalThis.Boolean(object.outboundDownlink) : false,
    };
  },

  toJSON(message: SystemPolicy_Stats): unknown {
    const obj: any = {};
    if (message.inboundUplink !== false) {
      obj.inboundUplink = message.inboundUplink;
    }
    if (message.inboundDownlink !== false) {
      obj.inboundDownlink = message.inboundDownlink;
    }
    if (message.outboundUplink !== false) {
      obj.outboundUplink = message.outboundUplink;
    }
    if (message.outboundDownlink !== false) {
      obj.outboundDownlink = message.outboundDownlink;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SystemPolicy_Stats>, I>>(base?: I): SystemPolicy_Stats {
    return SystemPolicy_Stats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SystemPolicy_Stats>, I>>(object: I): SystemPolicy_Stats {
    const message = createBaseSystemPolicy_Stats();
    message.inboundUplink = object.inboundUplink ?? false;
    message.inboundDownlink = object.inboundDownlink ?? false;
    message.outboundUplink = object.outboundUplink ?? false;
    message.outboundDownlink = object.outboundDownlink ?? false;
    return message;
  },
};

function createBaseConfig(): Config {
  return { level: {}, system: undefined };
}

export const Config: MessageFns<Config> = {
  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.level).forEach(([key, value]) => {
      Config_LevelEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.system !== undefined) {
      SystemPolicy.encode(message.system, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = Config_LevelEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.level[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.system = SystemPolicy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      level: isObject(object.level)
        ? Object.entries(object.level).reduce<{ [key: number]: Policy }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Policy.fromJSON(value);
          return acc;
        }, {})
        : {},
      system: isSet(object.system) ? SystemPolicy.fromJSON(object.system) : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.level) {
      const entries = Object.entries(message.level);
      if (entries.length > 0) {
        obj.level = {};
        entries.forEach(([k, v]) => {
          obj.level[k] = Policy.toJSON(v);
        });
      }
    }
    if (message.system !== undefined) {
      obj.system = SystemPolicy.toJSON(message.system);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.level = Object.entries(object.level ?? {}).reduce<{ [key: number]: Policy }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = Policy.fromPartial(value);
      }
      return acc;
    }, {});
    message.system = (object.system !== undefined && object.system !== null)
      ? SystemPolicy.fromPartial(object.system)
      : undefined;
    return message;
  },
};

function createBaseConfig_LevelEntry(): Config_LevelEntry {
  return { key: 0, value: undefined };
}

export const Config_LevelEntry: MessageFns<Config_LevelEntry> = {
  encode(message: Config_LevelEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      Policy.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config_LevelEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig_LevelEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Policy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config_LevelEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? Policy.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Config_LevelEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Policy.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config_LevelEntry>, I>>(base?: I): Config_LevelEntry {
    return Config_LevelEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config_LevelEntry>, I>>(object: I): Config_LevelEntry {
    const message = createBaseConfig_LevelEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? Policy.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
