/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: common/protocol/server_spec.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../net/address";
import * as dependency_2 from "./user";
import * as pb_1 from "google-protobuf";
export namespace xray.common.protocol {
    export class ServerEndpoint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: dependency_1.xray.common.net.IPOrDomain;
            port?: number;
            user?: dependency_2.xray.common.protocol.User[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get address() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.net.IPOrDomain, 1) as dependency_1.xray.common.net.IPOrDomain;
        }
        set address(value: dependency_1.xray.common.net.IPOrDomain) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_address() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get user() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.xray.common.protocol.User, 3) as dependency_2.xray.common.protocol.User[];
        }
        set user(value: dependency_2.xray.common.protocol.User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            address?: ReturnType<typeof dependency_1.xray.common.net.IPOrDomain.prototype.toObject>;
            port?: number;
            user?: ReturnType<typeof dependency_2.xray.common.protocol.User.prototype.toObject>[];
        }): ServerEndpoint {
            const message = new ServerEndpoint({});
            if (data.address != null) {
                message.address = dependency_1.xray.common.net.IPOrDomain.fromObject(data.address);
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.user != null) {
                message.user = data.user.map(item => dependency_2.xray.common.protocol.User.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                address?: ReturnType<typeof dependency_1.xray.common.net.IPOrDomain.prototype.toObject>;
                port?: number;
                user?: ReturnType<typeof dependency_2.xray.common.protocol.User.prototype.toObject>[];
            } = {};
            if (this.address != null) {
                data.address = this.address.toObject();
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.user != null) {
                data.user = this.user.map((item: dependency_2.xray.common.protocol.User) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_address)
                writer.writeMessage(1, this.address, () => this.address.serialize(writer));
            if (this.port != 0)
                writer.writeUint32(2, this.port);
            if (this.user.length)
                writer.writeRepeatedMessage(3, this.user, (item: dependency_2.xray.common.protocol.User) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerEndpoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerEndpoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.address, () => message.address = dependency_1.xray.common.net.IPOrDomain.deserialize(reader));
                        break;
                    case 2:
                        message.port = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.user, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.xray.common.protocol.User.deserialize(reader), dependency_2.xray.common.protocol.User));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerEndpoint {
            return ServerEndpoint.deserialize(bytes);
        }
    }
}
