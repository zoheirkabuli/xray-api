/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: common/protocol/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../serial/typed_message";
import * as pb_1 from "google-protobuf";
export namespace xray.common.protocol {
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            level?: number;
            email?: string;
            account?: dependency_1.xray.common.serial.TypedMessage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get account() {
            return pb_1.Message.getWrapperField(this, dependency_1.xray.common.serial.TypedMessage, 3) as dependency_1.xray.common.serial.TypedMessage;
        }
        set account(value: dependency_1.xray.common.serial.TypedMessage) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_account() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            level?: number;
            email?: string;
            account?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
        }): User {
            const message = new User({});
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.account != null) {
                message.account = dependency_1.xray.common.serial.TypedMessage.fromObject(data.account);
            }
            return message;
        }
        toObject() {
            const data: {
                level?: number;
                email?: string;
                account?: ReturnType<typeof dependency_1.xray.common.serial.TypedMessage.prototype.toObject>;
            } = {};
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.level != 0)
                writer.writeUint32(1, this.level);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.has_account)
                writer.writeMessage(3, this.account, () => this.account.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.level = reader.readUint32();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.account, () => message.account = dependency_1.xray.common.serial.TypedMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
}
