// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: common/protocol/headers.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "xray.common.protocol";

export enum SecurityType {
  UNKNOWN = 0,
  AUTO = 2,
  AES128_GCM = 3,
  CHACHA20_POLY1305 = 4,
  /** NONE - [DEPRECATED 2023-06] */
  NONE = 5,
  ZERO = 6,
  UNRECOGNIZED = -1,
}

export function securityTypeFromJSON(object: any): SecurityType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return SecurityType.UNKNOWN;
    case 2:
    case "AUTO":
      return SecurityType.AUTO;
    case 3:
    case "AES128_GCM":
      return SecurityType.AES128_GCM;
    case 4:
    case "CHACHA20_POLY1305":
      return SecurityType.CHACHA20_POLY1305;
    case 5:
    case "NONE":
      return SecurityType.NONE;
    case 6:
    case "ZERO":
      return SecurityType.ZERO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecurityType.UNRECOGNIZED;
  }
}

export function securityTypeToJSON(object: SecurityType): string {
  switch (object) {
    case SecurityType.UNKNOWN:
      return "UNKNOWN";
    case SecurityType.AUTO:
      return "AUTO";
    case SecurityType.AES128_GCM:
      return "AES128_GCM";
    case SecurityType.CHACHA20_POLY1305:
      return "CHACHA20_POLY1305";
    case SecurityType.NONE:
      return "NONE";
    case SecurityType.ZERO:
      return "ZERO";
    case SecurityType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SecurityConfig {
  type: SecurityType;
}

function createBaseSecurityConfig(): SecurityConfig {
  return { type: 0 };
}

export const SecurityConfig: MessageFns<SecurityConfig> = {
  encode(message: SecurityConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityConfig {
    return { type: isSet(object.type) ? securityTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: SecurityConfig): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = securityTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecurityConfig>, I>>(base?: I): SecurityConfig {
    return SecurityConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecurityConfig>, I>>(object: I): SecurityConfig {
    const message = createBaseSecurityConfig();
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
