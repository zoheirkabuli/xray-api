/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: common/net/network.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.common.net {
    export enum Network {
        Unknown = 0,
        TCP = 2,
        UDP = 3,
        UNIX = 4
    }
    export class NetworkList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            network?: Network[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("network" in data && data.network != undefined) {
                    this.network = data.network;
                }
            }
        }
        get network() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Network[];
        }
        set network(value: Network[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            network?: Network[];
        }): NetworkList {
            const message = new NetworkList({});
            if (data.network != null) {
                message.network = data.network;
            }
            return message;
        }
        toObject() {
            const data: {
                network?: Network[];
            } = {};
            if (this.network != null) {
                data.network = this.network;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.network.length)
                writer.writePackedEnum(1, this.network);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NetworkList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NetworkList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.network = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NetworkList {
            return NetworkList.deserialize(bytes);
        }
    }
}
