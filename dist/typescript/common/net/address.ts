/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: common/net/address.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.common.net {
    export class IPOrDomain extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            ip?: Uint8Array;
            domain?: never;
        } | {
            ip?: never;
            domain?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
                if ("domain" in data && data.domain != undefined) {
                    this.domain = data.domain;
                }
            }
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ip(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ip() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get domain() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set domain(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_domain() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get address() {
            const cases: {
                [index: number]: "none" | "ip" | "domain";
            } = {
                0: "none",
                1: "ip",
                2: "domain"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ip?: Uint8Array;
            domain?: string;
        }): IPOrDomain {
            const message = new IPOrDomain({});
            if (data.ip != null) {
                message.ip = data.ip;
            }
            if (data.domain != null) {
                message.domain = data.domain;
            }
            return message;
        }
        toObject() {
            const data: {
                ip?: Uint8Array;
                domain?: string;
            } = {};
            if (this.ip != null) {
                data.ip = this.ip;
            }
            if (this.domain != null) {
                data.domain = this.domain;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ip)
                writer.writeBytes(1, this.ip);
            if (this.has_domain)
                writer.writeString(2, this.domain);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IPOrDomain {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IPOrDomain();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ip = reader.readBytes();
                        break;
                    case 2:
                        message.domain = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IPOrDomain {
            return IPOrDomain.deserialize(bytes);
        }
    }
}
