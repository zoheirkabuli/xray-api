/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: common/net/destination.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./network";
import * as dependency_2 from "./address";
import * as pb_1 from "google-protobuf";
export namespace xray.common.net {
    export class Endpoint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            network?: dependency_1.xray.common.net.Network;
            address?: dependency_2.xray.common.net.IPOrDomain;
            port?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("network" in data && data.network != undefined) {
                    this.network = data.network;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
            }
        }
        get network() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.xray.common.net.Network.Unknown) as dependency_1.xray.common.net.Network;
        }
        set network(value: dependency_1.xray.common.net.Network) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getWrapperField(this, dependency_2.xray.common.net.IPOrDomain, 2) as dependency_2.xray.common.net.IPOrDomain;
        }
        set address(value: dependency_2.xray.common.net.IPOrDomain) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_address() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            network?: dependency_1.xray.common.net.Network;
            address?: ReturnType<typeof dependency_2.xray.common.net.IPOrDomain.prototype.toObject>;
            port?: number;
        }): Endpoint {
            const message = new Endpoint({});
            if (data.network != null) {
                message.network = data.network;
            }
            if (data.address != null) {
                message.address = dependency_2.xray.common.net.IPOrDomain.fromObject(data.address);
            }
            if (data.port != null) {
                message.port = data.port;
            }
            return message;
        }
        toObject() {
            const data: {
                network?: dependency_1.xray.common.net.Network;
                address?: ReturnType<typeof dependency_2.xray.common.net.IPOrDomain.prototype.toObject>;
                port?: number;
            } = {};
            if (this.network != null) {
                data.network = this.network;
            }
            if (this.address != null) {
                data.address = this.address.toObject();
            }
            if (this.port != null) {
                data.port = this.port;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.network != dependency_1.xray.common.net.Network.Unknown)
                writer.writeEnum(1, this.network);
            if (this.has_address)
                writer.writeMessage(2, this.address, () => this.address.serialize(writer));
            if (this.port != 0)
                writer.writeUint32(3, this.port);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Endpoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Endpoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.network = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.address, () => message.address = dependency_2.xray.common.net.IPOrDomain.deserialize(reader));
                        break;
                    case 3:
                        message.port = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Endpoint {
            return Endpoint.deserialize(bytes);
        }
    }
}
