/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: common/net/port.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace xray.common.net {
    export class PortRange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            From?: number;
            To?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("From" in data && data.From != undefined) {
                    this.From = data.From;
                }
                if ("To" in data && data.To != undefined) {
                    this.To = data.To;
                }
            }
        }
        get From() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set From(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get To() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set To(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            From?: number;
            To?: number;
        }): PortRange {
            const message = new PortRange({});
            if (data.From != null) {
                message.From = data.From;
            }
            if (data.To != null) {
                message.To = data.To;
            }
            return message;
        }
        toObject() {
            const data: {
                From?: number;
                To?: number;
            } = {};
            if (this.From != null) {
                data.From = this.From;
            }
            if (this.To != null) {
                data.To = this.To;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.From != 0)
                writer.writeUint32(1, this.From);
            if (this.To != 0)
                writer.writeUint32(2, this.To);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PortRange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PortRange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.From = reader.readUint32();
                        break;
                    case 2:
                        message.To = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PortRange {
            return PortRange.deserialize(bytes);
        }
    }
    export class PortList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            range?: PortRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("range" in data && data.range != undefined) {
                    this.range = data.range;
                }
            }
        }
        get range() {
            return pb_1.Message.getRepeatedWrapperField(this, PortRange, 1) as PortRange[];
        }
        set range(value: PortRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            range?: ReturnType<typeof PortRange.prototype.toObject>[];
        }): PortList {
            const message = new PortList({});
            if (data.range != null) {
                message.range = data.range.map(item => PortRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                range?: ReturnType<typeof PortRange.prototype.toObject>[];
            } = {};
            if (this.range != null) {
                data.range = this.range.map((item: PortRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.range.length)
                writer.writeRepeatedMessage(1, this.range, (item: PortRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PortList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PortList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.range, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PortRange.deserialize(reader), PortRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PortList {
            return PortList.deserialize(bytes);
        }
    }
}
